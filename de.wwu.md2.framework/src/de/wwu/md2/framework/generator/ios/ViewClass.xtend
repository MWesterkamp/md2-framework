package de.wwu.md2.framework.generator.ios

import de.wwu.md2.framework.mD2.AlternativesPane
import de.wwu.md2.framework.mD2.AutoGeneratedContentElement
import de.wwu.md2.framework.mD2.Button
import de.wwu.md2.framework.mD2.CheckBox
import de.wwu.md2.framework.mD2.ContainerElement
import de.wwu.md2.framework.mD2.EntitySelector
import de.wwu.md2.framework.mD2.FlowDirection
import de.wwu.md2.framework.mD2.FlowLayoutPane
import de.wwu.md2.framework.mD2.FlowLayoutPaneFlowDirectionParam
import de.wwu.md2.framework.mD2.GridLayoutPane
import de.wwu.md2.framework.mD2.GridLayoutPaneColumnsParam
import de.wwu.md2.framework.mD2.GridLayoutPaneRowsParam
import de.wwu.md2.framework.mD2.Image
import de.wwu.md2.framework.mD2.Label
import de.wwu.md2.framework.mD2.OptionInput
import de.wwu.md2.framework.mD2.Spacer
import de.wwu.md2.framework.mD2.TabbedAlternativesPane
import de.wwu.md2.framework.mD2.TextInput
import de.wwu.md2.framework.mD2.TextInputType
import de.wwu.md2.framework.mD2.Tooltip
import de.wwu.md2.framework.mD2.ViewElementDef
import de.wwu.md2.framework.mD2.ViewElementRef
import de.wwu.md2.framework.mD2.ViewElementType
import de.wwu.md2.framework.mD2.List
import java.util.Date

import static de.wwu.md2.framework.generator.util.MD2GeneratorUtil.*
import de.wwu.md2.framework.mD2.ReferencedModelType
import de.wwu.md2.framework.generator.util.DataContainer
import de.wwu.md2.framework.mD2.CustomAction
import de.wwu.md2.framework.mD2.MappingTask
import de.wwu.md2.framework.mD2.PathDefinition
import de.wwu.md2.framework.mD2.ViewGUIElement
import de.wwu.md2.framework.mD2.Entity

class ViewClass
{
	
	def static createViewH(ContainerElement e) '''
		//
		//  «getName(e).toFirstUpper»View.h
		//
		//  Generated by MD2 framework on «new Date()».
		//  Copyright (c) 2012 Uni-Muenster. All rights reserved.
		//
		
		#import "«IOSGenerator::md2LibraryImport»/View.h"
		
		@interface «getName(e).toFirstUpper»View : View{
			ListViewWidget *listViewWidget;
		}
		
		@end'''
	
	def static createViewM(ContainerElement e, DataContainer dataContainer) '''
		//
		//  «getName(e).toFirstUpper»View.m
		//
		//  Generated by MD2 framework on «new Date()».
		//  Copyright (c) 2012 Uni-Muenster. All rights reserved.
		//
		
		#import "«getName(e).toFirstUpper»View.h"
		«FOR layout : preCalculateImports(e)»
			#import "«layout».h"
		«ENDFOR»
		
		«FOR contentElement : getElements(e)»
			«IF getViewGUIElement(contentElement) instanceof List»
			#import "«((getViewGUIElement(contentElement)as List).itemtype as ReferencedModelType).entity.name.toFirstUpper»Entity.h"
			#import "SpecificAppData.h"
			#import "«IOSGenerator::md2LibraryImport»/GotoControllerAction.h"
			#import "«IOSGenerator::md2LibraryImport»/ListViewWidget.h"
			«IF (getViewGUIElement(contentElement) as List).listtype.value == 1»
				#import "«((getMapping(getViewGUIElement(contentElement), dataContainer) as PathDefinition).tail.attributeRef.eContainer as Entity).name»Entity.h"
			«ENDIF»
			#import "«IOSGenerator::md2LibraryImport»/EventHandler.h"
			«ENDIF»
		«ENDFOR»
		
		@implementation «getName(e).toFirstUpper»View
		
		-(id) init
		{
			self = [super init];
			if (self)
				identifier = @"«getName(e).toFirstLower»";
			return self;
		}
		
		-(void) loadView
		{
			[super loadView];
			
			«IF e instanceof GridLayoutPane»
				defaultLayout = [[«getLayout(e).get(0)» alloc] initWithFrame: LayoutFrame(self.frame) numberRows: «getLayout(e).get(1)» numberColumns: «getLayout(e).get(2)» identifier: @"«getName(e).toFirstLower»DefaultLayout"];
			«ELSEIF e instanceof FlowLayoutPane»
				defaultLayout = [[«getLayout(e).get(0)» alloc] initWithFrame: LayoutFrame(self.frame) numberElements: «getLayout(e).get(2)» direction: «getLayout(e).get(1)» identifier: @"«getName(e).toFirstLower»DefaultLayout"];
			«ENDIF»
			
			«FOR contentElement : getElements(e)»
				«generateContentElem(getViewGUIElement(contentElement), null)»
			«ENDFOR»
			
			[contentView addSubview: defaultLayout];
		}
		
		«FOR contentElement : getElements(e)»
			«IF getViewGUIElement(contentElement) instanceof List»
				«listUtil(getViewGUIElement(contentElement) as List, dataContainer)»
			«ENDIF»
		«ENDFOR»
				 
		
		@end'''
	
	
	/////////////////////////////////////////////////////////
	// Content Elements
	/////////////////////////////////////////////////////////
	
	def static dispatch CharSequence generateContentElem(TextInput elem, String toLayout) '''
		«IF elem.type.equals(TextInputType::DEFAULT)»
			[self addWidget: [self «IF elem.labelText != null»createTextFieldWidget«ELSE»createTextInput«ENDIF»: @"«getName(elem)»" hasInfoButton: «IF elem.tooltipText != null»YES«ELSE»NO«ENDIF»]«setToLayout(toLayout)»];
		«ELSE»
			[self addWidget: [self «IF elem.labelText != null»createComboboxWidget«ELSE»createCombobox«ENDIF»: @"«getName(elem)»" hasDatePicker: «IF elem.type.equals(TextInputType::DATE) ||
				elem.type.equals(TextInputType::DATE_TIME)»YES«ELSE»NO«ENDIF» hasTimePicker: «IF elem.type.equals(TextInputType::TIME) ||
				elem.type.equals(TextInputType::DATE_TIME)»YES«ELSE»NO«ENDIF» hasInfoButton: «IF elem.tooltipText != null»YES«ELSE»NO«ENDIF»]«setToLayout(toLayout)»];
		«ENDIF»
	'''
	
	def static dispatch CharSequence generateContentElem(OptionInput elem, String toLayout) '''
		«IF elem.enumBody != null»
			[self addWidget: [self «IF elem.labelText != null»createComboboxWidget«ELSE»createCombobox«ENDIF»: @"«getName(elem)»" options: [NSArray arrayWithObjects: «FOR string : elem.enumBody.elements»@"«string»", «ENDFOR»nil] hasInfoButton: «IF elem.tooltipText != null»YES«ELSE»NO«ENDIF»]«setToLayout(toLayout)»];
		«ELSE»
			[self addWidget: [self «IF elem.labelText != null»createComboboxWidget«ELSE»createCombobox«ENDIF»: @"«getName(elem)»" hasDatePicker: NO hasTimePicker: NO hasInfoButton: «IF elem.tooltipText != null»YES«ELSE»NO«ENDIF»]«setToLayout(toLayout)»];
		«ENDIF»
	'''
	
	def static dispatch CharSequence generateContentElem(Label elem, String toLayout) '''
		[self addWidget: [self createLabelWidget: @"«getName(elem)»" hasInfoButton: NO]«setToLayout(toLayout)»];
	'''
	
	def static dispatch CharSequence generateContentElem(Image elem, String toLayout) '''
		[self addWidget: [self createImageWidget: @"«getName(elem)»" imageName: @"«elem.src.replaceAll("^\\./", "")»"]«setToLayout(toLayout)»];
	'''
	
	def static dispatch CharSequence generateContentElem(Spacer elem, String toLayout) '''
		[self addWidget: [self createSpacerWidget: @"«IF elem.name == null»«anonymousName»«ELSE»«getName(elem)»«ENDIF»" hasInfoButton: NO]«setToLayout(toLayout)»];
	'''
	
	def static dispatch CharSequence generateContentElem(Button elem, String toLayout) '''
		[self addWidget: [self createButtonWidget: @"«getName(elem)»"]«setToLayout(toLayout)»];
	'''
	
	def static dispatch CharSequence generateContentElem(CheckBox elem, String toLayout) '''
		[self addWidget: [self createCheckboxWidget: @"«getName(elem)»" hasInfoButton: NO]«setToLayout(toLayout)»];
	'''
	
	def static dispatch CharSequence generateContentElem(Tooltip elem, String toLayout) '''
		[self addWidget: [self createSpacerWidget: @"«getName(elem)»" hasInfoButton: YES]«setToLayout(toLayout)»];
	'''
	
	def static dispatch CharSequence generateContentElem(List elem, String toLayout)'''
		if(listViewWidget == nil){
			listViewWidget = [self createListViewWidget:@"«getName(elem)»Widget" withFrame:contentView.bounds];
		}
		UITableView *tableView = [listViewWidget listView];
	
		tableView.autoresizingMask = UIViewAutoresizingFlexibleHeight|UIViewAutoresizingFlexibleWidth;
		tableView.delegate = self;
		tableView.dataSource = self;
		[tableView reloadData];
	
	
		[self addListViewWidget: listViewWidget identifier:@"«getName(elem)»"];
	'''
	
	//TODO: Adapt MultiPane to newest changes of entity selector
	def static dispatch CharSequence generateContentElem(EntitySelector elem, String toLayout) '''
		[self addWidget: [self createEntitySelectorWidget: @"«getName(elem)»" textProposition: @"«getPathTailAsString(elem.textProposition.tail)»" hasInfoButton: NO]«setToLayout(toLayout)»];
	'''
	
	def static dispatch CharSequence generateContentElem(AutoGeneratedContentElement elem, String toLayout) { /*intentionally blank, but dispatch needed*/ }
	
	
	/////////////////////////////////////////////////////////
	// Container Elements
	/////////////////////////////////////////////////////////
	
	def static dispatch CharSequence generateContentElem(GridLayoutPane elem, String toLayout) '''
		
		GridLayout *«getName(elem)»Layout = [[«getLayout(elem).get(0)» alloc] initWithFrame: LayoutFrame(«IF toLayout != null»«toLayout»«ELSE»self«ENDIF».frame) numberRows: «getLayout(elem).get(1)» numberColumns: «getLayout(elem).get(2)» identifier: @"«getName(elem)»Layout"];
		«FOR contentElement : getElements(elem)»
			«generateContentElem(getViewGUIElement(contentElement), getName(elem) + "Layout")»
		«ENDFOR»
		[self addView: «getName(elem)»Layout identifier: @"«getName(elem)»Layout"«setToLayout(toLayout)»];
		
	'''
	
	def static dispatch CharSequence generateContentElem(FlowLayoutPane elem, String toLayout) '''
		
		FlowLayout *«getName(elem)»Layout = [[«getLayout(elem).get(0)» alloc] initWithFrame: LayoutFrame(«IF toLayout != null»«toLayout»«ELSE»self«ENDIF».frame) numberElements: «getLayout(elem).get(2)» direction: «getLayout(elem).get(1)» identifier: @"«getName(elem)»Layout"];
		«FOR contentElement : getElements(elem)»
			«generateContentElem(getViewGUIElement(contentElement), getName(elem) + "Layout")»
		«ENDFOR»
		[self addView: «getName(elem)»Layout identifier: @"«getName(elem)»Layout"«setToLayout(toLayout)»];
		
	'''
	
	def static dispatch CharSequence generateContentElem(AlternativesPane elem, String toLayout) { /*intentionally blank, but dispatch needed*/ }
	def static dispatch CharSequence generateContentElem(TabbedAlternativesPane elem, String toLayout) { /*intentionally blank, but dispatch needed*/ }
	
	
	/////////////////////////////////////////////////////////
	// Helper methods
	/////////////////////////////////////////////////////////
	
	/**
	 * Returns an EList containing all content elements of a container.
	 */
	def private static getElements(ContainerElement e)
	{
		switch e
		{
			GridLayoutPane: e.elements
			FlowLayoutPane: e.elements
		}
	}
	
	/**
	 * Gets the ViewGUIElement for a given ViewElementType that may be a reference on another element
	 * or the view element itself.
	 */
	def private static getViewGUIElement(ViewElementType viewElemType)
	{
		switch viewElemType
		{
			ViewElementRef: viewElemType.value
			ViewElementDef: viewElemType.value
		}
	}
	
	/**
	 * Generates a string snippet for the toLayout parameter
	 */
	def private static setToLayout(String toLayout)
	{
		if(toLayout != null) {" " + "toLayout: " + toLayout} else ""
	}
	
	/**
	 * Returns the layout name as a string for a given container
	 */
	def private static getLayoutPathOfContainer(ContainerElement container)
	{
		IOSGenerator::md2LibraryImport + "/" + switch container
		{
			GridLayoutPane: "GridLayout"
			FlowLayoutPane: "FlowLayout"
		}
	}
	
	/**
	 * Figure out which layouts are used in this view to allows imports
	 */
	def private static preCalculateImports(ContainerElement container)
	{
		val resultSet = newHashSet
		container.eAllContents.toIterable.filter(typeof(ContainerElement)).forEach [e | resultSet.add(getLayoutPathOfContainer(e))]
		resultSet.add(getLayoutPathOfContainer(container))
		resultSet.remove(null)
		return resultSet
	}
	
	/**
	 * Returns array of the form
	 * [GridLayout, #Rows, #Columns] or [FlowLayout, Direction, #Elements]
	 */
	def private static getLayout(ContainerElement e)
	{
		var Object e1
		var Object e2
		var Object e3
		switch e
		{
			GridLayoutPane:
			{
				e1 = "GridLayout"
				for(p : e.params)
				{
					switch p
					{
						GridLayoutPaneRowsParam: e2 = p.value
						GridLayoutPaneColumnsParam: e3 = p.value
					}
				}
				
				// if only rows or columns are defined, calculate the other value
				if(e2 == null)
				{
					e2 = Math::ceil(e.elements.size.doubleValue / e3 as Integer).intValue
				}
				else if(e3 == null)
				{
					e2 = Math::ceil(e.elements.size.doubleValue / e2 as Integer).intValue
				}
			}
			FlowLayoutPane:
			{
				var param = e.params.filter(typeof(FlowLayoutPaneFlowDirectionParam)).head as FlowLayoutPaneFlowDirectionParam
				
				e1 = "FlowLayout"
				e2 = if(param != null && param.flowDirection == FlowDirection::VERTICAL) {"Vertical"} else {"Horizontal"}
				e3 = e.elements.size
			}
		}
		newArrayList(e1, e2, e3)
	}



/////////////////////////////////////////////////////////////////////
// List Helper
////////////////////////////////////////////////////////////////////

def private static getMapping(ViewGUIElement element, DataContainer dataContainer){
	var PathDefinition pd = null;
	for(customAction : dataContainer.customActions)
	{
		for(fragment : customAction.codeFragments){
			if(fragment instanceof MappingTask){
				if((fragment as MappingTask).selection){
					if((fragment as MappingTask).selection && (fragment as MappingTask).referencedViewField.ref.equals(element)){
					pd =(fragment as MappingTask).pathDefinition;
				}
				}
			}
		}
	}
	pd;
}

def private static listUtil(List listElement, DataContainer dataContainer){
	'''
	- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
	return 1;
	}

	- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
	NSArray *«(listElement.itemtype as ReferencedModelType).entity.name.toFirstLower»s = [((ContentProviderMany *)[listViewWidget getContentProvider]) getDataObjects];
	return [«(listElement.itemtype as ReferencedModelType).entity.name.toFirstLower»s count];
	}

	- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section {
	    return @"«(listElement.itemtype as ReferencedModelType).entity.name»s";
	}
	
	- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
	    static NSString *MyIdentifier = @"MyReuseIdentifier";
	    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:MyIdentifier];
	    if (cell == nil) {
	        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:MyIdentifier];
	    }
	    «(listElement.itemtype as ReferencedModelType).entity.name.toFirstUpper»Entity *«(listElement.itemtype as ReferencedModelType).entity.name.toFirstLower» = [[((ContentProviderMany *)[listViewWidget getContentProvider]) getDataObjects] objectAtIndex:indexPath.row];
	    NSString *displaytext =  [NSString stringWithFormat: @"«listElement.itemtext.map["%@"].join(' ')»", «listElement.itemtext.map['['+ entityRef.name.toFirstLower + ' ' + tail.attributeRef.name.toFirstLower + ']'].join(',')»];
	    cell.textLabel.text = displaytext;
	    
		«IF listElement.listtype.value == 1»
			«((getMapping(listElement, dataContainer) as PathDefinition).tail.attributeRef.eContainer as Entity).name»Entity *current«((getMapping(listElement, dataContainer) as PathDefinition).tail.attributeRef.eContainer as Entity).name» =  [((ContentProviderMany *)[listViewWidget getSelection]) getDataObject];
			if ([[current«((getMapping(listElement, dataContainer) as PathDefinition).tail.attributeRef.eContainer as Entity).name» «(getMapping(listElement, dataContainer) as PathDefinition).tail.attributeRef.name»] containsObject: «(listElement.itemtype as ReferencedModelType).entity.name.toFirstLower»])
			{
		  	  cell.accessoryType = UITableViewCellAccessoryCheckmark;
			}
			else{
			    cell.accessoryType = UITableViewCellAccessoryNone;
			}
		«ENDIF»
	    
	    
	    return cell;
	}
	
	-(void) tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
		«IF listElement.listtype.value == 1» //TODO: sehr unschön so...
			«((getMapping(listElement, dataContainer) as PathDefinition).tail.attributeRef.eContainer as Entity).name»Entity *current«((getMapping(listElement, dataContainer) as PathDefinition).tail.attributeRef.eContainer as Entity).name» =  [((ContentProviderMany *)[listViewWidget getSelection]) getDataObject];
			UITableViewCell *cell = [tableView cellForRowAtIndexPath:indexPath];
			if ([[current«((getMapping(listElement, dataContainer) as PathDefinition).tail.attributeRef.eContainer as Entity).name» «(getMapping(listElement, dataContainer) as PathDefinition).tail.attributeRef.name»] containsObject:[[((ContentProviderMany *)[listViewWidget getContentProvider]) getDataObjects] objectAtIndex:indexPath.row]]) {
				cell.accessoryType = UITableViewCellAccessoryNone;
				[current«((getMapping(listElement, dataContainer) as PathDefinition).tail.attributeRef.eContainer as Entity).name» remove«(getMapping(listElement, dataContainer) as PathDefinition).tail.attributeRef.name.toFirstUpper»Object:[[((ContentProviderMany *)[listViewWidget getContentProvider]) getDataObjects] objectAtIndex:indexPath.row]];
			} else {
				cell.accessoryType = UITableViewCellAccessoryCheckmark;
				[current«((getMapping(listElement, dataContainer) as PathDefinition).tail.attributeRef.eContainer as Entity).name» add«(getMapping(listElement, dataContainer) as PathDefinition).tail.attributeRef.name.toFirstUpper»Object:[[((ContentProviderMany *)[listViewWidget getContentProvider]) getDataObjects] objectAtIndex:indexPath.row]];
			}
		«ELSE»
			[((ContentProviderMany *)[listViewWidget getContentProvider]) setCurrentDataObject:indexPath.row];
			[[EventHandler instance] eventTriggered: [ViewEvent eventWithIdentifier:@"«listElement.name»" eventType: OnTouch]];
		«ENDIF»
	}
'''
	
}

}

