package de.wwu.md2.framework.generator.ios

import de.wwu.md2.framework.generator.util.DataContainer
import java.util.Date

import static de.wwu.md2.framework.generator.util.MD2GeneratorUtil.*

class ActionEventClass
{
	def static createAppDataH(DataContainer dataContainer) '''
		//
		//  AppData.h
		//
		//  Generated by MD2 framework on «new Date()».
		//  Copyright (c) 2012 Uni-Muenster. All rights reserved.
		//
		
		#define ModelVersion @"«dataContainer.main.modelVersion»"
		
		#import "Event.h"
		#import "Controller.h"
		#import "PickerController.h"
		#import "HelpController.h"
		«FOR container : dataContainer.viewContainers»
			#import "«getName(container).toFirstUpper»Controller.h"
		«ENDFOR»
		«FOR contentProvider : dataContainer.contentProviders»
			#import "«contentProvider.name.toFirstUpper»ContentProvider.h"
		«ENDFOR»
		@class Workflow;
		@class WorkflowManagement;
		#import "GPSContentProvider.h"
		
		@interface AppData : NSObject
		{
		    UIWindow *window;
		    UITabBarController *tabBarController;
		    UIPopoverController *popoverController;
			
		    Controller *currentController;
		    PickerController *pickerController;
		    HelpController *helpController;
			«FOR container : dataContainer.viewContainers»
				«getName(container).toFirstUpper»Controller *«getName(container).toFirstLower»Controller;
			«ENDFOR»
			
			«FOR contentProvider : dataContainer.contentProviders»
				«contentProvider.name.toFirstUpper»ContentProvider *«contentProvider.name.toFirstLower»ContentProvider;
			«ENDFOR»
			
			WorkflowManagement *workflowManagement;
			«FOR workflow : dataContainer.workflows»
				Workflow *«workflow.name.toFirstLower»Workflow;
			«ENDFOR»
			
			NSMutableDictionary *eventActionMapping;
			GPSContentProvider *gpsContentProvider;
		}
		
		@property (retain, nonatomic) UIWindow *window;
		@property (retain, nonatomic) UITabBarController *tabBarController;
		@property (retain, nonatomic) UIPopoverController *popoverController;
		
		@property (retain, nonatomic) NSMutableArray *controllers;
		@property (retain, nonatomic) Controller *currentController;
		@property (retain, nonatomic) PickerController *pickerController;
		@property (retain, nonatomic) HelpController *helpController;
		«FOR container : dataContainer.viewContainers»
			@property (retain, nonatomic) «getName(container).toFirstUpper»Controller *«getName(container).toFirstLower»Controller;
		«ENDFOR»
		
		«FOR contentProvider : dataContainer.contentProviders»
			@property (retain, nonatomic) «contentProvider.name.toFirstUpper»ContentProvider *«contentProvider.name.toFirstLower»ContentProvider;
		«ENDFOR»
		
		@property (retain, nonatomic) WorkflowManagement *workflowManagement;
		«FOR workflow : dataContainer.workflows»
			@property (retain, nonatomic) Workflow *«workflow.name.toFirstLower»Workflow;
		«ENDFOR»
		
		@property (retain, nonatomic) NSMutableDictionary *eventActionMapping;
		@property (retain, nonatomic) GPSContentProvider *gpsContentProvider;
		
		+(UIWindow *) window;
		+(UITabBarController *) tabBarController;
		+(UIPopoverController *) popoverController;
		+(NSArray *) controllers;
		+(Controller *) currentController;
		+(PickerController *) pickerController;
		+(HelpController *) helpController;
		«FOR container : dataContainer.viewContainers»+(«getName(container).toFirstUpper»Controller *) «getName(container).toFirstLower»Controller;«ENDFOR»
		«FOR contentProvider : dataContainer.contentProviders»+(«contentProvider.name.toFirstUpper»ContentProvider *) «contentProvider.name.toFirstLower»ContentProvider;«ENDFOR»
		+(WorkflowManagement *) workflowManagement;
		«FOR workflow : dataContainer.workflows»+(Workflow *) «workflow.name.toFirstLower»Workflow;«ENDFOR»
		+(NSMutableDictionary *) eventActionMapping;
		+(GPSContentProvider *) gpsContentProvider;
		
		+(void) setWindow: (UIWindow *) window;
		+(void) setTabBarController: (UITabBarController *) tabBarController;
		+(void) setPopoverController: (UIPopoverController *) popoverController;
		+(void) setControllers: (NSArray *) controllers;
		+(void) setCurrentController: (Controller *) currentController;
		+(void) setPickerController: (PickerController *) pickerController;
		+(void) setHelpController: (HelpController *) helpController;
		«FOR container : dataContainer.viewContainers»+(void) set«getName(container).toFirstUpper»Controller: («getName(container).toFirstUpper»Controller *) «getName(container).toFirstLower»Controller;«ENDFOR»
		«FOR contentProvider : dataContainer.contentProviders»+(void) set«contentProvider.name.toFirstUpper»ContentProvider: («contentProvider.name.toFirstUpper»ContentProvider *) «contentProvider.name.toFirstLower»ContentProvider;«ENDFOR»
		+(void) setWorkflowManagement: (WorkflowManagement *) workflowManagement;
		«FOR workflow : dataContainer.workflows»+(void) set«workflow.name.toFirstUpper»Workflow: (Workflow *) «workflow.name.toFirstLower»Workflow;«ENDFOR»
		+(void) setEventActionMapping: (NSMutableDictionary *) eventActionMapping;
		+(void) setGPSContentProvider: (GPSContentProvider *) gpsContentProvider;
		
		@end'''
	
	def static createAppDataM(DataContainer dataContainer) '''
		//
		//  AppData.m
		//
		//  Generated by MD2 framework on «new Date()».
		//  Copyright (c) 2012 Uni-Muenster. All rights reserved.
		//
		
		#import "AppData.h"
		@implementation AppData
		
		static AppData *instance;
		
		@synthesize window, tabBarController, popoverController;
		@synthesize currentController, controllers, pickerController, helpController;
		@synthesize «dataContainer.viewContainers.map(container | getName(container).toFirstLower + "Controller").join(", ")»;
		@synthesize «dataContainer.contentProviders.map(provider | provider.name.toFirstLower + "ContentProvider").join(", ")»;
		@synthesize workflowManagement;
		«IF !dataContainer.workflows.empty»@synthesize «dataContainer.workflows.map(workflow | workflow.name.toFirstLower + "Workflow").join(", ")»;«ENDIF»
		@synthesize eventActionMapping, gpsContentProvider;
		
		#pragma mark Initialization Methods

		+(AppData *) instance
		{
			@synchronized([AppData class])
			{
				if (!instance)
					instance = [[self alloc] init];
				return instance;
			}
			return nil;
		}
		
		+(id) alloc
		{
			@synchronized([AppData class])
			{
				NSAssert(instance == nil, @"Attempted to allocate a second instance of a singleton.");
				instance = [super alloc];
				return instance;
			}
			return nil;
		}
		
		+(id) init
		{
		    return [self init];
		}

		#pragma mark Static Accessor Methods
		
		+(UIWindow *) window
		{
		    return [[AppData instance] window];
		}
		
		+(UITabBarController *) tabBarController
		{
		    return [[AppData instance] tabBarController];
		}
		
		+(UIPopoverController *) popoverController
		{
		    return [[AppData instance] popoverController];
		}
		
		+(NSArray *) controllers
		{
		    return [[AppData instance] controllers];
		}
		
		+(Controller *) currentController
		{
		    return [[AppData instance] currentController];
		}
		
		+(PickerController *) pickerController
		{
		    return [[AppData instance] pickerController];
		}
		
		+(HelpController *) helpController
		{
		    return [AppData instance].helpController;
		}
		
		«FOR container : dataContainer.viewContainers»
			+(«getName(container).toFirstUpper»Controller *) «getName(container).toFirstLower»Controller
			{
			    return [AppData instance].«getName(container).toFirstLower»Controller;
			}
			
		«ENDFOR»
		
		«FOR contentProvider : dataContainer.contentProviders»
			+(«contentProvider.name.toFirstUpper»ContentProvider *) «contentProvider.name.toFirstLower»ContentProvider
			{
			    return [AppData instance].«contentProvider.name.toFirstLower»ContentProvider;
			}
			
		«ENDFOR»
		
		+(WorkflowManagement *) workflowManagement
		{
			return [AppData instance].workflowManagement;
		}
		«FOR workflow : dataContainer.workflows»
			+(Workflow *) «workflow.name.toFirstLower»Workflow
			{
			    return [AppData instance].«workflow.name.toFirstLower»Workflow;
			}
			
		«ENDFOR»
		
		+(NSMutableDictionary *) eventActionMapping
		{
		    return [AppData instance].eventActionMapping;
		}
		
		+(GPSContentProvider *) gpsContentProvider
		{
		    return [AppData instance].gpsContentProvider;
		}
		
		#pragma mark Static Manipulation Methods
		
		+(void) setWindow: (UIWindow *) window
		{
		    [AppData instance].window = window;
		}
		
		+(void) setTabBarController: (UITabBarController *) tabBarController
		{
		    [AppData instance].tabBarController = tabBarController;
		}
		
		+(void) setPopoverController: (UIPopoverController *) popoverController
		{
		    [AppData instance].popoverController = popoverController;
		}
		
		+(void) setControllers: (NSArray *) controllers
		{
		    [AppData instance].controllers = [NSMutableArray arrayWithArray: controllers];
		}
		
		+(void) setCurrentController: (Controller *) currentController
		{
		    [AppData instance].currentController = currentController;
		}
		
		+(void) setPickerController: (PickerController *) pickerController
		{
		    [AppData instance].pickerController = pickerController;
		}
		
		+(void) setHelpController: (HelpController *) helpController
		{
		    [AppData instance].helpController = helpController;
		}
		
		«FOR container : dataContainer.viewContainers»
			+(void) set«getName(container).toFirstUpper»Controller: («getName(container).toFirstUpper»Controller *) «getName(container).toFirstLower»Controller
			{
			    [AppData instance].«getName(container).toFirstLower»Controller = «getName(container).toFirstLower»Controller;
			}
			
		«ENDFOR»
		
		«FOR contentProvider : dataContainer.contentProviders»
			+(void) set«contentProvider.name.toFirstUpper»ContentProvider: («contentProvider.name.toFirstUpper»ContentProvider *) «contentProvider.name.toFirstLower»ContentProvider
			{
			    [AppData instance].«contentProvider.name.toFirstLower»ContentProvider = «contentProvider.name.toFirstLower»ContentProvider;
			}
			
		«ENDFOR»
		
		+(void) setWorkflowManagement: (WorkflowManagement *) workflowManagement
		{
			[AppData instance].workflowManagement = workflowManagement;
		}
		«FOR workflow : dataContainer.workflows»
			+(void) set«workflow.name.toFirstUpper»Workflow: (Workflow *) «workflow.name.toFirstLower»Workflow
			{
			    [AppData instance].«workflow.name.toFirstLower»Workflow = «workflow.name.toFirstLower»Workflow;
			}
			
		«ENDFOR»

		+(void) setEventActionMapping: (NSMutableDictionary *) eventActionMapping
		{
		    [AppData instance].eventActionMapping = eventActionMapping;
		}
		
		+(void) setGPSContentProvider: (GPSContentProvider *) gpsContentProvider
		{
		    [AppData instance].gpsContentProvider = gpsContentProvider;
		}
		
		@end'''
}