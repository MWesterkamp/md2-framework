/*
 * generated by Xtext
 */
package de.wwu.md2.framework.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MD2GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MD2ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MD2Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackagePackageDefinitionParserRuleCall_0_0 = (RuleCall)cPackageAssignment_0.eContents().get(0);
		private final Assignment cModelLayerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModelLayerMD2ModelLayerParserRuleCall_1_0 = (RuleCall)cModelLayerAssignment_1.eContents().get(0);
		
		///////////////////////////////////////
		///////////////////////////////////////
		//// Initial
		///////////////////////////////////////
		///////////////////////////////////////
		/// *
		// * The MD2Model is the root element of each model.
		// * It contains the package definition and model
		// * layer in the layer specific type.
		// * / MD2Model: // Each model layer has to be stored in a
		//// corresponding package (see constraints)
		//	package=PackageDefinition modelLayer=MD2ModelLayer?;
		@Override public ParserRule getRule() { return rule; }

		//// Each model layer has to be stored in a
		//// corresponding package (see constraints)
		//package=PackageDefinition modelLayer=MD2ModelLayer?
		public Group getGroup() { return cGroup; }

		//// Each model layer has to be stored in a
		//// corresponding package (see constraints)
		//package=PackageDefinition
		public Assignment getPackageAssignment_0() { return cPackageAssignment_0; }

		//PackageDefinition
		public RuleCall getPackagePackageDefinitionParserRuleCall_0_0() { return cPackagePackageDefinitionParserRuleCall_0_0; }

		//modelLayer=MD2ModelLayer?
		public Assignment getModelLayerAssignment_1() { return cModelLayerAssignment_1; }

		//MD2ModelLayer
		public RuleCall getModelLayerMD2ModelLayerParserRuleCall_1_0() { return cModelLayerMD2ModelLayerParserRuleCall_1_0; }
	}

	public class MD2ModelLayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MD2ModelLayer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cViewParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cControllerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cModelParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWorkflowParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		/// *
		// * The MD2ModelLayer can be either a View,
		// * a Controller or a Model
		// * / MD2ModelLayer:
		//	View | Controller | Model | Workflow;
		@Override public ParserRule getRule() { return rule; }

		//View | Controller | Model | Workflow
		public Alternatives getAlternatives() { return cAlternatives; }

		//View
		public RuleCall getViewParserRuleCall_0() { return cViewParserRuleCall_0; }

		//Controller
		public RuleCall getControllerParserRuleCall_1() { return cControllerParserRuleCall_1; }

		//Model
		public RuleCall getModelParserRuleCall_2() { return cModelParserRuleCall_2; }

		//Workflow
		public RuleCall getWorkflowParserRuleCall_3() { return cWorkflowParserRuleCall_3; }
	}

	public class PackageDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPkgNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPkgNameQUALIFIED_NAMEParserRuleCall_1_0 = (RuleCall)cPkgNameAssignment_1.eContents().get(0);
		
		/// *
		// * The PackageDefinition contains the
		// * package name as fully qualified name.
		// * / PackageDefinition:
		//	"package" pkgName=QUALIFIED_NAME;
		@Override public ParserRule getRule() { return rule; }

		//"package" pkgName=QUALIFIED_NAME
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//pkgName=QUALIFIED_NAME
		public Assignment getPkgNameAssignment_1() { return cPkgNameAssignment_1; }

		//QUALIFIED_NAME
		public RuleCall getPkgNameQUALIFIED_NAMEParserRuleCall_1_0() { return cPkgNameQUALIFIED_NAMEParserRuleCall_1_0; }
	}

	public class ViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "View");
		private final Assignment cViewElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cViewElementsViewElementParserRuleCall_0 = (RuleCall)cViewElementsAssignment.eContents().get(0);
		
		///////////////////////////////////////
		///////////////////////////////////////
		//// View layer
		///////////////////////////////////////
		///////////////////////////////////////
		/// *
		// * The root View element contains all
		// * ViewElements of this view model.
		// * / View:
		//	viewElements+=ViewElement+;
		@Override public ParserRule getRule() { return rule; }

		//viewElements+=ViewElement+
		public Assignment getViewElementsAssignment() { return cViewElementsAssignment; }

		//ViewElement
		public RuleCall getViewElementsViewElementParserRuleCall_0() { return cViewElementsViewElementParserRuleCall_0; }
	}

	public class ViewElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ViewElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cViewElementTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStyleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * A ViewElement can be either a ViewElementType or a style.
		// * Styles can only be specified on view level or directly on ViewGUIElement elements,
		// * but not within containers. This is why ViewElement and ViewElementType are distinguished.
		// * / ViewElement:
		//	ViewElementType | Style;
		@Override public ParserRule getRule() { return rule; }

		//ViewElementType | Style
		public Alternatives getAlternatives() { return cAlternatives; }

		//ViewElementType
		public RuleCall getViewElementTypeParserRuleCall_0() { return cViewElementTypeParserRuleCall_0; }

		//Style
		public RuleCall getStyleParserRuleCall_1() { return cStyleParserRuleCall_1; }
	}

	public class ViewElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ViewElementType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cViewGUIElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cViewGUIElementReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * The ViewElementType allows to either specify a new ViewGUIElement or to refer to an existing one.
		// * All elements of this type are allowed to be used in containers.
		// * / ViewElementType:
		//	ViewGUIElement | ViewGUIElementReference;
		@Override public ParserRule getRule() { return rule; }

		//ViewGUIElement | ViewGUIElementReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//ViewGUIElement
		public RuleCall getViewGUIElementParserRuleCall_0() { return cViewGUIElementParserRuleCall_0; }

		//ViewGUIElementReference
		public RuleCall getViewGUIElementReferenceParserRuleCall_1() { return cViewGUIElementReferenceParserRuleCall_1; }
	}

	public class ViewGUIElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ViewGUIElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContainerElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cContentElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * A ViewGUIElement is a concrete definition (i.e., no cross-reference to another ViewGUIElement) of arbitrary view elements.
		// * It is the super type for ContainerElement and ContentElement. After the pre-processing all elements of type ViewElementType can
		// * be assumed to be ViewGUIElements.
		// * / ViewGUIElement:
		//	ContainerElement | ContentElement;
		@Override public ParserRule getRule() { return rule; }

		//ContainerElement | ContentElement
		public Alternatives getAlternatives() { return cAlternatives; }

		//ContainerElement
		public RuleCall getContainerElementParserRuleCall_0() { return cContainerElementParserRuleCall_0; }

		//ContentElement
		public RuleCall getContentElementParserRuleCall_1() { return cContentElementParserRuleCall_1; }
	}

	public class ContentElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContentElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInputElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAutoGeneratedContentElementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSpacerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cButtonParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLabelParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTooltipParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cUploadedImageOutputParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		///////////////////////////////////////
		//// View layer => Content elements
		///////////////////////////////////////
		/// *
		// * ContentElements are all those elements of a view that don´t contain any
		// * nested view elements. They are basically used to present data and
		// * information to the user or collect data from the user.
		// * / ContentElement:
		//	InputElement | Image | AutoGeneratedContentElement | Spacer | Button | Label | Tooltip | UploadedImageOutput;
		@Override public ParserRule getRule() { return rule; }

		//InputElement | Image | AutoGeneratedContentElement | Spacer | Button | Label | Tooltip | UploadedImageOutput
		public Alternatives getAlternatives() { return cAlternatives; }

		//InputElement
		public RuleCall getInputElementParserRuleCall_0() { return cInputElementParserRuleCall_0; }

		//Image
		public RuleCall getImageParserRuleCall_1() { return cImageParserRuleCall_1; }

		//AutoGeneratedContentElement
		public RuleCall getAutoGeneratedContentElementParserRuleCall_2() { return cAutoGeneratedContentElementParserRuleCall_2; }

		//Spacer
		public RuleCall getSpacerParserRuleCall_3() { return cSpacerParserRuleCall_3; }

		//Button
		public RuleCall getButtonParserRuleCall_4() { return cButtonParserRuleCall_4; }

		//Label
		public RuleCall getLabelParserRuleCall_5() { return cLabelParserRuleCall_5; }

		//Tooltip
		public RuleCall getTooltipParserRuleCall_6() { return cTooltipParserRuleCall_6; }

		//UploadedImageOutput
		public RuleCall getUploadedImageOutputParserRuleCall_7() { return cUploadedImageOutputParserRuleCall_7; }
	}

	public class InputElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanInputParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTextInputParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerInputParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNumberInputParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDateInputParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTimeInputParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDateTimeInputParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cOptionInputParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cEntitySelectorParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cFileUploadParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//InputElement:
		//	BooleanInput | TextInput | IntegerInput | NumberInput | DateInput | TimeInput | DateTimeInput | OptionInput |
		//	EntitySelector | FileUpload;
		@Override public ParserRule getRule() { return rule; }

		//BooleanInput | TextInput | IntegerInput | NumberInput | DateInput | TimeInput | DateTimeInput | OptionInput |
		//EntitySelector | FileUpload
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanInput
		public RuleCall getBooleanInputParserRuleCall_0() { return cBooleanInputParserRuleCall_0; }

		//TextInput
		public RuleCall getTextInputParserRuleCall_1() { return cTextInputParserRuleCall_1; }

		//IntegerInput
		public RuleCall getIntegerInputParserRuleCall_2() { return cIntegerInputParserRuleCall_2; }

		//NumberInput
		public RuleCall getNumberInputParserRuleCall_3() { return cNumberInputParserRuleCall_3; }

		//DateInput
		public RuleCall getDateInputParserRuleCall_4() { return cDateInputParserRuleCall_4; }

		//TimeInput
		public RuleCall getTimeInputParserRuleCall_5() { return cTimeInputParserRuleCall_5; }

		//DateTimeInput
		public RuleCall getDateTimeInputParserRuleCall_6() { return cDateTimeInputParserRuleCall_6; }

		//OptionInput
		public RuleCall getOptionInputParserRuleCall_7() { return cOptionInputParserRuleCall_7; }

		//EntitySelector
		public RuleCall getEntitySelectorParserRuleCall_8() { return cEntitySelectorParserRuleCall_8; }

		//FileUpload
		public RuleCall getFileUploadParserRuleCall_9() { return cFileUploadParserRuleCall_9; }
	}

	public class MappableContentElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappableContentElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInputElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTooltipParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/// * 
		// * MappableContentElement is a common super type of all GUI elements that
		// * can be mapped to contentProviders (multi-inheritance).
		// * E.g. useful for validation and auto-completion suggestions.
		// * / MappableContentElement:
		//	InputElement | Label | Tooltip;
		@Override public ParserRule getRule() { return rule; }

		//InputElement | Label | Tooltip
		public Alternatives getAlternatives() { return cAlternatives; }

		//InputElement
		public RuleCall getInputElementParserRuleCall_0() { return cInputElementParserRuleCall_0; }

		//Label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }

		//Tooltip
		public RuleCall getTooltipParserRuleCall_2() { return cTooltipParserRuleCall_2; }
	}

	public class TextInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_1 = (UnorderedGroup)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cUnorderedGroup_2_1.eContents().get(0);
		private final Keyword cLabelKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Assignment cLabelTextAssignment_2_1_0_1 = (Assignment)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cLabelTextSTRINGTerminalRuleCall_2_1_0_1_0 = (RuleCall)cLabelTextAssignment_2_1_0_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cUnorderedGroup_2_1.eContents().get(1);
		private final Keyword cTooltipKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cTooltipTextAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0 = (RuleCall)cTooltipTextAssignment_2_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cUnorderedGroup_2_1.eContents().get(2);
		private final Keyword cTypeKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cTypeTextInputTypeEnumRuleCall_2_1_2_1_0 = (RuleCall)cTypeAssignment_2_1_2_1.eContents().get(0);
		private final Group cGroup_2_1_3 = (Group)cUnorderedGroup_2_1.eContents().get(3);
		private final Keyword cDisabledKeyword_2_1_3_0 = (Keyword)cGroup_2_1_3.eContents().get(0);
		private final Alternatives cAlternatives_2_1_3_1 = (Alternatives)cGroup_2_1_3.eContents().get(1);
		private final Assignment cIsDisabledAssignment_2_1_3_1_0 = (Assignment)cAlternatives_2_1_3_1.eContents().get(0);
		private final Keyword cIsDisabledTrueKeyword_2_1_3_1_0_0 = (Keyword)cIsDisabledAssignment_2_1_3_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_2_1_3_1_1 = (Keyword)cAlternatives_2_1_3_1.eContents().get(1);
		private final Group cGroup_2_1_4 = (Group)cUnorderedGroup_2_1.eContents().get(4);
		private final Keyword cDefaultKeyword_2_1_4_0 = (Keyword)cGroup_2_1_4.eContents().get(0);
		private final Assignment cDefaultValueAssignment_2_1_4_1 = (Assignment)cGroup_2_1_4.eContents().get(1);
		private final RuleCall cDefaultValueSTRINGTerminalRuleCall_2_1_4_1_0 = (RuleCall)cDefaultValueAssignment_2_1_4_1.eContents().get(0);
		private final Group cGroup_2_1_5 = (Group)cUnorderedGroup_2_1.eContents().get(5);
		private final Keyword cWidthKeyword_2_1_5_0 = (Keyword)cGroup_2_1_5.eContents().get(0);
		private final Assignment cWidthAssignment_2_1_5_1 = (Assignment)cGroup_2_1_5.eContents().get(1);
		private final RuleCall cWidthPERCENTParserRuleCall_2_1_5_1_0 = (RuleCall)cWidthAssignment_2_1_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		/// *
		// * TextInputs are basically used to provide the user the possibility to insert data.
		// * 
		// * Using the 'type' attribute the type of the input field can be be specified
		// * currently supported => input, textarea and password; if no type is set, DEFAULT is used implicitly.
		// * The default is assumed to be 'input' on all platforms.
		// * 
		// * TODO add further options to support different input keyboards for e.g. telephone numbers, emails etc.
		// * / TextInput:
		//	"TextInput" name=EID ("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type"
		//	type=TextInputType)? & ("disabled" (isDisabled?="true" | "false"))? & ("default" defaultValue=STRING)? & ("width"
		//	width=PERCENT)?) "}")?;
		@Override public ParserRule getRule() { return rule; }

		//"TextInput" name=EID ("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type" type=TextInputType)?
		//& ("disabled" (isDisabled?="true" | "false"))? & ("default" defaultValue=STRING)? & ("width" width=PERCENT)?) "}")?
		public Group getGroup() { return cGroup; }

		//"TextInput"
		public Keyword getTextInputKeyword_0() { return cTextInputKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type" type=TextInputType)? & ("disabled"
		//(isDisabled?="true" | "false"))? & ("default" defaultValue=STRING)? & ("width" width=PERCENT)?) "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type" type=TextInputType)? & ("disabled"
		//(isDisabled?="true" | "false"))? & ("default" defaultValue=STRING)? & ("width" width=PERCENT)?
		public UnorderedGroup getUnorderedGroup_2_1() { return cUnorderedGroup_2_1; }

		//("label" labelText=STRING)?
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//"label"
		public Keyword getLabelKeyword_2_1_0_0() { return cLabelKeyword_2_1_0_0; }

		//labelText=STRING
		public Assignment getLabelTextAssignment_2_1_0_1() { return cLabelTextAssignment_2_1_0_1; }

		//STRING
		public RuleCall getLabelTextSTRINGTerminalRuleCall_2_1_0_1_0() { return cLabelTextSTRINGTerminalRuleCall_2_1_0_1_0; }

		//("tooltip" tooltipText=STRING)?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//"tooltip"
		public Keyword getTooltipKeyword_2_1_1_0() { return cTooltipKeyword_2_1_1_0; }

		//tooltipText=STRING
		public Assignment getTooltipTextAssignment_2_1_1_1() { return cTooltipTextAssignment_2_1_1_1; }

		//STRING
		public RuleCall getTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0() { return cTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0; }

		//("type" type=TextInputType)?
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//"type"
		public Keyword getTypeKeyword_2_1_2_0() { return cTypeKeyword_2_1_2_0; }

		//type=TextInputType
		public Assignment getTypeAssignment_2_1_2_1() { return cTypeAssignment_2_1_2_1; }

		//TextInputType
		public RuleCall getTypeTextInputTypeEnumRuleCall_2_1_2_1_0() { return cTypeTextInputTypeEnumRuleCall_2_1_2_1_0; }

		//("disabled" (isDisabled?="true" | "false"))?
		public Group getGroup_2_1_3() { return cGroup_2_1_3; }

		//"disabled"
		public Keyword getDisabledKeyword_2_1_3_0() { return cDisabledKeyword_2_1_3_0; }

		//isDisabled?="true" | "false"
		public Alternatives getAlternatives_2_1_3_1() { return cAlternatives_2_1_3_1; }

		//isDisabled?="true"
		public Assignment getIsDisabledAssignment_2_1_3_1_0() { return cIsDisabledAssignment_2_1_3_1_0; }

		//"true"
		public Keyword getIsDisabledTrueKeyword_2_1_3_1_0_0() { return cIsDisabledTrueKeyword_2_1_3_1_0_0; }

		//"false"
		public Keyword getFalseKeyword_2_1_3_1_1() { return cFalseKeyword_2_1_3_1_1; }

		//("default" defaultValue=STRING)?
		public Group getGroup_2_1_4() { return cGroup_2_1_4; }

		//"default"
		public Keyword getDefaultKeyword_2_1_4_0() { return cDefaultKeyword_2_1_4_0; }

		//defaultValue=STRING
		public Assignment getDefaultValueAssignment_2_1_4_1() { return cDefaultValueAssignment_2_1_4_1; }

		//STRING
		public RuleCall getDefaultValueSTRINGTerminalRuleCall_2_1_4_1_0() { return cDefaultValueSTRINGTerminalRuleCall_2_1_4_1_0; }

		//("width" width=PERCENT)?
		public Group getGroup_2_1_5() { return cGroup_2_1_5; }

		//"width"
		public Keyword getWidthKeyword_2_1_5_0() { return cWidthKeyword_2_1_5_0; }

		//width=PERCENT
		public Assignment getWidthAssignment_2_1_5_1() { return cWidthAssignment_2_1_5_1; }

		//PERCENT
		public RuleCall getWidthPERCENTParserRuleCall_2_1_5_1_0() { return cWidthPERCENTParserRuleCall_2_1_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class BooleanInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBooleanInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_1 = (UnorderedGroup)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cUnorderedGroup_2_1.eContents().get(0);
		private final Keyword cLabelKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Assignment cLabelTextAssignment_2_1_0_1 = (Assignment)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cLabelTextSTRINGTerminalRuleCall_2_1_0_1_0 = (RuleCall)cLabelTextAssignment_2_1_0_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cUnorderedGroup_2_1.eContents().get(1);
		private final Keyword cTooltipKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cTooltipTextAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0 = (RuleCall)cTooltipTextAssignment_2_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cUnorderedGroup_2_1.eContents().get(2);
		private final Keyword cTypeKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cTypeBooleanInputTypeEnumRuleCall_2_1_2_1_0 = (RuleCall)cTypeAssignment_2_1_2_1.eContents().get(0);
		private final Group cGroup_2_1_3 = (Group)cUnorderedGroup_2_1.eContents().get(3);
		private final Keyword cDisabledKeyword_2_1_3_0 = (Keyword)cGroup_2_1_3.eContents().get(0);
		private final Alternatives cAlternatives_2_1_3_1 = (Alternatives)cGroup_2_1_3.eContents().get(1);
		private final Assignment cIsDisabledAssignment_2_1_3_1_0 = (Assignment)cAlternatives_2_1_3_1.eContents().get(0);
		private final Keyword cIsDisabledTrueKeyword_2_1_3_1_0_0 = (Keyword)cIsDisabledAssignment_2_1_3_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_2_1_3_1_1 = (Keyword)cAlternatives_2_1_3_1.eContents().get(1);
		private final Group cGroup_2_1_4 = (Group)cUnorderedGroup_2_1.eContents().get(4);
		private final Keyword cDefaultKeyword_2_1_4_0 = (Keyword)cGroup_2_1_4.eContents().get(0);
		private final Assignment cDefaultValueAssignment_2_1_4_1 = (Assignment)cGroup_2_1_4.eContents().get(1);
		private final Alternatives cDefaultValueAlternatives_2_1_4_1_0 = (Alternatives)cDefaultValueAssignment_2_1_4_1.eContents().get(0);
		private final Keyword cDefaultValueTrueKeyword_2_1_4_1_0_0 = (Keyword)cDefaultValueAlternatives_2_1_4_1_0.eContents().get(0);
		private final Keyword cDefaultValueFalseKeyword_2_1_4_1_0_1 = (Keyword)cDefaultValueAlternatives_2_1_4_1_0.eContents().get(1);
		private final Group cGroup_2_1_5 = (Group)cUnorderedGroup_2_1.eContents().get(5);
		private final Keyword cWidthKeyword_2_1_5_0 = (Keyword)cGroup_2_1_5.eContents().get(0);
		private final Assignment cWidthAssignment_2_1_5_1 = (Assignment)cGroup_2_1_5.eContents().get(1);
		private final RuleCall cWidthPERCENTParserRuleCall_2_1_5_1_0 = (RuleCall)cWidthAssignment_2_1_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		/// *
		// * BooleanInputs allow the user to set boolean values.
		// * Depending on the platform a boolean input can be a checkbox,
		// * a switch etc.
		// * / BooleanInput:
		//	"BooleanInput" name=EID ("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type"
		//	type=BooleanInputType)? & ("disabled" (isDisabled?="true" | "false"))? & ("default" defaultValue=("true" | "false"))?
		//	& ("width" width=PERCENT)?) "}")?;
		@Override public ParserRule getRule() { return rule; }

		//"BooleanInput" name=EID ("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type"
		//type=BooleanInputType)? & ("disabled" (isDisabled?="true" | "false"))? & ("default" defaultValue=("true" | "false"))?
		//& ("width" width=PERCENT)?) "}")?
		public Group getGroup() { return cGroup; }

		//"BooleanInput"
		public Keyword getBooleanInputKeyword_0() { return cBooleanInputKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type" type=BooleanInputType)? & ("disabled"
		//(isDisabled?="true" | "false"))? & ("default" defaultValue=("true" | "false"))? & ("width" width=PERCENT)?) "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type" type=BooleanInputType)? & ("disabled"
		//(isDisabled?="true" | "false"))? & ("default" defaultValue=("true" | "false"))? & ("width" width=PERCENT)?
		public UnorderedGroup getUnorderedGroup_2_1() { return cUnorderedGroup_2_1; }

		//("label" labelText=STRING)?
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//"label"
		public Keyword getLabelKeyword_2_1_0_0() { return cLabelKeyword_2_1_0_0; }

		//labelText=STRING
		public Assignment getLabelTextAssignment_2_1_0_1() { return cLabelTextAssignment_2_1_0_1; }

		//STRING
		public RuleCall getLabelTextSTRINGTerminalRuleCall_2_1_0_1_0() { return cLabelTextSTRINGTerminalRuleCall_2_1_0_1_0; }

		//("tooltip" tooltipText=STRING)?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//"tooltip"
		public Keyword getTooltipKeyword_2_1_1_0() { return cTooltipKeyword_2_1_1_0; }

		//tooltipText=STRING
		public Assignment getTooltipTextAssignment_2_1_1_1() { return cTooltipTextAssignment_2_1_1_1; }

		//STRING
		public RuleCall getTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0() { return cTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0; }

		//("type" type=BooleanInputType)?
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//"type"
		public Keyword getTypeKeyword_2_1_2_0() { return cTypeKeyword_2_1_2_0; }

		//type=BooleanInputType
		public Assignment getTypeAssignment_2_1_2_1() { return cTypeAssignment_2_1_2_1; }

		//BooleanInputType
		public RuleCall getTypeBooleanInputTypeEnumRuleCall_2_1_2_1_0() { return cTypeBooleanInputTypeEnumRuleCall_2_1_2_1_0; }

		//("disabled" (isDisabled?="true" | "false"))?
		public Group getGroup_2_1_3() { return cGroup_2_1_3; }

		//"disabled"
		public Keyword getDisabledKeyword_2_1_3_0() { return cDisabledKeyword_2_1_3_0; }

		//isDisabled?="true" | "false"
		public Alternatives getAlternatives_2_1_3_1() { return cAlternatives_2_1_3_1; }

		//isDisabled?="true"
		public Assignment getIsDisabledAssignment_2_1_3_1_0() { return cIsDisabledAssignment_2_1_3_1_0; }

		//"true"
		public Keyword getIsDisabledTrueKeyword_2_1_3_1_0_0() { return cIsDisabledTrueKeyword_2_1_3_1_0_0; }

		//"false"
		public Keyword getFalseKeyword_2_1_3_1_1() { return cFalseKeyword_2_1_3_1_1; }

		//("default" defaultValue=("true" | "false"))?
		public Group getGroup_2_1_4() { return cGroup_2_1_4; }

		//"default"
		public Keyword getDefaultKeyword_2_1_4_0() { return cDefaultKeyword_2_1_4_0; }

		//defaultValue=("true" | "false")
		public Assignment getDefaultValueAssignment_2_1_4_1() { return cDefaultValueAssignment_2_1_4_1; }

		//"true" | "false"
		public Alternatives getDefaultValueAlternatives_2_1_4_1_0() { return cDefaultValueAlternatives_2_1_4_1_0; }

		//"true"
		public Keyword getDefaultValueTrueKeyword_2_1_4_1_0_0() { return cDefaultValueTrueKeyword_2_1_4_1_0_0; }

		//"false"
		public Keyword getDefaultValueFalseKeyword_2_1_4_1_0_1() { return cDefaultValueFalseKeyword_2_1_4_1_0_1; }

		//("width" width=PERCENT)?
		public Group getGroup_2_1_5() { return cGroup_2_1_5; }

		//"width"
		public Keyword getWidthKeyword_2_1_5_0() { return cWidthKeyword_2_1_5_0; }

		//width=PERCENT
		public Assignment getWidthAssignment_2_1_5_1() { return cWidthAssignment_2_1_5_1; }

		//PERCENT
		public RuleCall getWidthPERCENTParserRuleCall_2_1_5_1_0() { return cWidthPERCENTParserRuleCall_2_1_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class IntegerInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntegerInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_1 = (UnorderedGroup)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cUnorderedGroup_2_1.eContents().get(0);
		private final Keyword cLabelKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Assignment cLabelTextAssignment_2_1_0_1 = (Assignment)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cLabelTextSTRINGTerminalRuleCall_2_1_0_1_0 = (RuleCall)cLabelTextAssignment_2_1_0_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cUnorderedGroup_2_1.eContents().get(1);
		private final Keyword cTooltipKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cTooltipTextAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0 = (RuleCall)cTooltipTextAssignment_2_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cUnorderedGroup_2_1.eContents().get(2);
		private final Keyword cTypeKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cTypeIntegerInputTypeEnumRuleCall_2_1_2_1_0 = (RuleCall)cTypeAssignment_2_1_2_1.eContents().get(0);
		private final Group cGroup_2_1_3 = (Group)cUnorderedGroup_2_1.eContents().get(3);
		private final Keyword cDisabledKeyword_2_1_3_0 = (Keyword)cGroup_2_1_3.eContents().get(0);
		private final Alternatives cAlternatives_2_1_3_1 = (Alternatives)cGroup_2_1_3.eContents().get(1);
		private final Assignment cIsDisabledAssignment_2_1_3_1_0 = (Assignment)cAlternatives_2_1_3_1.eContents().get(0);
		private final Keyword cIsDisabledTrueKeyword_2_1_3_1_0_0 = (Keyword)cIsDisabledAssignment_2_1_3_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_2_1_3_1_1 = (Keyword)cAlternatives_2_1_3_1.eContents().get(1);
		private final Group cGroup_2_1_4 = (Group)cUnorderedGroup_2_1.eContents().get(4);
		private final Keyword cDefaultKeyword_2_1_4_0 = (Keyword)cGroup_2_1_4.eContents().get(0);
		private final Assignment cDefaultValueAssignment_2_1_4_1 = (Assignment)cGroup_2_1_4.eContents().get(1);
		private final RuleCall cDefaultValueINTTerminalRuleCall_2_1_4_1_0 = (RuleCall)cDefaultValueAssignment_2_1_4_1.eContents().get(0);
		private final Group cGroup_2_1_5 = (Group)cUnorderedGroup_2_1.eContents().get(5);
		private final Keyword cWidthKeyword_2_1_5_0 = (Keyword)cGroup_2_1_5.eContents().get(0);
		private final Assignment cWidthAssignment_2_1_5_1 = (Assignment)cGroup_2_1_5.eContents().get(1);
		private final RuleCall cWidthPERCENTParserRuleCall_2_1_5_1_0 = (RuleCall)cWidthAssignment_2_1_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		/// *
		// * Integer input field. Depending on the platform this might be a simple validated
		// * text input, a number spinner etc.
		// * / IntegerInput:
		//	"IntegerInput" name=EID ("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type"
		//	type=IntegerInputType)? & ("disabled" (isDisabled?="true" | "false"))? & ("default" defaultValue=INT)? & ("width"
		//	width=PERCENT)?) "}")?;
		@Override public ParserRule getRule() { return rule; }

		//"IntegerInput" name=EID ("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type"
		//type=IntegerInputType)? & ("disabled" (isDisabled?="true" | "false"))? & ("default" defaultValue=INT)? & ("width"
		//width=PERCENT)?) "}")?
		public Group getGroup() { return cGroup; }

		//"IntegerInput"
		public Keyword getIntegerInputKeyword_0() { return cIntegerInputKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type" type=IntegerInputType)? & ("disabled"
		//(isDisabled?="true" | "false"))? & ("default" defaultValue=INT)? & ("width" width=PERCENT)?) "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type" type=IntegerInputType)? & ("disabled"
		//(isDisabled?="true" | "false"))? & ("default" defaultValue=INT)? & ("width" width=PERCENT)?
		public UnorderedGroup getUnorderedGroup_2_1() { return cUnorderedGroup_2_1; }

		//("label" labelText=STRING)?
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//"label"
		public Keyword getLabelKeyword_2_1_0_0() { return cLabelKeyword_2_1_0_0; }

		//labelText=STRING
		public Assignment getLabelTextAssignment_2_1_0_1() { return cLabelTextAssignment_2_1_0_1; }

		//STRING
		public RuleCall getLabelTextSTRINGTerminalRuleCall_2_1_0_1_0() { return cLabelTextSTRINGTerminalRuleCall_2_1_0_1_0; }

		//("tooltip" tooltipText=STRING)?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//"tooltip"
		public Keyword getTooltipKeyword_2_1_1_0() { return cTooltipKeyword_2_1_1_0; }

		//tooltipText=STRING
		public Assignment getTooltipTextAssignment_2_1_1_1() { return cTooltipTextAssignment_2_1_1_1; }

		//STRING
		public RuleCall getTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0() { return cTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0; }

		//("type" type=IntegerInputType)?
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//"type"
		public Keyword getTypeKeyword_2_1_2_0() { return cTypeKeyword_2_1_2_0; }

		//type=IntegerInputType
		public Assignment getTypeAssignment_2_1_2_1() { return cTypeAssignment_2_1_2_1; }

		//IntegerInputType
		public RuleCall getTypeIntegerInputTypeEnumRuleCall_2_1_2_1_0() { return cTypeIntegerInputTypeEnumRuleCall_2_1_2_1_0; }

		//("disabled" (isDisabled?="true" | "false"))?
		public Group getGroup_2_1_3() { return cGroup_2_1_3; }

		//"disabled"
		public Keyword getDisabledKeyword_2_1_3_0() { return cDisabledKeyword_2_1_3_0; }

		//isDisabled?="true" | "false"
		public Alternatives getAlternatives_2_1_3_1() { return cAlternatives_2_1_3_1; }

		//isDisabled?="true"
		public Assignment getIsDisabledAssignment_2_1_3_1_0() { return cIsDisabledAssignment_2_1_3_1_0; }

		//"true"
		public Keyword getIsDisabledTrueKeyword_2_1_3_1_0_0() { return cIsDisabledTrueKeyword_2_1_3_1_0_0; }

		//"false"
		public Keyword getFalseKeyword_2_1_3_1_1() { return cFalseKeyword_2_1_3_1_1; }

		//("default" defaultValue=INT)?
		public Group getGroup_2_1_4() { return cGroup_2_1_4; }

		//"default"
		public Keyword getDefaultKeyword_2_1_4_0() { return cDefaultKeyword_2_1_4_0; }

		//defaultValue=INT
		public Assignment getDefaultValueAssignment_2_1_4_1() { return cDefaultValueAssignment_2_1_4_1; }

		//INT
		public RuleCall getDefaultValueINTTerminalRuleCall_2_1_4_1_0() { return cDefaultValueINTTerminalRuleCall_2_1_4_1_0; }

		//("width" width=PERCENT)?
		public Group getGroup_2_1_5() { return cGroup_2_1_5; }

		//"width"
		public Keyword getWidthKeyword_2_1_5_0() { return cWidthKeyword_2_1_5_0; }

		//width=PERCENT
		public Assignment getWidthAssignment_2_1_5_1() { return cWidthAssignment_2_1_5_1; }

		//PERCENT
		public RuleCall getWidthPERCENTParserRuleCall_2_1_5_1_0() { return cWidthPERCENTParserRuleCall_2_1_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class NumberInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_1 = (UnorderedGroup)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cUnorderedGroup_2_1.eContents().get(0);
		private final Keyword cLabelKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Assignment cLabelTextAssignment_2_1_0_1 = (Assignment)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cLabelTextSTRINGTerminalRuleCall_2_1_0_1_0 = (RuleCall)cLabelTextAssignment_2_1_0_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cUnorderedGroup_2_1.eContents().get(1);
		private final Keyword cTooltipKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cTooltipTextAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0 = (RuleCall)cTooltipTextAssignment_2_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cUnorderedGroup_2_1.eContents().get(2);
		private final Keyword cTypeKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cTypeNumberInputTypeEnumRuleCall_2_1_2_1_0 = (RuleCall)cTypeAssignment_2_1_2_1.eContents().get(0);
		private final Group cGroup_2_1_3 = (Group)cUnorderedGroup_2_1.eContents().get(3);
		private final Keyword cDisabledKeyword_2_1_3_0 = (Keyword)cGroup_2_1_3.eContents().get(0);
		private final Alternatives cAlternatives_2_1_3_1 = (Alternatives)cGroup_2_1_3.eContents().get(1);
		private final Assignment cIsDisabledAssignment_2_1_3_1_0 = (Assignment)cAlternatives_2_1_3_1.eContents().get(0);
		private final Keyword cIsDisabledTrueKeyword_2_1_3_1_0_0 = (Keyword)cIsDisabledAssignment_2_1_3_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_2_1_3_1_1 = (Keyword)cAlternatives_2_1_3_1.eContents().get(1);
		private final Group cGroup_2_1_4 = (Group)cUnorderedGroup_2_1.eContents().get(4);
		private final Assignment cPlacesSetAssignment_2_1_4_0 = (Assignment)cGroup_2_1_4.eContents().get(0);
		private final Keyword cPlacesSetPlacesKeyword_2_1_4_0_0 = (Keyword)cPlacesSetAssignment_2_1_4_0.eContents().get(0);
		private final Assignment cPlacesAssignment_2_1_4_1 = (Assignment)cGroup_2_1_4.eContents().get(1);
		private final RuleCall cPlacesINTTerminalRuleCall_2_1_4_1_0 = (RuleCall)cPlacesAssignment_2_1_4_1.eContents().get(0);
		private final Group cGroup_2_1_5 = (Group)cUnorderedGroup_2_1.eContents().get(5);
		private final Keyword cDefaultKeyword_2_1_5_0 = (Keyword)cGroup_2_1_5.eContents().get(0);
		private final Assignment cDefaultValueAssignment_2_1_5_1 = (Assignment)cGroup_2_1_5.eContents().get(1);
		private final RuleCall cDefaultValueFLOATParserRuleCall_2_1_5_1_0 = (RuleCall)cDefaultValueAssignment_2_1_5_1.eContents().get(0);
		private final Group cGroup_2_1_6 = (Group)cUnorderedGroup_2_1.eContents().get(6);
		private final Keyword cWidthKeyword_2_1_6_0 = (Keyword)cGroup_2_1_6.eContents().get(0);
		private final Assignment cWidthAssignment_2_1_6_1 = (Assignment)cGroup_2_1_6.eContents().get(1);
		private final RuleCall cWidthPERCENTParserRuleCall_2_1_6_1_0 = (RuleCall)cWidthAssignment_2_1_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		/// *
		// * Float input field. Depending on the platform this might be a simple validated
		// * text input or any other specially formatted field.
		// * / NumberInput:
		//	"NumberInput" name=EID ("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type"
		//	type=NumberInputType)? & ("disabled" (isDisabled?="true" | "false"))? & (placesSet?="places" places=INT)? &
		//	("default" defaultValue=FLOAT)? & ("width" width=PERCENT)?) "}")?;
		@Override public ParserRule getRule() { return rule; }

		//"NumberInput" name=EID ("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type"
		//type=NumberInputType)? & ("disabled" (isDisabled?="true" | "false"))? & (placesSet?="places" places=INT)? & ("default"
		//defaultValue=FLOAT)? & ("width" width=PERCENT)?) "}")?
		public Group getGroup() { return cGroup; }

		//"NumberInput"
		public Keyword getNumberInputKeyword_0() { return cNumberInputKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type" type=NumberInputType)? & ("disabled"
		//(isDisabled?="true" | "false"))? & (placesSet?="places" places=INT)? & ("default" defaultValue=FLOAT)? & ("width"
		//width=PERCENT)?) "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type" type=NumberInputType)? & ("disabled"
		//(isDisabled?="true" | "false"))? & (placesSet?="places" places=INT)? & ("default" defaultValue=FLOAT)? & ("width"
		//width=PERCENT)?
		public UnorderedGroup getUnorderedGroup_2_1() { return cUnorderedGroup_2_1; }

		//("label" labelText=STRING)?
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//"label"
		public Keyword getLabelKeyword_2_1_0_0() { return cLabelKeyword_2_1_0_0; }

		//labelText=STRING
		public Assignment getLabelTextAssignment_2_1_0_1() { return cLabelTextAssignment_2_1_0_1; }

		//STRING
		public RuleCall getLabelTextSTRINGTerminalRuleCall_2_1_0_1_0() { return cLabelTextSTRINGTerminalRuleCall_2_1_0_1_0; }

		//("tooltip" tooltipText=STRING)?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//"tooltip"
		public Keyword getTooltipKeyword_2_1_1_0() { return cTooltipKeyword_2_1_1_0; }

		//tooltipText=STRING
		public Assignment getTooltipTextAssignment_2_1_1_1() { return cTooltipTextAssignment_2_1_1_1; }

		//STRING
		public RuleCall getTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0() { return cTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0; }

		//("type" type=NumberInputType)?
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//"type"
		public Keyword getTypeKeyword_2_1_2_0() { return cTypeKeyword_2_1_2_0; }

		//type=NumberInputType
		public Assignment getTypeAssignment_2_1_2_1() { return cTypeAssignment_2_1_2_1; }

		//NumberInputType
		public RuleCall getTypeNumberInputTypeEnumRuleCall_2_1_2_1_0() { return cTypeNumberInputTypeEnumRuleCall_2_1_2_1_0; }

		//("disabled" (isDisabled?="true" | "false"))?
		public Group getGroup_2_1_3() { return cGroup_2_1_3; }

		//"disabled"
		public Keyword getDisabledKeyword_2_1_3_0() { return cDisabledKeyword_2_1_3_0; }

		//isDisabled?="true" | "false"
		public Alternatives getAlternatives_2_1_3_1() { return cAlternatives_2_1_3_1; }

		//isDisabled?="true"
		public Assignment getIsDisabledAssignment_2_1_3_1_0() { return cIsDisabledAssignment_2_1_3_1_0; }

		//"true"
		public Keyword getIsDisabledTrueKeyword_2_1_3_1_0_0() { return cIsDisabledTrueKeyword_2_1_3_1_0_0; }

		//"false"
		public Keyword getFalseKeyword_2_1_3_1_1() { return cFalseKeyword_2_1_3_1_1; }

		//(placesSet?="places" places=INT)?
		public Group getGroup_2_1_4() { return cGroup_2_1_4; }

		//placesSet?="places"
		public Assignment getPlacesSetAssignment_2_1_4_0() { return cPlacesSetAssignment_2_1_4_0; }

		//"places"
		public Keyword getPlacesSetPlacesKeyword_2_1_4_0_0() { return cPlacesSetPlacesKeyword_2_1_4_0_0; }

		//places=INT
		public Assignment getPlacesAssignment_2_1_4_1() { return cPlacesAssignment_2_1_4_1; }

		//INT
		public RuleCall getPlacesINTTerminalRuleCall_2_1_4_1_0() { return cPlacesINTTerminalRuleCall_2_1_4_1_0; }

		//("default" defaultValue=FLOAT)?
		public Group getGroup_2_1_5() { return cGroup_2_1_5; }

		//"default"
		public Keyword getDefaultKeyword_2_1_5_0() { return cDefaultKeyword_2_1_5_0; }

		//defaultValue=FLOAT
		public Assignment getDefaultValueAssignment_2_1_5_1() { return cDefaultValueAssignment_2_1_5_1; }

		//FLOAT
		public RuleCall getDefaultValueFLOATParserRuleCall_2_1_5_1_0() { return cDefaultValueFLOATParserRuleCall_2_1_5_1_0; }

		//("width" width=PERCENT)?
		public Group getGroup_2_1_6() { return cGroup_2_1_6; }

		//"width"
		public Keyword getWidthKeyword_2_1_6_0() { return cWidthKeyword_2_1_6_0; }

		//width=PERCENT
		public Assignment getWidthAssignment_2_1_6_1() { return cWidthAssignment_2_1_6_1; }

		//PERCENT
		public RuleCall getWidthPERCENTParserRuleCall_2_1_6_1_0() { return cWidthPERCENTParserRuleCall_2_1_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class DateInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDateInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_1 = (UnorderedGroup)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cUnorderedGroup_2_1.eContents().get(0);
		private final Keyword cLabelKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Assignment cLabelTextAssignment_2_1_0_1 = (Assignment)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cLabelTextSTRINGTerminalRuleCall_2_1_0_1_0 = (RuleCall)cLabelTextAssignment_2_1_0_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cUnorderedGroup_2_1.eContents().get(1);
		private final Keyword cTooltipKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cTooltipTextAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0 = (RuleCall)cTooltipTextAssignment_2_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cUnorderedGroup_2_1.eContents().get(2);
		private final Keyword cTypeKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cTypeDateInputTypeEnumRuleCall_2_1_2_1_0 = (RuleCall)cTypeAssignment_2_1_2_1.eContents().get(0);
		private final Group cGroup_2_1_3 = (Group)cUnorderedGroup_2_1.eContents().get(3);
		private final Keyword cDisabledKeyword_2_1_3_0 = (Keyword)cGroup_2_1_3.eContents().get(0);
		private final Alternatives cAlternatives_2_1_3_1 = (Alternatives)cGroup_2_1_3.eContents().get(1);
		private final Assignment cIsDisabledAssignment_2_1_3_1_0 = (Assignment)cAlternatives_2_1_3_1.eContents().get(0);
		private final Keyword cIsDisabledTrueKeyword_2_1_3_1_0_0 = (Keyword)cIsDisabledAssignment_2_1_3_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_2_1_3_1_1 = (Keyword)cAlternatives_2_1_3_1.eContents().get(1);
		private final Group cGroup_2_1_4 = (Group)cUnorderedGroup_2_1.eContents().get(4);
		private final Keyword cDefaultKeyword_2_1_4_0 = (Keyword)cGroup_2_1_4.eContents().get(0);
		private final Assignment cDefaultValueAssignment_2_1_4_1 = (Assignment)cGroup_2_1_4.eContents().get(1);
		private final RuleCall cDefaultValueDATEParserRuleCall_2_1_4_1_0 = (RuleCall)cDefaultValueAssignment_2_1_4_1.eContents().get(0);
		private final Group cGroup_2_1_5 = (Group)cUnorderedGroup_2_1.eContents().get(5);
		private final Keyword cWidthKeyword_2_1_5_0 = (Keyword)cGroup_2_1_5.eContents().get(0);
		private final Assignment cWidthAssignment_2_1_5_1 = (Assignment)cGroup_2_1_5.eContents().get(1);
		private final RuleCall cWidthPERCENTParserRuleCall_2_1_5_1_0 = (RuleCall)cWidthAssignment_2_1_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		/// *
		// * DateInputs allow the user to enter dates.
		// * The representation of the actual widget depends on the target platform.
		// * / DateInput:
		//	"DateInput" name=EID ("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type"
		//	type=DateInputType)? & ("disabled" (isDisabled?="true" | "false"))? & ("default" defaultValue=DATE)? & ("width"
		//	width=PERCENT)?) "}")?;
		@Override public ParserRule getRule() { return rule; }

		//"DateInput" name=EID ("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type" type=DateInputType)?
		//& ("disabled" (isDisabled?="true" | "false"))? & ("default" defaultValue=DATE)? & ("width" width=PERCENT)?) "}")?
		public Group getGroup() { return cGroup; }

		//"DateInput"
		public Keyword getDateInputKeyword_0() { return cDateInputKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type" type=DateInputType)? & ("disabled"
		//(isDisabled?="true" | "false"))? & ("default" defaultValue=DATE)? & ("width" width=PERCENT)?) "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type" type=DateInputType)? & ("disabled"
		//(isDisabled?="true" | "false"))? & ("default" defaultValue=DATE)? & ("width" width=PERCENT)?
		public UnorderedGroup getUnorderedGroup_2_1() { return cUnorderedGroup_2_1; }

		//("label" labelText=STRING)?
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//"label"
		public Keyword getLabelKeyword_2_1_0_0() { return cLabelKeyword_2_1_0_0; }

		//labelText=STRING
		public Assignment getLabelTextAssignment_2_1_0_1() { return cLabelTextAssignment_2_1_0_1; }

		//STRING
		public RuleCall getLabelTextSTRINGTerminalRuleCall_2_1_0_1_0() { return cLabelTextSTRINGTerminalRuleCall_2_1_0_1_0; }

		//("tooltip" tooltipText=STRING)?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//"tooltip"
		public Keyword getTooltipKeyword_2_1_1_0() { return cTooltipKeyword_2_1_1_0; }

		//tooltipText=STRING
		public Assignment getTooltipTextAssignment_2_1_1_1() { return cTooltipTextAssignment_2_1_1_1; }

		//STRING
		public RuleCall getTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0() { return cTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0; }

		//("type" type=DateInputType)?
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//"type"
		public Keyword getTypeKeyword_2_1_2_0() { return cTypeKeyword_2_1_2_0; }

		//type=DateInputType
		public Assignment getTypeAssignment_2_1_2_1() { return cTypeAssignment_2_1_2_1; }

		//DateInputType
		public RuleCall getTypeDateInputTypeEnumRuleCall_2_1_2_1_0() { return cTypeDateInputTypeEnumRuleCall_2_1_2_1_0; }

		//("disabled" (isDisabled?="true" | "false"))?
		public Group getGroup_2_1_3() { return cGroup_2_1_3; }

		//"disabled"
		public Keyword getDisabledKeyword_2_1_3_0() { return cDisabledKeyword_2_1_3_0; }

		//isDisabled?="true" | "false"
		public Alternatives getAlternatives_2_1_3_1() { return cAlternatives_2_1_3_1; }

		//isDisabled?="true"
		public Assignment getIsDisabledAssignment_2_1_3_1_0() { return cIsDisabledAssignment_2_1_3_1_0; }

		//"true"
		public Keyword getIsDisabledTrueKeyword_2_1_3_1_0_0() { return cIsDisabledTrueKeyword_2_1_3_1_0_0; }

		//"false"
		public Keyword getFalseKeyword_2_1_3_1_1() { return cFalseKeyword_2_1_3_1_1; }

		//("default" defaultValue=DATE)?
		public Group getGroup_2_1_4() { return cGroup_2_1_4; }

		//"default"
		public Keyword getDefaultKeyword_2_1_4_0() { return cDefaultKeyword_2_1_4_0; }

		//defaultValue=DATE
		public Assignment getDefaultValueAssignment_2_1_4_1() { return cDefaultValueAssignment_2_1_4_1; }

		//DATE
		public RuleCall getDefaultValueDATEParserRuleCall_2_1_4_1_0() { return cDefaultValueDATEParserRuleCall_2_1_4_1_0; }

		//("width" width=PERCENT)?
		public Group getGroup_2_1_5() { return cGroup_2_1_5; }

		//"width"
		public Keyword getWidthKeyword_2_1_5_0() { return cWidthKeyword_2_1_5_0; }

		//width=PERCENT
		public Assignment getWidthAssignment_2_1_5_1() { return cWidthAssignment_2_1_5_1; }

		//PERCENT
		public RuleCall getWidthPERCENTParserRuleCall_2_1_5_1_0() { return cWidthPERCENTParserRuleCall_2_1_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class TimeInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_1 = (UnorderedGroup)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cUnorderedGroup_2_1.eContents().get(0);
		private final Keyword cLabelKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Assignment cLabelTextAssignment_2_1_0_1 = (Assignment)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cLabelTextSTRINGTerminalRuleCall_2_1_0_1_0 = (RuleCall)cLabelTextAssignment_2_1_0_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cUnorderedGroup_2_1.eContents().get(1);
		private final Keyword cTooltipKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cTooltipTextAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0 = (RuleCall)cTooltipTextAssignment_2_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cUnorderedGroup_2_1.eContents().get(2);
		private final Keyword cTypeKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cTypeTimeInputTypeEnumRuleCall_2_1_2_1_0 = (RuleCall)cTypeAssignment_2_1_2_1.eContents().get(0);
		private final Group cGroup_2_1_3 = (Group)cUnorderedGroup_2_1.eContents().get(3);
		private final Keyword cDisabledKeyword_2_1_3_0 = (Keyword)cGroup_2_1_3.eContents().get(0);
		private final Alternatives cAlternatives_2_1_3_1 = (Alternatives)cGroup_2_1_3.eContents().get(1);
		private final Assignment cIsDisabledAssignment_2_1_3_1_0 = (Assignment)cAlternatives_2_1_3_1.eContents().get(0);
		private final Keyword cIsDisabledTrueKeyword_2_1_3_1_0_0 = (Keyword)cIsDisabledAssignment_2_1_3_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_2_1_3_1_1 = (Keyword)cAlternatives_2_1_3_1.eContents().get(1);
		private final Group cGroup_2_1_4 = (Group)cUnorderedGroup_2_1.eContents().get(4);
		private final Keyword cDefaultKeyword_2_1_4_0 = (Keyword)cGroup_2_1_4.eContents().get(0);
		private final Assignment cDefaultValueAssignment_2_1_4_1 = (Assignment)cGroup_2_1_4.eContents().get(1);
		private final RuleCall cDefaultValueTIMEParserRuleCall_2_1_4_1_0 = (RuleCall)cDefaultValueAssignment_2_1_4_1.eContents().get(0);
		private final Group cGroup_2_1_5 = (Group)cUnorderedGroup_2_1.eContents().get(5);
		private final Keyword cWidthKeyword_2_1_5_0 = (Keyword)cGroup_2_1_5.eContents().get(0);
		private final Assignment cWidthAssignment_2_1_5_1 = (Assignment)cGroup_2_1_5.eContents().get(1);
		private final RuleCall cWidthPERCENTParserRuleCall_2_1_5_1_0 = (RuleCall)cWidthAssignment_2_1_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		/// *
		// * TimeInputs allow the user to enter times.
		// * The representation of the actual widget depends on the target platform.
		// * / TimeInput:
		//	"TimeInput" name=EID ("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type"
		//	type=TimeInputType)? & ("disabled" (isDisabled?="true" | "false"))? & ("default" defaultValue=TIME)? & ("width"
		//	width=PERCENT)?) "}")?;
		@Override public ParserRule getRule() { return rule; }

		//"TimeInput" name=EID ("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type" type=TimeInputType)?
		//& ("disabled" (isDisabled?="true" | "false"))? & ("default" defaultValue=TIME)? & ("width" width=PERCENT)?) "}")?
		public Group getGroup() { return cGroup; }

		//"TimeInput"
		public Keyword getTimeInputKeyword_0() { return cTimeInputKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type" type=TimeInputType)? & ("disabled"
		//(isDisabled?="true" | "false"))? & ("default" defaultValue=TIME)? & ("width" width=PERCENT)?) "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type" type=TimeInputType)? & ("disabled"
		//(isDisabled?="true" | "false"))? & ("default" defaultValue=TIME)? & ("width" width=PERCENT)?
		public UnorderedGroup getUnorderedGroup_2_1() { return cUnorderedGroup_2_1; }

		//("label" labelText=STRING)?
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//"label"
		public Keyword getLabelKeyword_2_1_0_0() { return cLabelKeyword_2_1_0_0; }

		//labelText=STRING
		public Assignment getLabelTextAssignment_2_1_0_1() { return cLabelTextAssignment_2_1_0_1; }

		//STRING
		public RuleCall getLabelTextSTRINGTerminalRuleCall_2_1_0_1_0() { return cLabelTextSTRINGTerminalRuleCall_2_1_0_1_0; }

		//("tooltip" tooltipText=STRING)?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//"tooltip"
		public Keyword getTooltipKeyword_2_1_1_0() { return cTooltipKeyword_2_1_1_0; }

		//tooltipText=STRING
		public Assignment getTooltipTextAssignment_2_1_1_1() { return cTooltipTextAssignment_2_1_1_1; }

		//STRING
		public RuleCall getTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0() { return cTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0; }

		//("type" type=TimeInputType)?
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//"type"
		public Keyword getTypeKeyword_2_1_2_0() { return cTypeKeyword_2_1_2_0; }

		//type=TimeInputType
		public Assignment getTypeAssignment_2_1_2_1() { return cTypeAssignment_2_1_2_1; }

		//TimeInputType
		public RuleCall getTypeTimeInputTypeEnumRuleCall_2_1_2_1_0() { return cTypeTimeInputTypeEnumRuleCall_2_1_2_1_0; }

		//("disabled" (isDisabled?="true" | "false"))?
		public Group getGroup_2_1_3() { return cGroup_2_1_3; }

		//"disabled"
		public Keyword getDisabledKeyword_2_1_3_0() { return cDisabledKeyword_2_1_3_0; }

		//isDisabled?="true" | "false"
		public Alternatives getAlternatives_2_1_3_1() { return cAlternatives_2_1_3_1; }

		//isDisabled?="true"
		public Assignment getIsDisabledAssignment_2_1_3_1_0() { return cIsDisabledAssignment_2_1_3_1_0; }

		//"true"
		public Keyword getIsDisabledTrueKeyword_2_1_3_1_0_0() { return cIsDisabledTrueKeyword_2_1_3_1_0_0; }

		//"false"
		public Keyword getFalseKeyword_2_1_3_1_1() { return cFalseKeyword_2_1_3_1_1; }

		//("default" defaultValue=TIME)?
		public Group getGroup_2_1_4() { return cGroup_2_1_4; }

		//"default"
		public Keyword getDefaultKeyword_2_1_4_0() { return cDefaultKeyword_2_1_4_0; }

		//defaultValue=TIME
		public Assignment getDefaultValueAssignment_2_1_4_1() { return cDefaultValueAssignment_2_1_4_1; }

		//TIME
		public RuleCall getDefaultValueTIMEParserRuleCall_2_1_4_1_0() { return cDefaultValueTIMEParserRuleCall_2_1_4_1_0; }

		//("width" width=PERCENT)?
		public Group getGroup_2_1_5() { return cGroup_2_1_5; }

		//"width"
		public Keyword getWidthKeyword_2_1_5_0() { return cWidthKeyword_2_1_5_0; }

		//width=PERCENT
		public Assignment getWidthAssignment_2_1_5_1() { return cWidthAssignment_2_1_5_1; }

		//PERCENT
		public RuleCall getWidthPERCENTParserRuleCall_2_1_5_1_0() { return cWidthPERCENTParserRuleCall_2_1_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class DateTimeInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateTimeInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDateTimeInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_1 = (UnorderedGroup)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cUnorderedGroup_2_1.eContents().get(0);
		private final Keyword cLabelKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Assignment cLabelTextAssignment_2_1_0_1 = (Assignment)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cLabelTextSTRINGTerminalRuleCall_2_1_0_1_0 = (RuleCall)cLabelTextAssignment_2_1_0_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cUnorderedGroup_2_1.eContents().get(1);
		private final Keyword cTooltipKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cTooltipTextAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0 = (RuleCall)cTooltipTextAssignment_2_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cUnorderedGroup_2_1.eContents().get(2);
		private final Keyword cTypeKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cTypeDateTimeInputTypeEnumRuleCall_2_1_2_1_0 = (RuleCall)cTypeAssignment_2_1_2_1.eContents().get(0);
		private final Group cGroup_2_1_3 = (Group)cUnorderedGroup_2_1.eContents().get(3);
		private final Keyword cDisabledKeyword_2_1_3_0 = (Keyword)cGroup_2_1_3.eContents().get(0);
		private final Alternatives cAlternatives_2_1_3_1 = (Alternatives)cGroup_2_1_3.eContents().get(1);
		private final Assignment cIsDisabledAssignment_2_1_3_1_0 = (Assignment)cAlternatives_2_1_3_1.eContents().get(0);
		private final Keyword cIsDisabledTrueKeyword_2_1_3_1_0_0 = (Keyword)cIsDisabledAssignment_2_1_3_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_2_1_3_1_1 = (Keyword)cAlternatives_2_1_3_1.eContents().get(1);
		private final Group cGroup_2_1_4 = (Group)cUnorderedGroup_2_1.eContents().get(4);
		private final Keyword cDefaultKeyword_2_1_4_0 = (Keyword)cGroup_2_1_4.eContents().get(0);
		private final Assignment cDefaultValueAssignment_2_1_4_1 = (Assignment)cGroup_2_1_4.eContents().get(1);
		private final RuleCall cDefaultValueDATE_TIMEParserRuleCall_2_1_4_1_0 = (RuleCall)cDefaultValueAssignment_2_1_4_1.eContents().get(0);
		private final Group cGroup_2_1_5 = (Group)cUnorderedGroup_2_1.eContents().get(5);
		private final Keyword cWidthKeyword_2_1_5_0 = (Keyword)cGroup_2_1_5.eContents().get(0);
		private final Assignment cWidthAssignment_2_1_5_1 = (Assignment)cGroup_2_1_5.eContents().get(1);
		private final RuleCall cWidthPERCENTParserRuleCall_2_1_5_1_0 = (RuleCall)cWidthAssignment_2_1_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		/// *
		// * DateTimeInputs allow the user to enter an exact point of time.
		// * The representation of the actual widget depends on the target platform.
		// * / DateTimeInput:
		//	"DateTimeInput" name=EID ("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type"
		//	type=DateTimeInputType)? & ("disabled" (isDisabled?="true" | "false"))? & ("default" defaultValue=DATE_TIME)? &
		//	("width" width=PERCENT)?) "}")?;
		@Override public ParserRule getRule() { return rule; }

		//"DateTimeInput" name=EID ("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type"
		//type=DateTimeInputType)? & ("disabled" (isDisabled?="true" | "false"))? & ("default" defaultValue=DATE_TIME)? &
		//("width" width=PERCENT)?) "}")?
		public Group getGroup() { return cGroup; }

		//"DateTimeInput"
		public Keyword getDateTimeInputKeyword_0() { return cDateTimeInputKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type" type=DateTimeInputType)? & ("disabled"
		//(isDisabled?="true" | "false"))? & ("default" defaultValue=DATE_TIME)? & ("width" width=PERCENT)?) "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type" type=DateTimeInputType)? & ("disabled"
		//(isDisabled?="true" | "false"))? & ("default" defaultValue=DATE_TIME)? & ("width" width=PERCENT)?
		public UnorderedGroup getUnorderedGroup_2_1() { return cUnorderedGroup_2_1; }

		//("label" labelText=STRING)?
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//"label"
		public Keyword getLabelKeyword_2_1_0_0() { return cLabelKeyword_2_1_0_0; }

		//labelText=STRING
		public Assignment getLabelTextAssignment_2_1_0_1() { return cLabelTextAssignment_2_1_0_1; }

		//STRING
		public RuleCall getLabelTextSTRINGTerminalRuleCall_2_1_0_1_0() { return cLabelTextSTRINGTerminalRuleCall_2_1_0_1_0; }

		//("tooltip" tooltipText=STRING)?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//"tooltip"
		public Keyword getTooltipKeyword_2_1_1_0() { return cTooltipKeyword_2_1_1_0; }

		//tooltipText=STRING
		public Assignment getTooltipTextAssignment_2_1_1_1() { return cTooltipTextAssignment_2_1_1_1; }

		//STRING
		public RuleCall getTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0() { return cTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0; }

		//("type" type=DateTimeInputType)?
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//"type"
		public Keyword getTypeKeyword_2_1_2_0() { return cTypeKeyword_2_1_2_0; }

		//type=DateTimeInputType
		public Assignment getTypeAssignment_2_1_2_1() { return cTypeAssignment_2_1_2_1; }

		//DateTimeInputType
		public RuleCall getTypeDateTimeInputTypeEnumRuleCall_2_1_2_1_0() { return cTypeDateTimeInputTypeEnumRuleCall_2_1_2_1_0; }

		//("disabled" (isDisabled?="true" | "false"))?
		public Group getGroup_2_1_3() { return cGroup_2_1_3; }

		//"disabled"
		public Keyword getDisabledKeyword_2_1_3_0() { return cDisabledKeyword_2_1_3_0; }

		//isDisabled?="true" | "false"
		public Alternatives getAlternatives_2_1_3_1() { return cAlternatives_2_1_3_1; }

		//isDisabled?="true"
		public Assignment getIsDisabledAssignment_2_1_3_1_0() { return cIsDisabledAssignment_2_1_3_1_0; }

		//"true"
		public Keyword getIsDisabledTrueKeyword_2_1_3_1_0_0() { return cIsDisabledTrueKeyword_2_1_3_1_0_0; }

		//"false"
		public Keyword getFalseKeyword_2_1_3_1_1() { return cFalseKeyword_2_1_3_1_1; }

		//("default" defaultValue=DATE_TIME)?
		public Group getGroup_2_1_4() { return cGroup_2_1_4; }

		//"default"
		public Keyword getDefaultKeyword_2_1_4_0() { return cDefaultKeyword_2_1_4_0; }

		//defaultValue=DATE_TIME
		public Assignment getDefaultValueAssignment_2_1_4_1() { return cDefaultValueAssignment_2_1_4_1; }

		//DATE_TIME
		public RuleCall getDefaultValueDATE_TIMEParserRuleCall_2_1_4_1_0() { return cDefaultValueDATE_TIMEParserRuleCall_2_1_4_1_0; }

		//("width" width=PERCENT)?
		public Group getGroup_2_1_5() { return cGroup_2_1_5; }

		//"width"
		public Keyword getWidthKeyword_2_1_5_0() { return cWidthKeyword_2_1_5_0; }

		//width=PERCENT
		public Assignment getWidthAssignment_2_1_5_1() { return cWidthAssignment_2_1_5_1; }

		//PERCENT
		public RuleCall getWidthPERCENTParserRuleCall_2_1_5_1_0() { return cWidthPERCENTParserRuleCall_2_1_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class OptionInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptionInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_1 = (UnorderedGroup)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cUnorderedGroup_2_1.eContents().get(0);
		private final Keyword cLabelKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Assignment cLabelTextAssignment_2_1_0_1 = (Assignment)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cLabelTextSTRINGTerminalRuleCall_2_1_0_1_0 = (RuleCall)cLabelTextAssignment_2_1_0_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cUnorderedGroup_2_1.eContents().get(1);
		private final Keyword cTooltipKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cTooltipTextAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0 = (RuleCall)cTooltipTextAssignment_2_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cUnorderedGroup_2_1.eContents().get(2);
		private final Keyword cTypeKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cTypeOptionInputTypeEnumRuleCall_2_1_2_1_0 = (RuleCall)cTypeAssignment_2_1_2_1.eContents().get(0);
		private final Group cGroup_2_1_3 = (Group)cUnorderedGroup_2_1.eContents().get(3);
		private final Keyword cDisabledKeyword_2_1_3_0 = (Keyword)cGroup_2_1_3.eContents().get(0);
		private final Alternatives cAlternatives_2_1_3_1 = (Alternatives)cGroup_2_1_3.eContents().get(1);
		private final Assignment cIsDisabledAssignment_2_1_3_1_0 = (Assignment)cAlternatives_2_1_3_1.eContents().get(0);
		private final Keyword cIsDisabledTrueKeyword_2_1_3_1_0_0 = (Keyword)cIsDisabledAssignment_2_1_3_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_2_1_3_1_1 = (Keyword)cAlternatives_2_1_3_1.eContents().get(1);
		private final Group cGroup_2_1_4 = (Group)cUnorderedGroup_2_1.eContents().get(4);
		private final Keyword cDefaultKeyword_2_1_4_0 = (Keyword)cGroup_2_1_4.eContents().get(0);
		private final Assignment cDefaultValueAssignment_2_1_4_1 = (Assignment)cGroup_2_1_4.eContents().get(1);
		private final RuleCall cDefaultValueSTRINGTerminalRuleCall_2_1_4_1_0 = (RuleCall)cDefaultValueAssignment_2_1_4_1.eContents().get(0);
		private final Group cGroup_2_1_5 = (Group)cUnorderedGroup_2_1.eContents().get(5);
		private final Keyword cWidthKeyword_2_1_5_0 = (Keyword)cGroup_2_1_5.eContents().get(0);
		private final Assignment cWidthAssignment_2_1_5_1 = (Assignment)cGroup_2_1_5.eContents().get(1);
		private final RuleCall cWidthPERCENTParserRuleCall_2_1_5_1_0 = (RuleCall)cWidthAssignment_2_1_5_1.eContents().get(0);
		private final Group cGroup_2_1_6 = (Group)cUnorderedGroup_2_1.eContents().get(6);
		private final Keyword cOptionsKeyword_2_1_6_0 = (Keyword)cGroup_2_1_6.eContents().get(0);
		private final Alternatives cAlternatives_2_1_6_1 = (Alternatives)cGroup_2_1_6.eContents().get(1);
		private final Assignment cEnumReferenceAssignment_2_1_6_1_0 = (Assignment)cAlternatives_2_1_6_1.eContents().get(0);
		private final CrossReference cEnumReferenceEnumCrossReference_2_1_6_1_0_0 = (CrossReference)cEnumReferenceAssignment_2_1_6_1_0.eContents().get(0);
		private final RuleCall cEnumReferenceEnumIDTerminalRuleCall_2_1_6_1_0_0_1 = (RuleCall)cEnumReferenceEnumCrossReference_2_1_6_1_0_0.eContents().get(1);
		private final Group cGroup_2_1_6_1_1 = (Group)cAlternatives_2_1_6_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_6_1_1_0 = (Keyword)cGroup_2_1_6_1_1.eContents().get(0);
		private final Assignment cEnumBodyAssignment_2_1_6_1_1_1 = (Assignment)cGroup_2_1_6_1_1.eContents().get(1);
		private final RuleCall cEnumBodyEnumBodyParserRuleCall_2_1_6_1_1_1_0 = (RuleCall)cEnumBodyAssignment_2_1_6_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_6_1_1_2 = (Keyword)cGroup_2_1_6_1_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		/// *
		// * OptionInputs provide the user the possibility to choose one entry of a list of strings.
		// * / OptionInput:
		//	"OptionInput" name=EID ("{" (("label" labelText=STRING)? // Optional: Options may be inferred from the mapped model if its data type is an enum
		//	& ("tooltip" tooltipText=STRING)? & ("type" type=OptionInputType)? & ("disabled" (isDisabled?="true" | "false"))? &
		//	("default" defaultValue=STRING)? & ("width" width=PERCENT)? & ("options" (enumReference=[Enum] | "{"
		//	enumBody=EnumBody? "}"))?) "}")?;
		@Override public ParserRule getRule() { return rule; }

		//"OptionInput" name=EID ("{" (("label" labelText=STRING)? // Optional: Options may be inferred from the mapped model if its data type is an enum
		//& ("tooltip" tooltipText=STRING)? & ("type" type=OptionInputType)? & ("disabled" (isDisabled?="true" | "false"))? &
		//("default" defaultValue=STRING)? & ("width" width=PERCENT)? & ("options" (enumReference=[Enum] | "{"
		//enumBody=EnumBody? "}"))?) "}")?
		public Group getGroup() { return cGroup; }

		//"OptionInput"
		public Keyword getOptionInputKeyword_0() { return cOptionInputKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//("{" (("label" labelText=STRING)? // Optional: Options may be inferred from the mapped model if its data type is an enum
		//& ("tooltip" tooltipText=STRING)? & ("type" type=OptionInputType)? & ("disabled" (isDisabled?="true" | "false"))? &
		//("default" defaultValue=STRING)? & ("width" width=PERCENT)? & ("options" (enumReference=[Enum] | "{"
		//enumBody=EnumBody? "}"))?) "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//("label" labelText=STRING)? // Optional: Options may be inferred from the mapped model if its data type is an enum
		//& ("tooltip" tooltipText=STRING)? & ("type" type=OptionInputType)? & ("disabled" (isDisabled?="true" | "false"))? &
		//("default" defaultValue=STRING)? & ("width" width=PERCENT)? & ("options" (enumReference=[Enum] | "{"
		//enumBody=EnumBody? "}"))?
		public UnorderedGroup getUnorderedGroup_2_1() { return cUnorderedGroup_2_1; }

		//("label" labelText=STRING)?
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//"label"
		public Keyword getLabelKeyword_2_1_0_0() { return cLabelKeyword_2_1_0_0; }

		//labelText=STRING
		public Assignment getLabelTextAssignment_2_1_0_1() { return cLabelTextAssignment_2_1_0_1; }

		//STRING
		public RuleCall getLabelTextSTRINGTerminalRuleCall_2_1_0_1_0() { return cLabelTextSTRINGTerminalRuleCall_2_1_0_1_0; }

		//("tooltip" tooltipText=STRING)?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//"tooltip"
		public Keyword getTooltipKeyword_2_1_1_0() { return cTooltipKeyword_2_1_1_0; }

		//tooltipText=STRING
		public Assignment getTooltipTextAssignment_2_1_1_1() { return cTooltipTextAssignment_2_1_1_1; }

		//STRING
		public RuleCall getTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0() { return cTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0; }

		//("type" type=OptionInputType)?
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//"type"
		public Keyword getTypeKeyword_2_1_2_0() { return cTypeKeyword_2_1_2_0; }

		//type=OptionInputType
		public Assignment getTypeAssignment_2_1_2_1() { return cTypeAssignment_2_1_2_1; }

		//OptionInputType
		public RuleCall getTypeOptionInputTypeEnumRuleCall_2_1_2_1_0() { return cTypeOptionInputTypeEnumRuleCall_2_1_2_1_0; }

		//("disabled" (isDisabled?="true" | "false"))?
		public Group getGroup_2_1_3() { return cGroup_2_1_3; }

		//"disabled"
		public Keyword getDisabledKeyword_2_1_3_0() { return cDisabledKeyword_2_1_3_0; }

		//isDisabled?="true" | "false"
		public Alternatives getAlternatives_2_1_3_1() { return cAlternatives_2_1_3_1; }

		//isDisabled?="true"
		public Assignment getIsDisabledAssignment_2_1_3_1_0() { return cIsDisabledAssignment_2_1_3_1_0; }

		//"true"
		public Keyword getIsDisabledTrueKeyword_2_1_3_1_0_0() { return cIsDisabledTrueKeyword_2_1_3_1_0_0; }

		//"false"
		public Keyword getFalseKeyword_2_1_3_1_1() { return cFalseKeyword_2_1_3_1_1; }

		//("default" defaultValue=STRING)?
		public Group getGroup_2_1_4() { return cGroup_2_1_4; }

		//"default"
		public Keyword getDefaultKeyword_2_1_4_0() { return cDefaultKeyword_2_1_4_0; }

		//defaultValue=STRING
		public Assignment getDefaultValueAssignment_2_1_4_1() { return cDefaultValueAssignment_2_1_4_1; }

		//STRING
		public RuleCall getDefaultValueSTRINGTerminalRuleCall_2_1_4_1_0() { return cDefaultValueSTRINGTerminalRuleCall_2_1_4_1_0; }

		//("width" width=PERCENT)?
		public Group getGroup_2_1_5() { return cGroup_2_1_5; }

		//"width"
		public Keyword getWidthKeyword_2_1_5_0() { return cWidthKeyword_2_1_5_0; }

		//width=PERCENT
		public Assignment getWidthAssignment_2_1_5_1() { return cWidthAssignment_2_1_5_1; }

		//PERCENT
		public RuleCall getWidthPERCENTParserRuleCall_2_1_5_1_0() { return cWidthPERCENTParserRuleCall_2_1_5_1_0; }

		//("options" (enumReference=[Enum] | "{" enumBody=EnumBody? "}"))?
		public Group getGroup_2_1_6() { return cGroup_2_1_6; }

		//"options"
		public Keyword getOptionsKeyword_2_1_6_0() { return cOptionsKeyword_2_1_6_0; }

		//enumReference=[Enum] | "{" enumBody=EnumBody? "}"
		public Alternatives getAlternatives_2_1_6_1() { return cAlternatives_2_1_6_1; }

		//enumReference=[Enum]
		public Assignment getEnumReferenceAssignment_2_1_6_1_0() { return cEnumReferenceAssignment_2_1_6_1_0; }

		//[Enum]
		public CrossReference getEnumReferenceEnumCrossReference_2_1_6_1_0_0() { return cEnumReferenceEnumCrossReference_2_1_6_1_0_0; }

		//ID
		public RuleCall getEnumReferenceEnumIDTerminalRuleCall_2_1_6_1_0_0_1() { return cEnumReferenceEnumIDTerminalRuleCall_2_1_6_1_0_0_1; }

		//"{" enumBody=EnumBody? "}"
		public Group getGroup_2_1_6_1_1() { return cGroup_2_1_6_1_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1_6_1_1_0() { return cLeftCurlyBracketKeyword_2_1_6_1_1_0; }

		//enumBody=EnumBody?
		public Assignment getEnumBodyAssignment_2_1_6_1_1_1() { return cEnumBodyAssignment_2_1_6_1_1_1; }

		//EnumBody
		public RuleCall getEnumBodyEnumBodyParserRuleCall_2_1_6_1_1_1_0() { return cEnumBodyEnumBodyParserRuleCall_2_1_6_1_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1_6_1_1_2() { return cRightCurlyBracketKeyword_2_1_6_1_1_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class FileUploadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FileUpload");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFileUploadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_1 = (UnorderedGroup)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cUnorderedGroup_2_1.eContents().get(0);
		private final Keyword cLabelKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Assignment cLabelTextAssignment_2_1_0_1 = (Assignment)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cLabelTextSTRINGTerminalRuleCall_2_1_0_1_0 = (RuleCall)cLabelTextAssignment_2_1_0_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cUnorderedGroup_2_1.eContents().get(1);
		private final Keyword cTooltipKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cTooltipTextAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0 = (RuleCall)cTooltipTextAssignment_2_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cUnorderedGroup_2_1.eContents().get(2);
		private final Keyword cDisabledKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1_2_1 = (Alternatives)cGroup_2_1_2.eContents().get(1);
		private final Assignment cIsDisabledAssignment_2_1_2_1_0 = (Assignment)cAlternatives_2_1_2_1.eContents().get(0);
		private final Keyword cIsDisabledTrueKeyword_2_1_2_1_0_0 = (Keyword)cIsDisabledAssignment_2_1_2_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_2_1_2_1_1 = (Keyword)cAlternatives_2_1_2_1.eContents().get(1);
		private final Group cGroup_2_1_3 = (Group)cUnorderedGroup_2_1.eContents().get(3);
		private final Keyword cStyleKeyword_2_1_3_0 = (Keyword)cGroup_2_1_3.eContents().get(0);
		private final Assignment cStyleAssignment_2_1_3_1 = (Assignment)cGroup_2_1_3.eContents().get(1);
		private final RuleCall cStyleStyleAssignmentParserRuleCall_2_1_3_1_0 = (RuleCall)cStyleAssignment_2_1_3_1.eContents().get(0);
		private final Group cGroup_2_1_4 = (Group)cUnorderedGroup_2_1.eContents().get(4);
		private final Keyword cWidthKeyword_2_1_4_0 = (Keyword)cGroup_2_1_4.eContents().get(0);
		private final Assignment cWidthAssignment_2_1_4_1 = (Assignment)cGroup_2_1_4.eContents().get(1);
		private final RuleCall cWidthPERCENTParserRuleCall_2_1_4_1_0 = (RuleCall)cWidthAssignment_2_1_4_1.eContents().get(0);
		private final Group cGroup_2_1_5 = (Group)cUnorderedGroup_2_1.eContents().get(5);
		private final Keyword cTextKeyword_2_1_5_0 = (Keyword)cGroup_2_1_5.eContents().get(0);
		private final Assignment cButtonValueTextAssignment_2_1_5_1 = (Assignment)cGroup_2_1_5.eContents().get(1);
		private final RuleCall cButtonValueTextSTRINGTerminalRuleCall_2_1_5_1_0 = (RuleCall)cButtonValueTextAssignment_2_1_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		/// *
		// * FileInputs enable uploading a file to the application
		// * / FileUpload:
		//	"FileUpload" name=EID ("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("disabled"
		//	(isDisabled?="true" | "false"))? & ("style" style=StyleAssignment)? & ("width" width=PERCENT)? & ("text"
		//	buttonValueText=STRING)?) "}")?;
		@Override public ParserRule getRule() { return rule; }

		//"FileUpload" name=EID ("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("disabled"
		//(isDisabled?="true" | "false"))? & ("style" style=StyleAssignment)? & ("width" width=PERCENT)? & ("text"
		//buttonValueText=STRING)?) "}")?
		public Group getGroup() { return cGroup; }

		//"FileUpload"
		public Keyword getFileUploadKeyword_0() { return cFileUploadKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("disabled" (isDisabled?="true" | "false"))? &
		//("style" style=StyleAssignment)? & ("width" width=PERCENT)? & ("text" buttonValueText=STRING)?) "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("disabled" (isDisabled?="true" | "false"))? & ("style"
		//style=StyleAssignment)? & ("width" width=PERCENT)? & ("text" buttonValueText=STRING)?
		public UnorderedGroup getUnorderedGroup_2_1() { return cUnorderedGroup_2_1; }

		//("label" labelText=STRING)?
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//"label"
		public Keyword getLabelKeyword_2_1_0_0() { return cLabelKeyword_2_1_0_0; }

		//labelText=STRING
		public Assignment getLabelTextAssignment_2_1_0_1() { return cLabelTextAssignment_2_1_0_1; }

		//STRING
		public RuleCall getLabelTextSTRINGTerminalRuleCall_2_1_0_1_0() { return cLabelTextSTRINGTerminalRuleCall_2_1_0_1_0; }

		//("tooltip" tooltipText=STRING)?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//"tooltip"
		public Keyword getTooltipKeyword_2_1_1_0() { return cTooltipKeyword_2_1_1_0; }

		//tooltipText=STRING
		public Assignment getTooltipTextAssignment_2_1_1_1() { return cTooltipTextAssignment_2_1_1_1; }

		//STRING
		public RuleCall getTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0() { return cTooltipTextSTRINGTerminalRuleCall_2_1_1_1_0; }

		//("disabled" (isDisabled?="true" | "false"))?
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//"disabled"
		public Keyword getDisabledKeyword_2_1_2_0() { return cDisabledKeyword_2_1_2_0; }

		//isDisabled?="true" | "false"
		public Alternatives getAlternatives_2_1_2_1() { return cAlternatives_2_1_2_1; }

		//isDisabled?="true"
		public Assignment getIsDisabledAssignment_2_1_2_1_0() { return cIsDisabledAssignment_2_1_2_1_0; }

		//"true"
		public Keyword getIsDisabledTrueKeyword_2_1_2_1_0_0() { return cIsDisabledTrueKeyword_2_1_2_1_0_0; }

		//"false"
		public Keyword getFalseKeyword_2_1_2_1_1() { return cFalseKeyword_2_1_2_1_1; }

		//("style" style=StyleAssignment)?
		public Group getGroup_2_1_3() { return cGroup_2_1_3; }

		//"style"
		public Keyword getStyleKeyword_2_1_3_0() { return cStyleKeyword_2_1_3_0; }

		//style=StyleAssignment
		public Assignment getStyleAssignment_2_1_3_1() { return cStyleAssignment_2_1_3_1; }

		//StyleAssignment
		public RuleCall getStyleStyleAssignmentParserRuleCall_2_1_3_1_0() { return cStyleStyleAssignmentParserRuleCall_2_1_3_1_0; }

		//("width" width=PERCENT)?
		public Group getGroup_2_1_4() { return cGroup_2_1_4; }

		//"width"
		public Keyword getWidthKeyword_2_1_4_0() { return cWidthKeyword_2_1_4_0; }

		//width=PERCENT
		public Assignment getWidthAssignment_2_1_4_1() { return cWidthAssignment_2_1_4_1; }

		//PERCENT
		public RuleCall getWidthPERCENTParserRuleCall_2_1_4_1_0() { return cWidthPERCENTParserRuleCall_2_1_4_1_0; }

		//("text" buttonValueText=STRING)?
		public Group getGroup_2_1_5() { return cGroup_2_1_5; }

		//"text"
		public Keyword getTextKeyword_2_1_5_0() { return cTextKeyword_2_1_5_0; }

		//buttonValueText=STRING
		public Assignment getButtonValueTextAssignment_2_1_5_1() { return cButtonValueTextAssignment_2_1_5_1; }

		//STRING
		public RuleCall getButtonValueTextSTRINGTerminalRuleCall_2_1_5_1_0() { return cButtonValueTextSTRINGTerminalRuleCall_2_1_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class EntitySelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntitySelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntitySelectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cLabelKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cLabelTextAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cLabelTextSTRINGTerminalRuleCall_3_0_1_0 = (RuleCall)cLabelTextAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cTooltipKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cTooltipTextAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cTooltipTextSTRINGTerminalRuleCall_3_1_1_0 = (RuleCall)cTooltipTextAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cDisabledKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Alternatives cAlternatives_3_2_1 = (Alternatives)cGroup_3_2.eContents().get(1);
		private final Assignment cIsDisabledAssignment_3_2_1_0 = (Assignment)cAlternatives_3_2_1.eContents().get(0);
		private final Keyword cIsDisabledTrueKeyword_3_2_1_0_0 = (Keyword)cIsDisabledAssignment_3_2_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_3_2_1_1 = (Keyword)cAlternatives_3_2_1.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cWidthKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cWidthAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cWidthPERCENTParserRuleCall_3_3_1_0 = (RuleCall)cWidthAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cUnorderedGroup_3.eContents().get(4);
		private final Keyword cTextPropositionKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cTextPropositionAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cTextPropositionContentProviderPathParserRuleCall_3_4_1_0 = (RuleCall)cTextPropositionAssignment_3_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * The EntitySelector allows the user to select an element from a list of
		// * elements. The textProposition defines which ContentProvider stores the
		// * list and which attribute of the elements shall be displayed to the user
		// * to allow him to find the desired element.
		// * / EntitySelector:
		//	"EntitySelector" name=EID "{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("disabled"
		//	(isDisabled?="true" | "false"))? & ("width" width=PERCENT)? & "textProposition" textProposition=ContentProviderPath)
		//	"}";
		@Override public ParserRule getRule() { return rule; }

		//"EntitySelector" name=EID "{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("disabled"
		//(isDisabled?="true" | "false"))? & ("width" width=PERCENT)? & "textProposition" textProposition=ContentProviderPath)
		//"}"
		public Group getGroup() { return cGroup; }

		//"EntitySelector"
		public Keyword getEntitySelectorKeyword_0() { return cEntitySelectorKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("disabled" (isDisabled?="true" | "false"))? & ("width"
		//width=PERCENT)? & "textProposition" textProposition=ContentProviderPath
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//("label" labelText=STRING)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"label"
		public Keyword getLabelKeyword_3_0_0() { return cLabelKeyword_3_0_0; }

		//labelText=STRING
		public Assignment getLabelTextAssignment_3_0_1() { return cLabelTextAssignment_3_0_1; }

		//STRING
		public RuleCall getLabelTextSTRINGTerminalRuleCall_3_0_1_0() { return cLabelTextSTRINGTerminalRuleCall_3_0_1_0; }

		//("tooltip" tooltipText=STRING)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"tooltip"
		public Keyword getTooltipKeyword_3_1_0() { return cTooltipKeyword_3_1_0; }

		//tooltipText=STRING
		public Assignment getTooltipTextAssignment_3_1_1() { return cTooltipTextAssignment_3_1_1; }

		//STRING
		public RuleCall getTooltipTextSTRINGTerminalRuleCall_3_1_1_0() { return cTooltipTextSTRINGTerminalRuleCall_3_1_1_0; }

		//("disabled" (isDisabled?="true" | "false"))?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"disabled"
		public Keyword getDisabledKeyword_3_2_0() { return cDisabledKeyword_3_2_0; }

		//isDisabled?="true" | "false"
		public Alternatives getAlternatives_3_2_1() { return cAlternatives_3_2_1; }

		//isDisabled?="true"
		public Assignment getIsDisabledAssignment_3_2_1_0() { return cIsDisabledAssignment_3_2_1_0; }

		//"true"
		public Keyword getIsDisabledTrueKeyword_3_2_1_0_0() { return cIsDisabledTrueKeyword_3_2_1_0_0; }

		//"false"
		public Keyword getFalseKeyword_3_2_1_1() { return cFalseKeyword_3_2_1_1; }

		//("width" width=PERCENT)?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//"width"
		public Keyword getWidthKeyword_3_3_0() { return cWidthKeyword_3_3_0; }

		//width=PERCENT
		public Assignment getWidthAssignment_3_3_1() { return cWidthAssignment_3_3_1; }

		//PERCENT
		public RuleCall getWidthPERCENTParserRuleCall_3_3_1_0() { return cWidthPERCENTParserRuleCall_3_3_1_0; }

		//"textProposition" textProposition=ContentProviderPath
		public Group getGroup_3_4() { return cGroup_3_4; }

		//"textProposition"
		public Keyword getTextPropositionKeyword_3_4_0() { return cTextPropositionKeyword_3_4_0; }

		//textProposition=ContentProviderPath
		public Assignment getTextPropositionAssignment_3_4_1() { return cTextPropositionAssignment_3_4_1; }

		//ContentProviderPath
		public RuleCall getTextPropositionContentProviderPathParserRuleCall_3_4_1_0() { return cTextPropositionContentProviderPathParserRuleCall_3_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class AutoGeneratedContentElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AutoGeneratedContentElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAutoGeneratorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cWidthKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cWidthAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cWidthPERCENTParserRuleCall_3_0_1_0 = (RuleCall)cWidthAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cDisabledKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Alternatives cAlternatives_3_1_1 = (Alternatives)cGroup_3_1.eContents().get(1);
		private final Assignment cIsDisabledAssignment_3_1_1_0 = (Assignment)cAlternatives_3_1_1.eContents().get(0);
		private final Keyword cIsDisabledTrueKeyword_3_1_1_0_0 = (Keyword)cIsDisabledAssignment_3_1_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_3_1_1_1 = (Keyword)cAlternatives_3_1_1.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cContentProviderKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cContentProviderAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cContentProviderContentProviderReferenceParserRuleCall_3_2_1_0 = (RuleCall)cContentProviderAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_2_2 = (Group)cGroup_3_2.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3_2_2_0 = (Keyword)cGroup_3_2_2.eContents().get(0);
		private final Alternatives cAlternatives_3_2_2_1 = (Alternatives)cGroup_3_2_2.eContents().get(1);
		private final Assignment cExcludeAssignment_3_2_2_1_0 = (Assignment)cAlternatives_3_2_2_1.eContents().get(0);
		private final Keyword cExcludeExcludeKeyword_3_2_2_1_0_0 = (Keyword)cExcludeAssignment_3_2_2_1_0.eContents().get(0);
		private final Keyword cOnlyKeyword_3_2_2_1_1 = (Keyword)cAlternatives_3_2_2_1.eContents().get(1);
		private final Assignment cFilteredAttributesAssignment_3_2_2_2 = (Assignment)cGroup_3_2_2.eContents().get(2);
		private final RuleCall cFilteredAttributesEntityPathParserRuleCall_3_2_2_2_0 = (RuleCall)cFilteredAttributesAssignment_3_2_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2_2_3 = (Keyword)cGroup_3_2_2.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * The AutoGeneratedContentElement is bound to a ContentProvider and will automatically create
		// * view elements to display all attributes of the related entity. It is possible to either
		// * exclude attributes specified with exclude or to provide a positive list of attributes with only.
		// * In each case a list of the specified attributes will be stored in filteredAttributes. Which of
		// * the two options has been chosen can be determined via exclude.
		// * / AutoGeneratedContentElement:
		//	"AutoGenerator" name=EID "{" (("width" width=PERCENT)? & ("disabled" (isDisabled?="true" | "false"))? &
		//	"contentProvider" contentProvider+=ContentProviderReference+ ("(" (exclude?="exclude" | "only")
		//	filteredAttributes+=EntityPath+ ")")?) "}";
		@Override public ParserRule getRule() { return rule; }

		//"AutoGenerator" name=EID "{" (("width" width=PERCENT)? & ("disabled" (isDisabled?="true" | "false"))? &
		//"contentProvider" contentProvider+=ContentProviderReference+ ("(" (exclude?="exclude" | "only")
		//filteredAttributes+=EntityPath+ ")")?) "}"
		public Group getGroup() { return cGroup; }

		//"AutoGenerator"
		public Keyword getAutoGeneratorKeyword_0() { return cAutoGeneratorKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("width" width=PERCENT)? & ("disabled" (isDisabled?="true" | "false"))? & "contentProvider"
		//contentProvider+=ContentProviderReference+ ("(" (exclude?="exclude" | "only") filteredAttributes+=EntityPath+ ")")?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//("width" width=PERCENT)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"width"
		public Keyword getWidthKeyword_3_0_0() { return cWidthKeyword_3_0_0; }

		//width=PERCENT
		public Assignment getWidthAssignment_3_0_1() { return cWidthAssignment_3_0_1; }

		//PERCENT
		public RuleCall getWidthPERCENTParserRuleCall_3_0_1_0() { return cWidthPERCENTParserRuleCall_3_0_1_0; }

		//("disabled" (isDisabled?="true" | "false"))?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"disabled"
		public Keyword getDisabledKeyword_3_1_0() { return cDisabledKeyword_3_1_0; }

		//isDisabled?="true" | "false"
		public Alternatives getAlternatives_3_1_1() { return cAlternatives_3_1_1; }

		//isDisabled?="true"
		public Assignment getIsDisabledAssignment_3_1_1_0() { return cIsDisabledAssignment_3_1_1_0; }

		//"true"
		public Keyword getIsDisabledTrueKeyword_3_1_1_0_0() { return cIsDisabledTrueKeyword_3_1_1_0_0; }

		//"false"
		public Keyword getFalseKeyword_3_1_1_1() { return cFalseKeyword_3_1_1_1; }

		//"contentProvider" contentProvider+=ContentProviderReference+ ("(" (exclude?="exclude" | "only")
		//filteredAttributes+=EntityPath+ ")")?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"contentProvider"
		public Keyword getContentProviderKeyword_3_2_0() { return cContentProviderKeyword_3_2_0; }

		//contentProvider+=ContentProviderReference+
		public Assignment getContentProviderAssignment_3_2_1() { return cContentProviderAssignment_3_2_1; }

		//ContentProviderReference
		public RuleCall getContentProviderContentProviderReferenceParserRuleCall_3_2_1_0() { return cContentProviderContentProviderReferenceParserRuleCall_3_2_1_0; }

		//("(" (exclude?="exclude" | "only") filteredAttributes+=EntityPath+ ")")?
		public Group getGroup_3_2_2() { return cGroup_3_2_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_2_2_0() { return cLeftParenthesisKeyword_3_2_2_0; }

		//exclude?="exclude" | "only"
		public Alternatives getAlternatives_3_2_2_1() { return cAlternatives_3_2_2_1; }

		//exclude?="exclude"
		public Assignment getExcludeAssignment_3_2_2_1_0() { return cExcludeAssignment_3_2_2_1_0; }

		//"exclude"
		public Keyword getExcludeExcludeKeyword_3_2_2_1_0_0() { return cExcludeExcludeKeyword_3_2_2_1_0_0; }

		//"only"
		public Keyword getOnlyKeyword_3_2_2_1_1() { return cOnlyKeyword_3_2_2_1_1; }

		//filteredAttributes+=EntityPath+
		public Assignment getFilteredAttributesAssignment_3_2_2_2() { return cFilteredAttributesAssignment_3_2_2_2; }

		//EntityPath
		public RuleCall getFilteredAttributesEntityPathParserRuleCall_3_2_2_2_0() { return cFilteredAttributesEntityPathParserRuleCall_3_2_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2_2_3() { return cRightParenthesisKeyword_3_2_2_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Button");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cButtonShorthandDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cButtonExtendedDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * Buttons provide the user the possibility to call actions,
		// * that have been bound on the onTouch event of the Button.
		// * This Button specification allows different ways to set the
		// * button text (directly or via text attribute).
		// * / Button:
		//	ButtonShorthandDefinition | ButtonExtendedDefinition;
		@Override public ParserRule getRule() { return rule; }

		//ButtonShorthandDefinition | ButtonExtendedDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//ButtonShorthandDefinition
		public RuleCall getButtonShorthandDefinitionParserRuleCall_0() { return cButtonShorthandDefinitionParserRuleCall_0; }

		//ButtonExtendedDefinition
		public RuleCall getButtonExtendedDefinitionParserRuleCall_1() { return cButtonExtendedDefinitionParserRuleCall_1; }
	}

	public class ButtonShorthandDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ButtonShorthandDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cButtonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTextSTRINGTerminalRuleCall_3_0 = (RuleCall)cTextAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_5_1 = (UnorderedGroup)cGroup_5.eContents().get(1);
		private final Group cGroup_5_1_0 = (Group)cUnorderedGroup_5_1.eContents().get(0);
		private final Keyword cStyleKeyword_5_1_0_0 = (Keyword)cGroup_5_1_0.eContents().get(0);
		private final Assignment cStyleAssignment_5_1_0_1 = (Assignment)cGroup_5_1_0.eContents().get(1);
		private final RuleCall cStyleStyleAssignmentParserRuleCall_5_1_0_1_0 = (RuleCall)cStyleAssignment_5_1_0_1.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cUnorderedGroup_5_1.eContents().get(1);
		private final Keyword cDisabledKeyword_5_1_1_0 = (Keyword)cGroup_5_1_1.eContents().get(0);
		private final Alternatives cAlternatives_5_1_1_1 = (Alternatives)cGroup_5_1_1.eContents().get(1);
		private final Assignment cIsDisabledAssignment_5_1_1_1_0 = (Assignment)cAlternatives_5_1_1_1.eContents().get(0);
		private final Keyword cIsDisabledTrueKeyword_5_1_1_1_0_0 = (Keyword)cIsDisabledAssignment_5_1_1_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_5_1_1_1_1 = (Keyword)cAlternatives_5_1_1_1.eContents().get(1);
		private final Group cGroup_5_1_2 = (Group)cUnorderedGroup_5_1.eContents().get(2);
		private final Keyword cWidthKeyword_5_1_2_0 = (Keyword)cGroup_5_1_2.eContents().get(0);
		private final Assignment cWidthAssignment_5_1_2_1 = (Assignment)cGroup_5_1_2.eContents().get(1);
		private final RuleCall cWidthPERCENTParserRuleCall_5_1_2_1_0 = (RuleCall)cWidthAssignment_5_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		/// *
		// * This is the shorthand definition of a Button, where
		// * the text will be set in brackets behind the ID
		// * / ButtonShorthandDefinition returns Button:
		//	"Button" name=EID "(" text=STRING ")" ("{" (("style" style=StyleAssignment)? & ("disabled" (isDisabled?="true" |
		//	"false"))? & ("width" width=PERCENT)?) "}")?;
		@Override public ParserRule getRule() { return rule; }

		//"Button" name=EID "(" text=STRING ")" ("{" (("style" style=StyleAssignment)? & ("disabled" (isDisabled?="true" |
		//"false"))? & ("width" width=PERCENT)?) "}")?
		public Group getGroup() { return cGroup; }

		//"Button"
		public Keyword getButtonKeyword_0() { return cButtonKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//text=STRING
		public Assignment getTextAssignment_3() { return cTextAssignment_3; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_3_0() { return cTextSTRINGTerminalRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//("{" (("style" style=StyleAssignment)? & ("disabled" (isDisabled?="true" | "false"))? & ("width" width=PERCENT)?) "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }

		//("style" style=StyleAssignment)? & ("disabled" (isDisabled?="true" | "false"))? & ("width" width=PERCENT)?
		public UnorderedGroup getUnorderedGroup_5_1() { return cUnorderedGroup_5_1; }

		//("style" style=StyleAssignment)?
		public Group getGroup_5_1_0() { return cGroup_5_1_0; }

		//"style"
		public Keyword getStyleKeyword_5_1_0_0() { return cStyleKeyword_5_1_0_0; }

		//style=StyleAssignment
		public Assignment getStyleAssignment_5_1_0_1() { return cStyleAssignment_5_1_0_1; }

		//StyleAssignment
		public RuleCall getStyleStyleAssignmentParserRuleCall_5_1_0_1_0() { return cStyleStyleAssignmentParserRuleCall_5_1_0_1_0; }

		//("disabled" (isDisabled?="true" | "false"))?
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }

		//"disabled"
		public Keyword getDisabledKeyword_5_1_1_0() { return cDisabledKeyword_5_1_1_0; }

		//isDisabled?="true" | "false"
		public Alternatives getAlternatives_5_1_1_1() { return cAlternatives_5_1_1_1; }

		//isDisabled?="true"
		public Assignment getIsDisabledAssignment_5_1_1_1_0() { return cIsDisabledAssignment_5_1_1_1_0; }

		//"true"
		public Keyword getIsDisabledTrueKeyword_5_1_1_1_0_0() { return cIsDisabledTrueKeyword_5_1_1_1_0_0; }

		//"false"
		public Keyword getFalseKeyword_5_1_1_1_1() { return cFalseKeyword_5_1_1_1_1; }

		//("width" width=PERCENT)?
		public Group getGroup_5_1_2() { return cGroup_5_1_2; }

		//"width"
		public Keyword getWidthKeyword_5_1_2_0() { return cWidthKeyword_5_1_2_0; }

		//width=PERCENT
		public Assignment getWidthAssignment_5_1_2_1() { return cWidthAssignment_5_1_2_1; }

		//PERCENT
		public RuleCall getWidthPERCENTParserRuleCall_5_1_2_1_0() { return cWidthPERCENTParserRuleCall_5_1_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }
	}

	public class ButtonExtendedDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ButtonExtendedDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cButtonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cTextKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cTextAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_3_0_1_0 = (RuleCall)cTextAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cStyleKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cStyleAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cStyleStyleAssignmentParserRuleCall_3_1_1_0 = (RuleCall)cStyleAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cDisabledKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Alternatives cAlternatives_3_2_1 = (Alternatives)cGroup_3_2.eContents().get(1);
		private final Assignment cIsDisabledAssignment_3_2_1_0 = (Assignment)cAlternatives_3_2_1.eContents().get(0);
		private final Keyword cIsDisabledTrueKeyword_3_2_1_0_0 = (Keyword)cIsDisabledAssignment_3_2_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_3_2_1_1 = (Keyword)cAlternatives_3_2_1.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cWidthKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cWidthAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cWidthPERCENTParserRuleCall_3_3_1_0 = (RuleCall)cWidthAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * This is the extended definition of a Button, where
		// * the text will be set as property
		// * / ButtonExtendedDefinition returns Button:
		//	"Button" name=EID "{" ("text" text=STRING & ("style" style=StyleAssignment)? & ("disabled" (isDisabled?="true" |
		//	"false"))? & ("width" width=PERCENT)?) "}";
		@Override public ParserRule getRule() { return rule; }

		//"Button" name=EID "{" ("text" text=STRING & ("style" style=StyleAssignment)? & ("disabled" (isDisabled?="true" |
		//"false"))? & ("width" width=PERCENT)?) "}"
		public Group getGroup() { return cGroup; }

		//"Button"
		public Keyword getButtonKeyword_0() { return cButtonKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"text" text=STRING & ("style" style=StyleAssignment)? & ("disabled" (isDisabled?="true" | "false"))? & ("width"
		//width=PERCENT)?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//"text" text=STRING
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"text"
		public Keyword getTextKeyword_3_0_0() { return cTextKeyword_3_0_0; }

		//text=STRING
		public Assignment getTextAssignment_3_0_1() { return cTextAssignment_3_0_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_3_0_1_0() { return cTextSTRINGTerminalRuleCall_3_0_1_0; }

		//("style" style=StyleAssignment)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"style"
		public Keyword getStyleKeyword_3_1_0() { return cStyleKeyword_3_1_0; }

		//style=StyleAssignment
		public Assignment getStyleAssignment_3_1_1() { return cStyleAssignment_3_1_1; }

		//StyleAssignment
		public RuleCall getStyleStyleAssignmentParserRuleCall_3_1_1_0() { return cStyleStyleAssignmentParserRuleCall_3_1_1_0; }

		//("disabled" (isDisabled?="true" | "false"))?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"disabled"
		public Keyword getDisabledKeyword_3_2_0() { return cDisabledKeyword_3_2_0; }

		//isDisabled?="true" | "false"
		public Alternatives getAlternatives_3_2_1() { return cAlternatives_3_2_1; }

		//isDisabled?="true"
		public Assignment getIsDisabledAssignment_3_2_1_0() { return cIsDisabledAssignment_3_2_1_0; }

		//"true"
		public Keyword getIsDisabledTrueKeyword_3_2_1_0_0() { return cIsDisabledTrueKeyword_3_2_1_0_0; }

		//"false"
		public Keyword getFalseKeyword_3_2_1_1() { return cFalseKeyword_3_2_1_1; }

		//("width" width=PERCENT)?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//"width"
		public Keyword getWidthKeyword_3_3_0() { return cWidthKeyword_3_3_0; }

		//width=PERCENT
		public Assignment getWidthAssignment_3_3_1() { return cWidthAssignment_3_3_1; }

		//PERCENT
		public RuleCall getWidthPERCENTParserRuleCall_3_3_1_0() { return cWidthPERCENTParserRuleCall_3_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class TooltipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tooltip");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTooltipShorthandDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTooltipExtendedDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * Tooltips allow the modeler to provide the user with additional
		// * information. This Tooltip specification allows different ways
		// * to set the help text (directly or via text attribute)
		// * / Tooltip:
		//	TooltipShorthandDefinition | TooltipExtendedDefinition;
		@Override public ParserRule getRule() { return rule; }

		//TooltipShorthandDefinition | TooltipExtendedDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//TooltipShorthandDefinition
		public RuleCall getTooltipShorthandDefinitionParserRuleCall_0() { return cTooltipShorthandDefinitionParserRuleCall_0; }

		//TooltipExtendedDefinition
		public RuleCall getTooltipExtendedDefinitionParserRuleCall_1() { return cTooltipExtendedDefinitionParserRuleCall_1; }
	}

	public class TooltipShorthandDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TooltipShorthandDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTooltipKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTextSTRINGTerminalRuleCall_3_0 = (RuleCall)cTextAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cWidthKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cWidthAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cWidthPERCENTParserRuleCall_5_1_1_0 = (RuleCall)cWidthAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		/// *
		// * This is the shorthand definition of a Tooltip, where
		// * the image source will be set in brackets behind the ID
		// * / TooltipShorthandDefinition returns Tooltip:
		//	"Tooltip" name=EID "(" text=STRING ")" ("{" ("width" width=PERCENT)? "}")?;
		@Override public ParserRule getRule() { return rule; }

		//"Tooltip" name=EID "(" text=STRING ")" ("{" ("width" width=PERCENT)? "}")?
		public Group getGroup() { return cGroup; }

		//"Tooltip"
		public Keyword getTooltipKeyword_0() { return cTooltipKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//text=STRING
		public Assignment getTextAssignment_3() { return cTextAssignment_3; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_3_0() { return cTextSTRINGTerminalRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//("{" ("width" width=PERCENT)? "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }

		//("width" width=PERCENT)?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"width"
		public Keyword getWidthKeyword_5_1_0() { return cWidthKeyword_5_1_0; }

		//width=PERCENT
		public Assignment getWidthAssignment_5_1_1() { return cWidthAssignment_5_1_1; }

		//PERCENT
		public RuleCall getWidthPERCENTParserRuleCall_5_1_1_0() { return cWidthPERCENTParserRuleCall_5_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }
	}

	public class TooltipExtendedDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TooltipExtendedDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTooltipKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cTextKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cTextAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_3_0_1_0 = (RuleCall)cTextAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cWidthKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cWidthAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cWidthPERCENTParserRuleCall_3_1_1_0 = (RuleCall)cWidthAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * This is the extended definition of a Tooltip, where
		// * the image source will be set as property
		// * / TooltipExtendedDefinition returns Tooltip:
		//	"Tooltip" name=EID "{" ("text" text=STRING & ("width" width=PERCENT)?) "}";
		@Override public ParserRule getRule() { return rule; }

		//"Tooltip" name=EID "{" ("text" text=STRING & ("width" width=PERCENT)?) "}"
		public Group getGroup() { return cGroup; }

		//"Tooltip"
		public Keyword getTooltipKeyword_0() { return cTooltipKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"text" text=STRING & ("width" width=PERCENT)?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//"text" text=STRING
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"text"
		public Keyword getTextKeyword_3_0_0() { return cTextKeyword_3_0_0; }

		//text=STRING
		public Assignment getTextAssignment_3_0_1() { return cTextAssignment_3_0_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_3_0_1_0() { return cTextSTRINGTerminalRuleCall_3_0_1_0; }

		//("width" width=PERCENT)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"width"
		public Keyword getWidthKeyword_3_1_0() { return cWidthKeyword_3_1_0; }

		//width=PERCENT
		public Assignment getWidthAssignment_3_1_1() { return cWidthAssignment_3_1_1; }

		//PERCENT
		public RuleCall getWidthPERCENTParserRuleCall_3_1_1_0() { return cWidthPERCENTParserRuleCall_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ImageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Image");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImageShorthandDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImageExtendedDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * Images allow the modeler to specify and display images to the user.
		// * This Image specification allows different ways to set the
		// * image source (directly or via src attribute)
		// * / Image:
		//	ImageShorthandDefinition | ImageExtendedDefinition;
		@Override public ParserRule getRule() { return rule; }

		//ImageShorthandDefinition | ImageExtendedDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//ImageShorthandDefinition
		public RuleCall getImageShorthandDefinitionParserRuleCall_0() { return cImageShorthandDefinitionParserRuleCall_0; }

		//ImageExtendedDefinition
		public RuleCall getImageExtendedDefinitionParserRuleCall_1() { return cImageExtendedDefinitionParserRuleCall_1; }
	}

	public class ImageShorthandDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImageShorthandDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSrcAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSrcSTRINGTerminalRuleCall_3_0 = (RuleCall)cSrcAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_5_1 = (UnorderedGroup)cGroup_5.eContents().get(1);
		private final Group cGroup_5_1_0 = (Group)cUnorderedGroup_5_1.eContents().get(0);
		private final Keyword cImgHeightKeyword_5_1_0_0 = (Keyword)cGroup_5_1_0.eContents().get(0);
		private final Assignment cImgHeightAssignment_5_1_0_1 = (Assignment)cGroup_5_1_0.eContents().get(1);
		private final RuleCall cImgHeightINTTerminalRuleCall_5_1_0_1_0 = (RuleCall)cImgHeightAssignment_5_1_0_1.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cUnorderedGroup_5_1.eContents().get(1);
		private final Keyword cImgWidthKeyword_5_1_1_0 = (Keyword)cGroup_5_1_1.eContents().get(0);
		private final Assignment cImgWidthAssignment_5_1_1_1 = (Assignment)cGroup_5_1_1.eContents().get(1);
		private final RuleCall cImgWidthINTTerminalRuleCall_5_1_1_1_0 = (RuleCall)cImgWidthAssignment_5_1_1_1.eContents().get(0);
		private final Group cGroup_5_1_2 = (Group)cUnorderedGroup_5_1.eContents().get(2);
		private final Keyword cWidthKeyword_5_1_2_0 = (Keyword)cGroup_5_1_2.eContents().get(0);
		private final Assignment cWidthAssignment_5_1_2_1 = (Assignment)cGroup_5_1_2.eContents().get(1);
		private final RuleCall cWidthPERCENTParserRuleCall_5_1_2_1_0 = (RuleCall)cWidthAssignment_5_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		/// *
		// * This is the shorthand definition of a Image, where
		// * the image source will be set in brackets behind the ID
		// * / ImageShorthandDefinition returns Image:
		//	"Image" name=EID "(" src=STRING ")" ("{" (("imgHeight" imgHeight=INT)? & ("imgWidth" imgWidth=INT)? & ("width"
		//	width=PERCENT)?) "}")?;
		@Override public ParserRule getRule() { return rule; }

		//"Image" name=EID "(" src=STRING ")" ("{" (("imgHeight" imgHeight=INT)? & ("imgWidth" imgWidth=INT)? & ("width"
		//width=PERCENT)?) "}")?
		public Group getGroup() { return cGroup; }

		//"Image"
		public Keyword getImageKeyword_0() { return cImageKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//src=STRING
		public Assignment getSrcAssignment_3() { return cSrcAssignment_3; }

		//STRING
		public RuleCall getSrcSTRINGTerminalRuleCall_3_0() { return cSrcSTRINGTerminalRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//("{" (("imgHeight" imgHeight=INT)? & ("imgWidth" imgWidth=INT)? & ("width" width=PERCENT)?) "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }

		//("imgHeight" imgHeight=INT)? & ("imgWidth" imgWidth=INT)? & ("width" width=PERCENT)?
		public UnorderedGroup getUnorderedGroup_5_1() { return cUnorderedGroup_5_1; }

		//("imgHeight" imgHeight=INT)?
		public Group getGroup_5_1_0() { return cGroup_5_1_0; }

		//"imgHeight"
		public Keyword getImgHeightKeyword_5_1_0_0() { return cImgHeightKeyword_5_1_0_0; }

		//imgHeight=INT
		public Assignment getImgHeightAssignment_5_1_0_1() { return cImgHeightAssignment_5_1_0_1; }

		//INT
		public RuleCall getImgHeightINTTerminalRuleCall_5_1_0_1_0() { return cImgHeightINTTerminalRuleCall_5_1_0_1_0; }

		//("imgWidth" imgWidth=INT)?
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }

		//"imgWidth"
		public Keyword getImgWidthKeyword_5_1_1_0() { return cImgWidthKeyword_5_1_1_0; }

		//imgWidth=INT
		public Assignment getImgWidthAssignment_5_1_1_1() { return cImgWidthAssignment_5_1_1_1; }

		//INT
		public RuleCall getImgWidthINTTerminalRuleCall_5_1_1_1_0() { return cImgWidthINTTerminalRuleCall_5_1_1_1_0; }

		//("width" width=PERCENT)?
		public Group getGroup_5_1_2() { return cGroup_5_1_2; }

		//"width"
		public Keyword getWidthKeyword_5_1_2_0() { return cWidthKeyword_5_1_2_0; }

		//width=PERCENT
		public Assignment getWidthAssignment_5_1_2_1() { return cWidthAssignment_5_1_2_1; }

		//PERCENT
		public RuleCall getWidthPERCENTParserRuleCall_5_1_2_1_0() { return cWidthPERCENTParserRuleCall_5_1_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }
	}

	public class ImageExtendedDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImageExtendedDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cSrcKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cSrcAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cSrcSTRINGTerminalRuleCall_3_0_1_0 = (RuleCall)cSrcAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cHeightKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cHeightAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cHeightINTTerminalRuleCall_3_1_1_0 = (RuleCall)cHeightAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cWidthKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cWidthAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cWidthINTTerminalRuleCall_3_2_1_0 = (RuleCall)cWidthAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * This is the extended definition of a Image, where
		// * the image source will be set as property
		// * / ImageExtendedDefinition returns Image:
		//	"Image" name=EID "{" ("src" src=STRING & ("height" height=INT)? & ("width" width=INT)?) "}";
		@Override public ParserRule getRule() { return rule; }

		//"Image" name=EID "{" ("src" src=STRING & ("height" height=INT)? & ("width" width=INT)?) "}"
		public Group getGroup() { return cGroup; }

		//"Image"
		public Keyword getImageKeyword_0() { return cImageKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"src" src=STRING & ("height" height=INT)? & ("width" width=INT)?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//"src" src=STRING
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"src"
		public Keyword getSrcKeyword_3_0_0() { return cSrcKeyword_3_0_0; }

		//src=STRING
		public Assignment getSrcAssignment_3_0_1() { return cSrcAssignment_3_0_1; }

		//STRING
		public RuleCall getSrcSTRINGTerminalRuleCall_3_0_1_0() { return cSrcSTRINGTerminalRuleCall_3_0_1_0; }

		//("height" height=INT)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"height"
		public Keyword getHeightKeyword_3_1_0() { return cHeightKeyword_3_1_0; }

		//height=INT
		public Assignment getHeightAssignment_3_1_1() { return cHeightAssignment_3_1_1; }

		//INT
		public RuleCall getHeightINTTerminalRuleCall_3_1_1_0() { return cHeightINTTerminalRuleCall_3_1_1_0; }

		//("width" width=INT)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"width"
		public Keyword getWidthKeyword_3_2_0() { return cWidthKeyword_3_2_0; }

		//width=INT
		public Assignment getWidthAssignment_3_2_1() { return cWidthAssignment_3_2_1; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_3_2_1_0() { return cWidthINTTerminalRuleCall_3_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class UploadedImageOutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UploadedImageOutput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUploadedImageOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_1 = (UnorderedGroup)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cUnorderedGroup_2_1.eContents().get(0);
		private final Keyword cImgHeightKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Assignment cImgHeightAssignment_2_1_0_1 = (Assignment)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cImgHeightINTTerminalRuleCall_2_1_0_1_0 = (RuleCall)cImgHeightAssignment_2_1_0_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cUnorderedGroup_2_1.eContents().get(1);
		private final Keyword cImgWidthKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cImgWidthAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cImgWidthINTTerminalRuleCall_2_1_1_1_0 = (RuleCall)cImgWidthAssignment_2_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cUnorderedGroup_2_1.eContents().get(2);
		private final Keyword cWidthKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cWidthAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cWidthINTTerminalRuleCall_2_1_2_1_0 = (RuleCall)cWidthAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		/// *
		// * ImageUploadOutput allow the modeler to specify and display images to the user 
		// * which were previously uploaded to the backend (using a FileUpload element).
		// * / UploadedImageOutput:
		//	"UploadedImageOutput" name=EID ("{" (("imgHeight" imgHeight=INT)? & ("imgWidth" imgWidth=INT)? & ("width"
		//	width=INT)?) "}")?;
		@Override public ParserRule getRule() { return rule; }

		//"UploadedImageOutput" name=EID ("{" (("imgHeight" imgHeight=INT)? & ("imgWidth" imgWidth=INT)? & ("width" width=INT)?)
		//"}")?
		public Group getGroup() { return cGroup; }

		//"UploadedImageOutput"
		public Keyword getUploadedImageOutputKeyword_0() { return cUploadedImageOutputKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//("{" (("imgHeight" imgHeight=INT)? & ("imgWidth" imgWidth=INT)? & ("width" width=INT)?) "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//("imgHeight" imgHeight=INT)? & ("imgWidth" imgWidth=INT)? & ("width" width=INT)?
		public UnorderedGroup getUnorderedGroup_2_1() { return cUnorderedGroup_2_1; }

		//("imgHeight" imgHeight=INT)?
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//"imgHeight"
		public Keyword getImgHeightKeyword_2_1_0_0() { return cImgHeightKeyword_2_1_0_0; }

		//imgHeight=INT
		public Assignment getImgHeightAssignment_2_1_0_1() { return cImgHeightAssignment_2_1_0_1; }

		//INT
		public RuleCall getImgHeightINTTerminalRuleCall_2_1_0_1_0() { return cImgHeightINTTerminalRuleCall_2_1_0_1_0; }

		//("imgWidth" imgWidth=INT)?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//"imgWidth"
		public Keyword getImgWidthKeyword_2_1_1_0() { return cImgWidthKeyword_2_1_1_0; }

		//imgWidth=INT
		public Assignment getImgWidthAssignment_2_1_1_1() { return cImgWidthAssignment_2_1_1_1; }

		//INT
		public RuleCall getImgWidthINTTerminalRuleCall_2_1_1_1_0() { return cImgWidthINTTerminalRuleCall_2_1_1_1_0; }

		//("width" width=INT)?
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//"width"
		public Keyword getWidthKeyword_2_1_2_0() { return cWidthKeyword_2_1_2_0; }

		//width=INT
		public Assignment getWidthAssignment_2_1_2_1() { return cWidthAssignment_2_1_2_1; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_2_1_2_1_0() { return cWidthINTTerminalRuleCall_2_1_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLabelShorthandDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLabelExtendedDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * Labels allow the modeler to present text to the user.
		// * Normally they are used to denote input elements. This
		// * Label specification allows different ways to set the
		// * label text (directly or via text attribute)
		// * / Label:
		//	LabelShorthandDefinition | LabelExtendedDefinition;
		@Override public ParserRule getRule() { return rule; }

		//LabelShorthandDefinition | LabelExtendedDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//LabelShorthandDefinition
		public RuleCall getLabelShorthandDefinitionParserRuleCall_0() { return cLabelShorthandDefinitionParserRuleCall_0; }

		//LabelExtendedDefinition
		public RuleCall getLabelExtendedDefinitionParserRuleCall_1() { return cLabelExtendedDefinitionParserRuleCall_1; }
	}

	public class LabelShorthandDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LabelShorthandDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTextSTRINGTerminalRuleCall_3_0 = (RuleCall)cTextAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_5_1 = (UnorderedGroup)cGroup_5.eContents().get(1);
		private final Group cGroup_5_1_0 = (Group)cUnorderedGroup_5_1.eContents().get(0);
		private final Keyword cStyleKeyword_5_1_0_0 = (Keyword)cGroup_5_1_0.eContents().get(0);
		private final Assignment cStyleAssignment_5_1_0_1 = (Assignment)cGroup_5_1_0.eContents().get(1);
		private final RuleCall cStyleStyleAssignmentParserRuleCall_5_1_0_1_0 = (RuleCall)cStyleAssignment_5_1_0_1.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cUnorderedGroup_5_1.eContents().get(1);
		private final Keyword cWidthKeyword_5_1_1_0 = (Keyword)cGroup_5_1_1.eContents().get(0);
		private final Assignment cWidthAssignment_5_1_1_1 = (Assignment)cGroup_5_1_1.eContents().get(1);
		private final RuleCall cWidthPERCENTParserRuleCall_5_1_1_1_0 = (RuleCall)cWidthAssignment_5_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		/// *
		// * This is the shorthand definition of a Label, where
		// * the text will be set in brackets behind the ID
		// * / LabelShorthandDefinition returns Label:
		//	"Label" name=EID "(" text=STRING ")" ("{" (("style" style=StyleAssignment)? & ("width" width=PERCENT)?) "}")?;
		@Override public ParserRule getRule() { return rule; }

		//"Label" name=EID "(" text=STRING ")" ("{" (("style" style=StyleAssignment)? & ("width" width=PERCENT)?) "}")?
		public Group getGroup() { return cGroup; }

		//"Label"
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//text=STRING
		public Assignment getTextAssignment_3() { return cTextAssignment_3; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_3_0() { return cTextSTRINGTerminalRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//("{" (("style" style=StyleAssignment)? & ("width" width=PERCENT)?) "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }

		//("style" style=StyleAssignment)? & ("width" width=PERCENT)?
		public UnorderedGroup getUnorderedGroup_5_1() { return cUnorderedGroup_5_1; }

		//("style" style=StyleAssignment)?
		public Group getGroup_5_1_0() { return cGroup_5_1_0; }

		//"style"
		public Keyword getStyleKeyword_5_1_0_0() { return cStyleKeyword_5_1_0_0; }

		//style=StyleAssignment
		public Assignment getStyleAssignment_5_1_0_1() { return cStyleAssignment_5_1_0_1; }

		//StyleAssignment
		public RuleCall getStyleStyleAssignmentParserRuleCall_5_1_0_1_0() { return cStyleStyleAssignmentParserRuleCall_5_1_0_1_0; }

		//("width" width=PERCENT)?
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }

		//"width"
		public Keyword getWidthKeyword_5_1_1_0() { return cWidthKeyword_5_1_1_0; }

		//width=PERCENT
		public Assignment getWidthAssignment_5_1_1_1() { return cWidthAssignment_5_1_1_1; }

		//PERCENT
		public RuleCall getWidthPERCENTParserRuleCall_5_1_1_1_0() { return cWidthPERCENTParserRuleCall_5_1_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }
	}

	public class LabelExtendedDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LabelExtendedDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cTextKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cTextAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_3_0_1_0 = (RuleCall)cTextAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cStyleKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cStyleAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cStyleStyleAssignmentParserRuleCall_3_1_1_0 = (RuleCall)cStyleAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cWidthKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cWidthAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cWidthPERCENTParserRuleCall_3_2_1_0 = (RuleCall)cWidthAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * This is the extended definition of a Label, where
		// * the text will be set as property
		// * / LabelExtendedDefinition returns Label:
		//	"Label" name=EID "{" ("text" text=STRING & ("style" style=StyleAssignment)? & ("width" width=PERCENT)?) "}";
		@Override public ParserRule getRule() { return rule; }

		//"Label" name=EID "{" ("text" text=STRING & ("style" style=StyleAssignment)? & ("width" width=PERCENT)?) "}"
		public Group getGroup() { return cGroup; }

		//"Label"
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"text" text=STRING & ("style" style=StyleAssignment)? & ("width" width=PERCENT)?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//"text" text=STRING
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"text"
		public Keyword getTextKeyword_3_0_0() { return cTextKeyword_3_0_0; }

		//text=STRING
		public Assignment getTextAssignment_3_0_1() { return cTextAssignment_3_0_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_3_0_1_0() { return cTextSTRINGTerminalRuleCall_3_0_1_0; }

		//("style" style=StyleAssignment)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"style"
		public Keyword getStyleKeyword_3_1_0() { return cStyleKeyword_3_1_0; }

		//style=StyleAssignment
		public Assignment getStyleAssignment_3_1_1() { return cStyleAssignment_3_1_1; }

		//StyleAssignment
		public RuleCall getStyleStyleAssignmentParserRuleCall_3_1_1_0() { return cStyleStyleAssignmentParserRuleCall_3_1_1_0; }

		//("width" width=PERCENT)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"width"
		public Keyword getWidthKeyword_3_2_0() { return cWidthKeyword_3_2_0; }

		//width=PERCENT
		public Assignment getWidthAssignment_3_2_1() { return cWidthAssignment_3_2_1; }

		//PERCENT
		public RuleCall getWidthPERCENTParserRuleCall_3_2_1_0() { return cWidthPERCENTParserRuleCall_3_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SpacerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Spacer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpacerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cSpacerAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Keyword cNumberKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cNumberAssignment_1_0_1_2 = (Assignment)cGroup_1_0_1.eContents().get(2);
		private final RuleCall cNumberINTTerminalRuleCall_1_0_1_2_0 = (RuleCall)cNumberAssignment_1_0_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_1_3 = (Keyword)cGroup_1_0_1.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword c__DummyKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cWidthKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cWidthAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cWidthPERCENTParserRuleCall_2_1_1_0 = (RuleCall)cWidthAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		/// *
		// * A Spacer is used in a GridLayoutPane to mark an empty
		// * cell or in a FlowLayoutPane to occupy some space.
		// * / Spacer: // Hack to force the spacer to have a name attribute in the inferred model
		//// the __Dummy keyword will be suppressed in auto completion and via validator
		//	"Spacer" ({Spacer} ("(" "number"? number=INT? ")")? | "__Dummy" name=ID) ("{" ("width" width=PERCENT)? "}")?;
		@Override public ParserRule getRule() { return rule; }

		//// Hack to force the spacer to have a name attribute in the inferred model
		//// the __Dummy keyword will be suppressed in auto completion and via validator
		//"Spacer" ({Spacer} ("(" "number"? number=INT? ")")? | "__Dummy" name=ID) ("{" ("width" width=PERCENT)? "}")?
		public Group getGroup() { return cGroup; }

		//// Hack to force the spacer to have a name attribute in the inferred model
		//// the __Dummy keyword will be suppressed in auto completion and via validator
		//"Spacer"
		public Keyword getSpacerKeyword_0() { return cSpacerKeyword_0; }

		//{Spacer} ("(" "number"? number=INT? ")")? | "__Dummy" name=ID
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{Spacer} ("(" "number"? number=INT? ")")?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Spacer}
		public Action getSpacerAction_1_0_0() { return cSpacerAction_1_0_0; }

		//("(" "number"? number=INT? ")")?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_1_0() { return cLeftParenthesisKeyword_1_0_1_0; }

		//"number"?
		public Keyword getNumberKeyword_1_0_1_1() { return cNumberKeyword_1_0_1_1; }

		//number=INT?
		public Assignment getNumberAssignment_1_0_1_2() { return cNumberAssignment_1_0_1_2; }

		//INT
		public RuleCall getNumberINTTerminalRuleCall_1_0_1_2_0() { return cNumberINTTerminalRuleCall_1_0_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_1_3() { return cRightParenthesisKeyword_1_0_1_3; }

		//"__Dummy" name=ID
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"__Dummy"
		public Keyword get__DummyKeyword_1_1_0() { return c__DummyKeyword_1_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_1_0() { return cNameIDTerminalRuleCall_1_1_1_0; }

		//("{" ("width" width=PERCENT)? "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//("width" width=PERCENT)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"width"
		public Keyword getWidthKeyword_2_1_0() { return cWidthKeyword_2_1_0; }

		//width=PERCENT
		public Assignment getWidthAssignment_2_1_1() { return cWidthAssignment_2_1_1; }

		//PERCENT
		public RuleCall getWidthPERCENTParserRuleCall_2_1_1_0() { return cWidthPERCENTParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class ContainerElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContainerElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContentContainerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubViewContainerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///////////////////////////////////////
		//// View layer => Container elements
		///////////////////////////////////////
		/// *
		// * ContainerElements are used to composite ViewGUIElements.
		// * / ContainerElement:
		//	ContentContainer | SubViewContainer;
		@Override public ParserRule getRule() { return rule; }

		//ContentContainer | SubViewContainer
		public Alternatives getAlternatives() { return cAlternatives; }

		//ContentContainer
		public RuleCall getContentContainerParserRuleCall_0() { return cContentContainerParserRuleCall_0; }

		//SubViewContainer
		public RuleCall getSubViewContainerParserRuleCall_1() { return cSubViewContainerParserRuleCall_1; }
	}

	public class ContentContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContentContainer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGridLayoutPaneParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFlowLayoutPaneParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * ContentContainers can contain other Containers or ContentElements.
		// * / ContentContainer:
		//	GridLayoutPane | FlowLayoutPane;
		@Override public ParserRule getRule() { return rule; }

		//GridLayoutPane | FlowLayoutPane
		public Alternatives getAlternatives() { return cAlternatives; }

		//GridLayoutPane
		public RuleCall getGridLayoutPaneParserRuleCall_0() { return cGridLayoutPaneParserRuleCall_0; }

		//FlowLayoutPane
		public RuleCall getFlowLayoutPaneParserRuleCall_1() { return cFlowLayoutPaneParserRuleCall_1; }
	}

	public class SubViewContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubViewContainer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAlternativesPaneParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTabbedAlternativesPaneParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * SubViewContainers can only contain other Containers. The containers in SubViewContainers have the role of
		// * sub views, i.e. only one container is shown at any time and by changing the view only the containing elements
		// * are replaced.
		// * / SubViewContainer:
		//	AlternativesPane | TabbedAlternativesPane;
		@Override public ParserRule getRule() { return rule; }

		//AlternativesPane | TabbedAlternativesPane
		public Alternatives getAlternatives() { return cAlternatives; }

		//AlternativesPane
		public RuleCall getAlternativesPaneParserRuleCall_0() { return cAlternativesPaneParserRuleCall_0; }

		//TabbedAlternativesPane
		public RuleCall getTabbedAlternativesPaneParserRuleCall_1() { return cTabbedAlternativesPaneParserRuleCall_1; }
	}

	public class GridLayoutPaneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GridLayoutPane");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGridLayoutPaneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamsGridLayoutPaneParamParserRuleCall_3_0 = (RuleCall)cParamsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParamsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParamsGridLayoutPaneParamParserRuleCall_4_1_0 = (RuleCall)cParamsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cElementsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cElementsViewElementTypeParserRuleCall_7_0 = (RuleCall)cElementsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		/// *
		// * A GridLayoutPane allows the arrangement of ViewGUIElements in a grid structure. The user can specify the
		// * number of columns or the number of rows. If one of those is specified the other one will be calculated by
		// * MD2. If both are specified and the resulting number of cells is smaller than the number of contained
		// * elements, the exceeding elements will be ignored.
		// * / GridLayoutPane:
		//	"GridLayoutPane" name=EID "(" params+=GridLayoutPaneParam ("," params+=GridLayoutPaneParam)* ")" "{"
		//	elements+=ViewElementType* "}";
		@Override public ParserRule getRule() { return rule; }

		//"GridLayoutPane" name=EID "(" params+=GridLayoutPaneParam ("," params+=GridLayoutPaneParam)* ")" "{"
		//elements+=ViewElementType* "}"
		public Group getGroup() { return cGroup; }

		//"GridLayoutPane"
		public Keyword getGridLayoutPaneKeyword_0() { return cGridLayoutPaneKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//params+=GridLayoutPaneParam
		public Assignment getParamsAssignment_3() { return cParamsAssignment_3; }

		//GridLayoutPaneParam
		public RuleCall getParamsGridLayoutPaneParamParserRuleCall_3_0() { return cParamsGridLayoutPaneParamParserRuleCall_3_0; }

		//("," params+=GridLayoutPaneParam)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//params+=GridLayoutPaneParam
		public Assignment getParamsAssignment_4_1() { return cParamsAssignment_4_1; }

		//GridLayoutPaneParam
		public RuleCall getParamsGridLayoutPaneParamParserRuleCall_4_1_0() { return cParamsGridLayoutPaneParamParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//elements+=ViewElementType*
		public Assignment getElementsAssignment_7() { return cElementsAssignment_7; }

		//ViewElementType
		public RuleCall getElementsViewElementTypeParserRuleCall_7_0() { return cElementsViewElementTypeParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class GridLayoutPaneParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GridLayoutPaneParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cGridLayoutPaneColumnsParamAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cColumnsKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cGridLayoutPaneRowsParamAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cRowsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		private final RuleCall cCommonContainerParamParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/// *
		// * The GridLayoutPaneParam specifies all possible parameters for a GridLayoutPane.
		// * These are besides the number of columns and rows all TabSpecificParams.
		// * / GridLayoutPaneParam:
		//	{GridLayoutPaneColumnsParam} "columns" value=INT | {GridLayoutPaneRowsParam} "rows" value=INT | CommonContainerParam;
		@Override public ParserRule getRule() { return rule; }

		//{GridLayoutPaneColumnsParam} "columns" value=INT | {GridLayoutPaneRowsParam} "rows" value=INT | CommonContainerParam
		public Alternatives getAlternatives() { return cAlternatives; }

		//{GridLayoutPaneColumnsParam} "columns" value=INT
		public Group getGroup_0() { return cGroup_0; }

		//{GridLayoutPaneColumnsParam}
		public Action getGridLayoutPaneColumnsParamAction_0_0() { return cGridLayoutPaneColumnsParamAction_0_0; }

		//"columns"
		public Keyword getColumnsKeyword_0_1() { return cColumnsKeyword_0_1; }

		//value=INT
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_2_0() { return cValueINTTerminalRuleCall_0_2_0; }

		//{GridLayoutPaneRowsParam} "rows" value=INT
		public Group getGroup_1() { return cGroup_1; }

		//{GridLayoutPaneRowsParam}
		public Action getGridLayoutPaneRowsParamAction_1_0() { return cGridLayoutPaneRowsParamAction_1_0; }

		//"rows"
		public Keyword getRowsKeyword_1_1() { return cRowsKeyword_1_1; }

		//value=INT
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_2_0() { return cValueINTTerminalRuleCall_1_2_0; }

		//CommonContainerParam
		public RuleCall getCommonContainerParamParserRuleCall_2() { return cCommonContainerParamParserRuleCall_2; }
	}

	public class FlowLayoutPaneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlowLayoutPane");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlowLayoutPaneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParamsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParamsFlowLayoutPaneParamParserRuleCall_2_1_0_0 = (RuleCall)cParamsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParamsFlowLayoutPaneParamParserRuleCall_2_1_1_1_0 = (RuleCall)cParamsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsViewElementTypeParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// *
		// * A FlowLayoutPane allows the arrangement of ViewGUIElements one after another either horizontally or vertically.
		// * / FlowLayoutPane:
		//	"FlowLayoutPane" name=EID ("(" (params+=FlowLayoutPaneParam ("," params+=FlowLayoutPaneParam)*)? ")")? "{"
		//	elements+=ViewElementType* "}";
		@Override public ParserRule getRule() { return rule; }

		//"FlowLayoutPane" name=EID ("(" (params+=FlowLayoutPaneParam ("," params+=FlowLayoutPaneParam)*)? ")")? "{"
		//elements+=ViewElementType* "}"
		public Group getGroup() { return cGroup; }

		//"FlowLayoutPane"
		public Keyword getFlowLayoutPaneKeyword_0() { return cFlowLayoutPaneKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//("(" (params+=FlowLayoutPaneParam ("," params+=FlowLayoutPaneParam)*)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//(params+=FlowLayoutPaneParam ("," params+=FlowLayoutPaneParam)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//params+=FlowLayoutPaneParam
		public Assignment getParamsAssignment_2_1_0() { return cParamsAssignment_2_1_0; }

		//FlowLayoutPaneParam
		public RuleCall getParamsFlowLayoutPaneParamParserRuleCall_2_1_0_0() { return cParamsFlowLayoutPaneParamParserRuleCall_2_1_0_0; }

		//("," params+=FlowLayoutPaneParam)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//params+=FlowLayoutPaneParam
		public Assignment getParamsAssignment_2_1_1_1() { return cParamsAssignment_2_1_1_1; }

		//FlowLayoutPaneParam
		public RuleCall getParamsFlowLayoutPaneParamParserRuleCall_2_1_1_1_0() { return cParamsFlowLayoutPaneParamParserRuleCall_2_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//elements+=ViewElementType*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }

		//ViewElementType
		public RuleCall getElementsViewElementTypeParserRuleCall_4_0() { return cElementsViewElementTypeParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class FlowLayoutPaneParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlowLayoutPaneParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cFlowLayoutPaneFlowDirectionParamAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFlowDirectionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFlowDirectionFlowDirectionEnumRuleCall_0_1_0 = (RuleCall)cFlowDirectionAssignment_0_1.eContents().get(0);
		private final RuleCall cCommonContainerParamParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * The FlowLayoutPaneParam specifies all possible parameters for a FlowLayoutPane.
		// * These are besides the flowDirection all TabSpecificParams.
		// * / FlowLayoutPaneParam:
		//	{FlowLayoutPaneFlowDirectionParam} flowDirection=FlowDirection | CommonContainerParam;
		@Override public ParserRule getRule() { return rule; }

		//{FlowLayoutPaneFlowDirectionParam} flowDirection=FlowDirection | CommonContainerParam
		public Alternatives getAlternatives() { return cAlternatives; }

		//{FlowLayoutPaneFlowDirectionParam} flowDirection=FlowDirection
		public Group getGroup_0() { return cGroup_0; }

		//{FlowLayoutPaneFlowDirectionParam}
		public Action getFlowLayoutPaneFlowDirectionParamAction_0_0() { return cFlowLayoutPaneFlowDirectionParamAction_0_0; }

		//flowDirection=FlowDirection
		public Assignment getFlowDirectionAssignment_0_1() { return cFlowDirectionAssignment_0_1; }

		//FlowDirection
		public RuleCall getFlowDirectionFlowDirectionEnumRuleCall_0_1_0() { return cFlowDirectionFlowDirectionEnumRuleCall_0_1_0; }

		//CommonContainerParam
		public RuleCall getCommonContainerParamParserRuleCall_1() { return cCommonContainerParamParserRuleCall_1; }
	}

	public class AlternativesPaneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AlternativesPane");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlternativesPaneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParamsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParamsCommonContainerParamParserRuleCall_2_1_0_0 = (RuleCall)cParamsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParamsCommonContainerParamParserRuleCall_2_1_1_1_0 = (RuleCall)cParamsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsContainerElementTypeParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// *
		// * The AlternativesPane allows the definition of several ContainerElements of which one will be
		// * shown to the user. The user will be able to choose which ContainerElement shall be displayed. 
		// * / AlternativesPane:
		//	"AlternativesPane" name=EID ("(" (params+=CommonContainerParam ("," params+=CommonContainerParam)*)? ")")? "{"
		//	elements+=ContainerElementType* "}";
		@Override public ParserRule getRule() { return rule; }

		//"AlternativesPane" name=EID ("(" (params+=CommonContainerParam ("," params+=CommonContainerParam)*)? ")")? "{"
		//elements+=ContainerElementType* "}"
		public Group getGroup() { return cGroup; }

		//"AlternativesPane"
		public Keyword getAlternativesPaneKeyword_0() { return cAlternativesPaneKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//("(" (params+=CommonContainerParam ("," params+=CommonContainerParam)*)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//(params+=CommonContainerParam ("," params+=CommonContainerParam)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//params+=CommonContainerParam
		public Assignment getParamsAssignment_2_1_0() { return cParamsAssignment_2_1_0; }

		//CommonContainerParam
		public RuleCall getParamsCommonContainerParamParserRuleCall_2_1_0_0() { return cParamsCommonContainerParamParserRuleCall_2_1_0_0; }

		//("," params+=CommonContainerParam)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//params+=CommonContainerParam
		public Assignment getParamsAssignment_2_1_1_1() { return cParamsAssignment_2_1_1_1; }

		//CommonContainerParam
		public RuleCall getParamsCommonContainerParamParserRuleCall_2_1_1_1_0() { return cParamsCommonContainerParamParserRuleCall_2_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//elements+=ContainerElementType*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }

		//ContainerElementType
		public RuleCall getElementsContainerElementTypeParserRuleCall_4_0() { return cElementsContainerElementTypeParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class TabbedAlternativesPaneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TabbedAlternativesPane");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTabbedPaneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsContainerElementTypeParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// *
		// * The TabbedAlternativesPane is a special AlternativesPane that
		// * allows the user to switch between tabs by offering him a tab bar.
		// * / TabbedAlternativesPane:
		//	"TabbedPane" name=EID ("(" ")")? "{" elements+=ContainerElementType* "}";
		@Override public ParserRule getRule() { return rule; }

		//"TabbedPane" name=EID ("(" ")")? "{" elements+=ContainerElementType* "}"
		public Group getGroup() { return cGroup; }

		//"TabbedPane"
		public Keyword getTabbedPaneKeyword_0() { return cTabbedPaneKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//("(" ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_1() { return cRightParenthesisKeyword_2_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//elements+=ContainerElementType*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }

		//ContainerElementType
		public RuleCall getElementsContainerElementTypeParserRuleCall_4_0() { return cElementsContainerElementTypeParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class CommonContainerParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommonContainerParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cWidthParamAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cWidthKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cWidthAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cWidthPERCENTParserRuleCall_0_2_0 = (RuleCall)cWidthAssignment_0_2.eContents().get(0);
		private final RuleCall cTabSpecificParamParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * CommonContainerParams are parameters that can be applied to all container elements.
		// * That can either be a TabSpecificParam or a width parameter that defines the width
		// * of a container relative to its parent element.
		// * / CommonContainerParam:
		//	{WidthParam} "width" width=PERCENT | TabSpecificParam;
		@Override public ParserRule getRule() { return rule; }

		//{WidthParam} "width" width=PERCENT | TabSpecificParam
		public Alternatives getAlternatives() { return cAlternatives; }

		//{WidthParam} "width" width=PERCENT
		public Group getGroup_0() { return cGroup_0; }

		//{WidthParam}
		public Action getWidthParamAction_0_0() { return cWidthParamAction_0_0; }

		//"width"
		public Keyword getWidthKeyword_0_1() { return cWidthKeyword_0_1; }

		//width=PERCENT
		public Assignment getWidthAssignment_0_2() { return cWidthAssignment_0_2; }

		//PERCENT
		public RuleCall getWidthPERCENTParserRuleCall_0_2_0() { return cWidthPERCENTParserRuleCall_0_2_0; }

		//TabSpecificParam
		public RuleCall getTabSpecificParamParserRuleCall_1() { return cTabSpecificParamParserRuleCall_1; }
	}

	public class TabSpecificParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TabSpecificParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTabTitleParamAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cTabTitleKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTabTitleAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTabTitleSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cTabTitleAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTabIconParamAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cTabIconKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTabIconAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTabIconSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cTabIconAssignment_1_2.eContents().get(0);
		
		/// *
		// * TabSpecificParam defines the parameters the user can set to a
		// * ContainerElement that is contained in a TabbedAlternativesPane.
		// * / TabSpecificParam:
		//	{TabTitleParam} "tabTitle" tabTitle=STRING | {TabIconParam} "tabIcon" tabIcon=STRING;
		@Override public ParserRule getRule() { return rule; }

		//{TabTitleParam} "tabTitle" tabTitle=STRING | {TabIconParam} "tabIcon" tabIcon=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//{TabTitleParam} "tabTitle" tabTitle=STRING
		public Group getGroup_0() { return cGroup_0; }

		//{TabTitleParam}
		public Action getTabTitleParamAction_0_0() { return cTabTitleParamAction_0_0; }

		//"tabTitle"
		public Keyword getTabTitleKeyword_0_1() { return cTabTitleKeyword_0_1; }

		//tabTitle=STRING
		public Assignment getTabTitleAssignment_0_2() { return cTabTitleAssignment_0_2; }

		//STRING
		public RuleCall getTabTitleSTRINGTerminalRuleCall_0_2_0() { return cTabTitleSTRINGTerminalRuleCall_0_2_0; }

		//{TabIconParam} "tabIcon" tabIcon=STRING
		public Group getGroup_1() { return cGroup_1; }

		//{TabIconParam}
		public Action getTabIconParamAction_1_0() { return cTabIconParamAction_1_0; }

		//"tabIcon"
		public Keyword getTabIconKeyword_1_1() { return cTabIconKeyword_1_1; }

		//tabIcon=STRING
		public Assignment getTabIconAssignment_1_2() { return cTabIconAssignment_1_2; }

		//STRING
		public RuleCall getTabIconSTRINGTerminalRuleCall_1_2_0() { return cTabIconSTRINGTerminalRuleCall_1_2_0; }
	}

	public class ViewGUIElementReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ViewGUIElementReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cValueViewGUIElementCrossReference_0_0 = (CrossReference)cValueAssignment_0.eContents().get(0);
		private final RuleCall cValueViewGUIElementQUALIFIED_NAMEParserRuleCall_0_0_1 = (RuleCall)cValueViewGUIElementCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRenameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cRenameHyphenMinusGreaterThanSignKeyword_1_0_0 = (Keyword)cRenameAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		///////////////////////////////////////////
		//// View layer => ViewElementReferences
		///////////////////////////////////////////
		/// *
		// * A reference to another GUI element. All references will be replaced by its concrete instances during
		// * preprocessing. By renaming a reference, the later cloned element can be accessed by the new name, e.g.
		// * for mapping, validator binding etc. So, the reference is treated as if it were the actual GUI element.
		// * / ViewGUIElementReference:
		//	value=[ViewGUIElement|QUALIFIED_NAME] (rename?="->" name=EID)?;
		@Override public ParserRule getRule() { return rule; }

		//value=[ViewGUIElement|QUALIFIED_NAME] (rename?="->" name=EID)?
		public Group getGroup() { return cGroup; }

		//value=[ViewGUIElement|QUALIFIED_NAME]
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//[ViewGUIElement|QUALIFIED_NAME]
		public CrossReference getValueViewGUIElementCrossReference_0_0() { return cValueViewGUIElementCrossReference_0_0; }

		//QUALIFIED_NAME
		public RuleCall getValueViewGUIElementQUALIFIED_NAMEParserRuleCall_0_0_1() { return cValueViewGUIElementQUALIFIED_NAMEParserRuleCall_0_0_1; }

		//(rename?="->" name=EID)?
		public Group getGroup_1() { return cGroup_1; }

		//rename?="->"
		public Assignment getRenameAssignment_1_0() { return cRenameAssignment_1_0; }

		//"->"
		public Keyword getRenameHyphenMinusGreaterThanSignKeyword_1_0_0() { return cRenameHyphenMinusGreaterThanSignKeyword_1_0_0; }

		//name=EID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_1_0() { return cNameEIDParserRuleCall_1_1_0; }
	}

	public class ContainerElementReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContainerElementReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContainerElementReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValueContainerElementCrossReference_1_0 = (CrossReference)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueContainerElementQUALIFIED_NAMEParserRuleCall_1_0_1 = (RuleCall)cValueContainerElementCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRenameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cRenameHyphenMinusGreaterThanSignKeyword_2_0_0 = (Keyword)cRenameAssignment_2_0.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cParamsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cParamsTabSpecificParamParserRuleCall_3_1_0_0 = (RuleCall)cParamsAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cParamsTabSpecificParamParserRuleCall_3_1_1_1_0 = (RuleCall)cParamsAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		/// *
		// * Each ContainerElementReference is a special case of the ViewGUIElementReference that is meant to be used
		// * in SubViewContainers (TabbedPane, AlternativesPane).
		// * / ContainerElementReference returns ViewGUIElementReference:
		//	{ContainerElementReference} value=[ContainerElement|QUALIFIED_NAME] (rename?="->" name=EID)? ("("
		//	(params+=TabSpecificParam ("," params+=TabSpecificParam)*)? ")")?;
		@Override public ParserRule getRule() { return rule; }

		//{ContainerElementReference} value=[ContainerElement|QUALIFIED_NAME] (rename?="->" name=EID)? ("("
		//(params+=TabSpecificParam ("," params+=TabSpecificParam)*)? ")")?
		public Group getGroup() { return cGroup; }

		//{ContainerElementReference}
		public Action getContainerElementReferenceAction_0() { return cContainerElementReferenceAction_0; }

		//value=[ContainerElement|QUALIFIED_NAME]
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//[ContainerElement|QUALIFIED_NAME]
		public CrossReference getValueContainerElementCrossReference_1_0() { return cValueContainerElementCrossReference_1_0; }

		//QUALIFIED_NAME
		public RuleCall getValueContainerElementQUALIFIED_NAMEParserRuleCall_1_0_1() { return cValueContainerElementQUALIFIED_NAMEParserRuleCall_1_0_1; }

		//(rename?="->" name=EID)?
		public Group getGroup_2() { return cGroup_2; }

		//rename?="->"
		public Assignment getRenameAssignment_2_0() { return cRenameAssignment_2_0; }

		//"->"
		public Keyword getRenameHyphenMinusGreaterThanSignKeyword_2_0_0() { return cRenameHyphenMinusGreaterThanSignKeyword_2_0_0; }

		//name=EID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_2_1_0() { return cNameEIDParserRuleCall_2_1_0; }

		//("(" (params+=TabSpecificParam ("," params+=TabSpecificParam)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//(params+=TabSpecificParam ("," params+=TabSpecificParam)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//params+=TabSpecificParam
		public Assignment getParamsAssignment_3_1_0() { return cParamsAssignment_3_1_0; }

		//TabSpecificParam
		public RuleCall getParamsTabSpecificParamParserRuleCall_3_1_0_0() { return cParamsTabSpecificParamParserRuleCall_3_1_0_0; }

		//("," params+=TabSpecificParam)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//","
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }

		//params+=TabSpecificParam
		public Assignment getParamsAssignment_3_1_1_1() { return cParamsAssignment_3_1_1_1; }

		//TabSpecificParam
		public RuleCall getParamsTabSpecificParamParserRuleCall_3_1_1_1_0() { return cParamsTabSpecificParamParserRuleCall_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class ContainerElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContainerElementType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContainerElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cContainerElementReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * The ContainerElementType allows to either specify a new ContainerElement or to refer to an existing one.
		// * Used in SubViewContainers (TabbedPane, AlternativesPane).
		// * / ContainerElementType:
		//	ContainerElement | ContainerElementReference;
		@Override public ParserRule getRule() { return rule; }

		//ContainerElement | ContainerElementReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//ContainerElement
		public RuleCall getContainerElementParserRuleCall_0() { return cContainerElementParserRuleCall_0; }

		//ContainerElementReference
		public RuleCall getContainerElementReferenceParserRuleCall_1() { return cContainerElementReferenceParserRuleCall_1; }
	}

	public class StyleAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StyleAssignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStyleDefinitionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cDefinitionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDefinitionStyleBodyParserRuleCall_0_1_0 = (RuleCall)cDefinitionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStyleReferenceAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cReferenceAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cReferenceStyleCrossReference_1_1_0 = (CrossReference)cReferenceAssignment_1_1.eContents().get(0);
		private final RuleCall cReferenceStyleIDTerminalRuleCall_1_1_0_1 = (RuleCall)cReferenceStyleCrossReference_1_1_0.eContents().get(1);
		
		///////////////////////////////////////////
		//// View layer => Style definitions
		///////////////////////////////////////////
		/// *
		// * The StyleAssignment allows the user to
		// * either define a new Style or to refer
		// * to an existing one.
		// * / StyleAssignment:
		//	{StyleDefinition} definition=StyleBody | {StyleReference} reference=[Style];
		@Override public ParserRule getRule() { return rule; }

		//{StyleDefinition} definition=StyleBody | {StyleReference} reference=[Style]
		public Alternatives getAlternatives() { return cAlternatives; }

		//{StyleDefinition} definition=StyleBody
		public Group getGroup_0() { return cGroup_0; }

		//{StyleDefinition}
		public Action getStyleDefinitionAction_0_0() { return cStyleDefinitionAction_0_0; }

		//definition=StyleBody
		public Assignment getDefinitionAssignment_0_1() { return cDefinitionAssignment_0_1; }

		//StyleBody
		public RuleCall getDefinitionStyleBodyParserRuleCall_0_1_0() { return cDefinitionStyleBodyParserRuleCall_0_1_0; }

		//{StyleReference} reference=[Style]
		public Group getGroup_1() { return cGroup_1; }

		//{StyleReference}
		public Action getStyleReferenceAction_1_0() { return cStyleReferenceAction_1_0; }

		//reference=[Style]
		public Assignment getReferenceAssignment_1_1() { return cReferenceAssignment_1_1; }

		//[Style]
		public CrossReference getReferenceStyleCrossReference_1_1_0() { return cReferenceStyleCrossReference_1_1_0; }

		//ID
		public RuleCall getReferenceStyleIDTerminalRuleCall_1_1_0_1() { return cReferenceStyleIDTerminalRuleCall_1_1_0_1; }
	}

	public class StyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Style");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStyleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyStyleBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		/// *
		// * A Style allows the user to define a
		// * new Style in the StyleBody and allow
		// * the reference to it by defining a name.
		// * / Style:
		//	"style" name=EID body=StyleBody;
		@Override public ParserRule getRule() { return rule; }

		//"style" name=EID body=StyleBody
		public Group getGroup() { return cGroup; }

		//"style"
		public Keyword getStyleKeyword_0() { return cStyleKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//body=StyleBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//StyleBody
		public RuleCall getBodyStyleBodyParserRuleCall_2_0() { return cBodyStyleBodyParserRuleCall_2_0; }
	}

	public class StyleBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StyleBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cStyleBodyAction_1 = (Action)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cFontSizeKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cFontSizeAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cFontSizeFLOATParserRuleCall_2_0_1_0 = (RuleCall)cFontSizeAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cColorKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cColorAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cColorColorParserRuleCall_2_1_1_0 = (RuleCall)cColorAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cTextStyleKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Alternatives cAlternatives_2_2_1 = (Alternatives)cGroup_2_2.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2_2_1_0 = (UnorderedGroup)cAlternatives_2_2_1.eContents().get(0);
		private final Assignment cBoldAssignment_2_2_1_0_0 = (Assignment)cUnorderedGroup_2_2_1_0.eContents().get(0);
		private final Keyword cBoldBoldKeyword_2_2_1_0_0_0 = (Keyword)cBoldAssignment_2_2_1_0_0.eContents().get(0);
		private final Assignment cItalicAssignment_2_2_1_0_1 = (Assignment)cUnorderedGroup_2_2_1_0.eContents().get(1);
		private final Keyword cItalicItalicKeyword_2_2_1_0_1_0 = (Keyword)cItalicAssignment_2_2_1_0_1.eContents().get(0);
		private final Keyword cNormalKeyword_2_2_1_1 = (Keyword)cAlternatives_2_2_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/// *
		// * The StyleBody contains the actual style and can be used to set the appearance of the text of some 
		// * ViewGUIElements. It is possible to set the fontSize, the color and the textStyle.
		// * The fontSize is relative to the default font size, i.e. similar to the unit <i>em</i> in CSS.
		// * 1em is equal to the current font size. 2em means 2 times the size of the current font. This way,
		// * it can adapt automatically to the font size that the target device uses. If the target platform does not
		// * support <i>em</i> as a unit, the pixel or pt size can easily be calculated.
		// * / StyleBody:
		//	"{" {StyleBody} (("fontSize" fontSize=FLOAT)? & ("color" color=Color)? & ("textStyle" (bold?="bold"? &
		//	italic?="italic"? | "normal"))?) "}";
		@Override public ParserRule getRule() { return rule; }

		//"{" {StyleBody} (("fontSize" fontSize=FLOAT)? & ("color" color=Color)? & ("textStyle" (bold?="bold"? & italic?="italic"?
		//| "normal"))?) "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//{StyleBody}
		public Action getStyleBodyAction_1() { return cStyleBodyAction_1; }

		//("fontSize" fontSize=FLOAT)? & ("color" color=Color)? & ("textStyle" (bold?="bold"? & italic?="italic"? | "normal"))?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//("fontSize" fontSize=FLOAT)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"fontSize"
		public Keyword getFontSizeKeyword_2_0_0() { return cFontSizeKeyword_2_0_0; }

		//fontSize=FLOAT
		public Assignment getFontSizeAssignment_2_0_1() { return cFontSizeAssignment_2_0_1; }

		//FLOAT
		public RuleCall getFontSizeFLOATParserRuleCall_2_0_1_0() { return cFontSizeFLOATParserRuleCall_2_0_1_0; }

		//("color" color=Color)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"color"
		public Keyword getColorKeyword_2_1_0() { return cColorKeyword_2_1_0; }

		//color=Color
		public Assignment getColorAssignment_2_1_1() { return cColorAssignment_2_1_1; }

		//Color
		public RuleCall getColorColorParserRuleCall_2_1_1_0() { return cColorColorParserRuleCall_2_1_1_0; }

		//("textStyle" (bold?="bold"? & italic?="italic"? | "normal"))?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"textStyle"
		public Keyword getTextStyleKeyword_2_2_0() { return cTextStyleKeyword_2_2_0; }

		//bold?="bold"? & italic?="italic"? | "normal"
		public Alternatives getAlternatives_2_2_1() { return cAlternatives_2_2_1; }

		//bold?="bold"? & italic?="italic"?
		public UnorderedGroup getUnorderedGroup_2_2_1_0() { return cUnorderedGroup_2_2_1_0; }

		//bold?="bold"?
		public Assignment getBoldAssignment_2_2_1_0_0() { return cBoldAssignment_2_2_1_0_0; }

		//"bold"
		public Keyword getBoldBoldKeyword_2_2_1_0_0_0() { return cBoldBoldKeyword_2_2_1_0_0_0; }

		//italic?="italic"?
		public Assignment getItalicAssignment_2_2_1_0_1() { return cItalicAssignment_2_2_1_0_1; }

		//"italic"
		public Keyword getItalicItalicKeyword_2_2_1_0_1_0() { return cItalicItalicKeyword_2_2_1_0_1_0; }

		//"normal"
		public Keyword getNormalKeyword_2_2_1_1() { return cNormalKeyword_2_2_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Color");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cHexColorDefAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cColorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cColorHEX_COLORTerminalRuleCall_0_1_0 = (RuleCall)cColorAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNamedColorDefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cColorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cColorNamedColorEnumRuleCall_1_1_0 = (RuleCall)cColorAssignment_1_1.eContents().get(0);
		
		/// *
		// * A Color can be either specified
		// * as HEX_COLOR or NamedColor.
		// * 
		// * Notice:
		// * Preprocessing replaces all NamedColors
		// * by their hex color equivalents.
		// * / Color:
		//	{HexColorDef} color=HEX_COLOR | {NamedColorDef} color=NamedColor;
		@Override public ParserRule getRule() { return rule; }

		//{HexColorDef} color=HEX_COLOR | {NamedColorDef} color=NamedColor
		public Alternatives getAlternatives() { return cAlternatives; }

		//{HexColorDef} color=HEX_COLOR
		public Group getGroup_0() { return cGroup_0; }

		//{HexColorDef}
		public Action getHexColorDefAction_0_0() { return cHexColorDefAction_0_0; }

		//color=HEX_COLOR
		public Assignment getColorAssignment_0_1() { return cColorAssignment_0_1; }

		//HEX_COLOR
		public RuleCall getColorHEX_COLORTerminalRuleCall_0_1_0() { return cColorHEX_COLORTerminalRuleCall_0_1_0; }

		//{NamedColorDef} color=NamedColor
		public Group getGroup_1() { return cGroup_1; }

		//{NamedColorDef}
		public Action getNamedColorDefAction_1_0() { return cNamedColorDefAction_1_0; }

		//color=NamedColor
		public Assignment getColorAssignment_1_1() { return cColorAssignment_1_1; }

		//NamedColor
		public RuleCall getColorNamedColorEnumRuleCall_1_1_0() { return cColorNamedColorEnumRuleCall_1_1_0; }
	}

	public class ControllerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Controller");
		private final Assignment cControllerElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cControllerElementsControllerElementParserRuleCall_0 = (RuleCall)cControllerElementsAssignment.eContents().get(0);
		
		///////////////////////////////////////
		///////////////////////////////////////
		//// Controller layer
		///////////////////////////////////////
		///////////////////////////////////////
		/// *
		// * The root Controller element contains all
		// * ControllerElements containing to this view Controller
		// * / Controller:
		//	controllerElements+=ControllerElement+;
		@Override public ParserRule getRule() { return rule; }

		//controllerElements+=ControllerElement+
		public Assignment getControllerElementsAssignment() { return cControllerElementsAssignment; }

		//ControllerElement
		public RuleCall getControllerElementsControllerElementParserRuleCall_0() { return cControllerElementsControllerElementParserRuleCall_0; }
	}

	public class ControllerElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ControllerElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContentProviderParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValidatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMainParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRemoteConnectionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cWorkflowElementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cWebServiceCallParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		/// *
		// * The ControllerElement is the super type of all possible ControllerElements.
		// * / ControllerElement:
		//	ContentProvider | Validator | Main | RemoteConnection | WorkflowElement | WebServiceCall;
		@Override public ParserRule getRule() { return rule; }

		//ContentProvider | Validator | Main | RemoteConnection | WorkflowElement | WebServiceCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//ContentProvider
		public RuleCall getContentProviderParserRuleCall_0() { return cContentProviderParserRuleCall_0; }

		//Validator
		public RuleCall getValidatorParserRuleCall_1() { return cValidatorParserRuleCall_1; }

		//Main
		public RuleCall getMainParserRuleCall_2() { return cMainParserRuleCall_2; }

		//RemoteConnection
		public RuleCall getRemoteConnectionParserRuleCall_3() { return cRemoteConnectionParserRuleCall_3; }

		//WorkflowElement
		public RuleCall getWorkflowElementParserRuleCall_4() { return cWorkflowElementParserRuleCall_4; }

		//WebServiceCall
		public RuleCall getWebServiceCallParserRuleCall_5() { return cWebServiceCallParserRuleCall_5; }
	}

	public class WorkflowElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkflowElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkflowElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDefaultProcessChainKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefaultProcessChainAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cDefaultProcessChainProcessChainCrossReference_3_1_0 = (CrossReference)cDefaultProcessChainAssignment_3_1.eContents().get(0);
		private final RuleCall cDefaultProcessChainProcessChainIDTerminalRuleCall_3_1_0_1 = (RuleCall)cDefaultProcessChainProcessChainCrossReference_3_1_0.eContents().get(1);
		private final Keyword cOnInitKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cInitActionsAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final CrossReference cInitActionsActionCrossReference_3_4_0 = (CrossReference)cInitActionsAssignment_3_4.eContents().get(0);
		private final RuleCall cInitActionsActionIDTerminalRuleCall_3_4_0_1 = (RuleCall)cInitActionsActionCrossReference_3_4_0.eContents().get(1);
		private final Group cGroup_3_5 = (Group)cGroup_3.eContents().get(5);
		private final Keyword cCommaKeyword_3_5_0 = (Keyword)cGroup_3_5.eContents().get(0);
		private final Assignment cInitActionsAssignment_3_5_1 = (Assignment)cGroup_3_5.eContents().get(1);
		private final CrossReference cInitActionsActionCrossReference_3_5_1_0 = (CrossReference)cInitActionsAssignment_3_5_1.eContents().get(0);
		private final RuleCall cInitActionsActionIDTerminalRuleCall_3_5_1_0_1 = (RuleCall)cInitActionsActionCrossReference_3_5_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Assignment cActionsAssignment_4_0 = (Assignment)cUnorderedGroup_4.eContents().get(0);
		private final RuleCall cActionsActionParserRuleCall_4_0_0 = (RuleCall)cActionsAssignment_4_0.eContents().get(0);
		private final Assignment cProcessChainAssignment_4_1 = (Assignment)cUnorderedGroup_4.eContents().get(1);
		private final RuleCall cProcessChainProcessChainParserRuleCall_4_1_0 = (RuleCall)cProcessChainAssignment_4_1.eContents().get(0);
		private final Assignment cInvokeAssignment_4_2 = (Assignment)cUnorderedGroup_4.eContents().get(2);
		private final RuleCall cInvokeInvokeDefinitionParserRuleCall_4_2_0 = (RuleCall)cInvokeAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///////////////////////////////////////
		//// Controller layer => WorkflowElements
		///////////////////////////////////////
		/// *
		// * WorkflowElements are controllers for encapsulated functionality.
		// * The onInit block is performed on initialization of the workflowelement
		// * / WorkflowElement:
		//	"WorkflowElement" name=EID "{" ("defaultProcessChain" defaultProcessChain=[ProcessChain] "onInit" "{"
		//	initActions+=[Action] ("," initActions+=[Action])* "}") (actions+=Action* & processChain+=ProcessChain+ &
		//	invoke+=InvokeDefinition*) "}";
		@Override public ParserRule getRule() { return rule; }

		//"WorkflowElement" name=EID "{" ("defaultProcessChain" defaultProcessChain=[ProcessChain] "onInit" "{"
		//initActions+=[Action] ("," initActions+=[Action])* "}") (actions+=Action* & processChain+=ProcessChain+ &
		//invoke+=InvokeDefinition*) "}"
		public Group getGroup() { return cGroup; }

		//"WorkflowElement"
		public Keyword getWorkflowElementKeyword_0() { return cWorkflowElementKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"defaultProcessChain" defaultProcessChain=[ProcessChain] "onInit" "{" initActions+=[Action] ("," initActions+=[Action])*
		//"}"
		public Group getGroup_3() { return cGroup_3; }

		//"defaultProcessChain"
		public Keyword getDefaultProcessChainKeyword_3_0() { return cDefaultProcessChainKeyword_3_0; }

		//defaultProcessChain=[ProcessChain]
		public Assignment getDefaultProcessChainAssignment_3_1() { return cDefaultProcessChainAssignment_3_1; }

		//[ProcessChain]
		public CrossReference getDefaultProcessChainProcessChainCrossReference_3_1_0() { return cDefaultProcessChainProcessChainCrossReference_3_1_0; }

		//ID
		public RuleCall getDefaultProcessChainProcessChainIDTerminalRuleCall_3_1_0_1() { return cDefaultProcessChainProcessChainIDTerminalRuleCall_3_1_0_1; }

		//"onInit"
		public Keyword getOnInitKeyword_3_2() { return cOnInitKeyword_3_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_3() { return cLeftCurlyBracketKeyword_3_3; }

		//initActions+=[Action]
		public Assignment getInitActionsAssignment_3_4() { return cInitActionsAssignment_3_4; }

		//[Action]
		public CrossReference getInitActionsActionCrossReference_3_4_0() { return cInitActionsActionCrossReference_3_4_0; }

		//ID
		public RuleCall getInitActionsActionIDTerminalRuleCall_3_4_0_1() { return cInitActionsActionIDTerminalRuleCall_3_4_0_1; }

		//("," initActions+=[Action])*
		public Group getGroup_3_5() { return cGroup_3_5; }

		//","
		public Keyword getCommaKeyword_3_5_0() { return cCommaKeyword_3_5_0; }

		//initActions+=[Action]
		public Assignment getInitActionsAssignment_3_5_1() { return cInitActionsAssignment_3_5_1; }

		//[Action]
		public CrossReference getInitActionsActionCrossReference_3_5_1_0() { return cInitActionsActionCrossReference_3_5_1_0; }

		//ID
		public RuleCall getInitActionsActionIDTerminalRuleCall_3_5_1_0_1() { return cInitActionsActionIDTerminalRuleCall_3_5_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_6() { return cRightCurlyBracketKeyword_3_6; }

		//actions+=Action* & processChain+=ProcessChain+ & invoke+=InvokeDefinition*
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }

		//actions+=Action*
		public Assignment getActionsAssignment_4_0() { return cActionsAssignment_4_0; }

		//Action
		public RuleCall getActionsActionParserRuleCall_4_0_0() { return cActionsActionParserRuleCall_4_0_0; }

		//processChain+=ProcessChain+
		public Assignment getProcessChainAssignment_4_1() { return cProcessChainAssignment_4_1; }

		//ProcessChain
		public RuleCall getProcessChainProcessChainParserRuleCall_4_1_0() { return cProcessChainProcessChainParserRuleCall_4_1_0; }

		//invoke+=InvokeDefinition*
		public Assignment getInvokeAssignment_4_2() { return cInvokeAssignment_4_2; }

		//InvokeDefinition
		public RuleCall getInvokeInvokeDefinitionParserRuleCall_4_2_0() { return cInvokeInvokeDefinitionParserRuleCall_4_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cCustomActionParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cCombinedActionParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		///////////////////////////////////////
		//// Controller layer => Events
		///////////////////////////////////////
		/// *
		// * An Action provides the user the possibility to
		// * declare a set of tasks. An Action can be
		// * either a CustomAction or a CombinedAction.
		// * / Action:
		//	"action" (CustomAction | CombinedAction);
		@Override public ParserRule getRule() { return rule; }

		//"action" (CustomAction | CombinedAction)
		public Group getGroup() { return cGroup; }

		//"action"
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }

		//CustomAction | CombinedAction
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//CustomAction
		public RuleCall getCustomActionParserRuleCall_1_0() { return cCustomActionParserRuleCall_1_0; }

		//CombinedAction
		public RuleCall getCombinedActionParserRuleCall_1_1() { return cCombinedActionParserRuleCall_1_1; }
	}

	public class CustomActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CustomAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCustomActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCodeFragmentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCodeFragmentsCustomCodeFragmentParserRuleCall_3_0 = (RuleCall)cCodeFragmentsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * A CustomAction contains a list of CustomCodeFragments
		// * where each CustomCodeFragment contains one task.
		// * / CustomAction:
		//	"CustomAction" name=EID "{" codeFragments+=CustomCodeFragment* "}";
		@Override public ParserRule getRule() { return rule; }

		//"CustomAction" name=EID "{" codeFragments+=CustomCodeFragment* "}"
		public Group getGroup() { return cGroup; }

		//"CustomAction"
		public Keyword getCustomActionKeyword_0() { return cCustomActionKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//codeFragments+=CustomCodeFragment*
		public Assignment getCodeFragmentsAssignment_3() { return cCodeFragmentsAssignment_3; }

		//CustomCodeFragment
		public RuleCall getCodeFragmentsCustomCodeFragmentParserRuleCall_3_0() { return cCodeFragmentsCustomCodeFragmentParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class CombinedActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CombinedAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCombinedActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cActionsActionCrossReference_3_0 = (CrossReference)cActionsAssignment_3.eContents().get(0);
		private final RuleCall cActionsActionQUALIFIED_NAMEParserRuleCall_3_0_1 = (RuleCall)cActionsActionCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * CombinedActions allow the composition of Actions.
		// * / CombinedAction:
		//	"CombinedAction" name=EID "{" actions+=[Action|QUALIFIED_NAME]* "}";
		@Override public ParserRule getRule() { return rule; }

		//"CombinedAction" name=EID "{" actions+=[Action|QUALIFIED_NAME]* "}"
		public Group getGroup() { return cGroup; }

		//"CombinedAction"
		public Keyword getCombinedActionKeyword_0() { return cCombinedActionKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//actions+=[Action|QUALIFIED_NAME]*
		public Assignment getActionsAssignment_3() { return cActionsAssignment_3; }

		//[Action|QUALIFIED_NAME]
		public CrossReference getActionsActionCrossReference_3_0() { return cActionsActionCrossReference_3_0; }

		//QUALIFIED_NAME
		public RuleCall getActionsActionQUALIFIED_NAMEParserRuleCall_3_0_1() { return cActionsActionQUALIFIED_NAMEParserRuleCall_3_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SimpleActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cProcessChainProceedActionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cProcessChainProceedKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cProcessChainReverseActionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cProcessChainReverseKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cProcessChainGotoActionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cProcessChainGotoKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cPcStepAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final CrossReference cPcStepProcessChainStepCrossReference_2_3_0 = (CrossReference)cPcStepAssignment_2_3.eContents().get(0);
		private final RuleCall cPcStepProcessChainStepQUALIFIED_NAMEParserRuleCall_2_3_0_1 = (RuleCall)cPcStepProcessChainStepCrossReference_2_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cSetProcessChainActionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cSetProcessChainKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cProcessChainAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final CrossReference cProcessChainProcessChainCrossReference_3_3_0 = (CrossReference)cProcessChainAssignment_3_3.eContents().get(0);
		private final RuleCall cProcessChainProcessChainIDTerminalRuleCall_3_3_0_1 = (RuleCall)cProcessChainProcessChainCrossReference_3_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cGotoViewActionAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cGotoViewKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Assignment cViewAssignment_4_1_2 = (Assignment)cGroup_4_1.eContents().get(2);
		private final RuleCall cViewAbstractViewGUIElementRefParserRuleCall_4_1_2_0 = (RuleCall)cViewAssignment_4_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_1_3 = (Keyword)cGroup_4_1.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cDisableActionAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cDisableKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Assignment cInputFieldAssignment_5_1_2 = (Assignment)cGroup_5_1.eContents().get(2);
		private final RuleCall cInputFieldAbstractViewGUIElementRefParserRuleCall_5_1_2_0 = (RuleCall)cInputFieldAssignment_5_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_1_3 = (Keyword)cGroup_5_1.eContents().get(3);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cEnableActionAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cEnableKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1_1 = (Keyword)cGroup_6_1.eContents().get(1);
		private final Assignment cInputFieldAssignment_6_1_2 = (Assignment)cGroup_6_1.eContents().get(2);
		private final RuleCall cInputFieldAbstractViewGUIElementRefParserRuleCall_6_1_2_0 = (RuleCall)cInputFieldAssignment_6_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_1_3 = (Keyword)cGroup_6_1.eContents().get(3);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cDisplayMessageActionAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cDisplayMessageKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_1_1 = (Keyword)cGroup_7_1.eContents().get(1);
		private final Assignment cMessageAssignment_7_1_2 = (Assignment)cGroup_7_1.eContents().get(2);
		private final RuleCall cMessageSimpleExpressionParserRuleCall_7_1_2_0 = (RuleCall)cMessageAssignment_7_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_1_3 = (Keyword)cGroup_7_1.eContents().get(3);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cContentProviderOperationActionAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Keyword cContentProviderOperationKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_8_1_1 = (Keyword)cGroup_8_1.eContents().get(1);
		private final Assignment cOperationAssignment_8_1_2 = (Assignment)cGroup_8_1.eContents().get(2);
		private final RuleCall cOperationAllowedOperationEnumRuleCall_8_1_2_0 = (RuleCall)cOperationAssignment_8_1_2.eContents().get(0);
		private final Assignment cContentProviderAssignment_8_1_3 = (Assignment)cGroup_8_1.eContents().get(3);
		private final RuleCall cContentProviderAbstractProviderReferenceParserRuleCall_8_1_3_0 = (RuleCall)cContentProviderAssignment_8_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_1_4 = (Keyword)cGroup_8_1.eContents().get(4);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cContentProviderResetActionAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cGroup_9.eContents().get(1);
		private final Keyword cContentProviderResetKeyword_9_1_0 = (Keyword)cGroup_9_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_1_1 = (Keyword)cGroup_9_1.eContents().get(1);
		private final Assignment cContentProviderAssignment_9_1_2 = (Assignment)cGroup_9_1.eContents().get(2);
		private final RuleCall cContentProviderContentProviderReferenceParserRuleCall_9_1_2_0 = (RuleCall)cContentProviderAssignment_9_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_1_3 = (Keyword)cGroup_9_1.eContents().get(3);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cFireEventActionAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Group cGroup_10_1 = (Group)cGroup_10.eContents().get(1);
		private final Keyword cFireEventKeyword_10_1_0 = (Keyword)cGroup_10_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_10_1_1 = (Keyword)cGroup_10_1.eContents().get(1);
		private final Assignment cWorkflowEventAssignment_10_1_2 = (Assignment)cGroup_10_1.eContents().get(2);
		private final RuleCall cWorkflowEventWorkflowEventParserRuleCall_10_1_2_0 = (RuleCall)cWorkflowEventAssignment_10_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_1_3 = (Keyword)cGroup_10_1.eContents().get(3);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cWebServiceCallActionAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Group cGroup_11_1 = (Group)cGroup_11.eContents().get(1);
		private final Keyword cWebServiceCallKeyword_11_1_0 = (Keyword)cGroup_11_1.eContents().get(0);
		private final Assignment cWebServiceCallAssignment_11_1_1 = (Assignment)cGroup_11_1.eContents().get(1);
		private final CrossReference cWebServiceCallWebServiceCallCrossReference_11_1_1_0 = (CrossReference)cWebServiceCallAssignment_11_1_1.eContents().get(0);
		private final RuleCall cWebServiceCallWebServiceCallIDTerminalRuleCall_11_1_1_0_1 = (RuleCall)cWebServiceCallWebServiceCallCrossReference_11_1_1_0.eContents().get(1);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Action cLocationActionAction_12_0 = (Action)cGroup_12.eContents().get(0);
		private final Group cGroup_12_1 = (Group)cGroup_12.eContents().get(1);
		private final Keyword cLocationKeyword_12_1_0 = (Keyword)cGroup_12_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_12_1_1 = (Keyword)cGroup_12_1.eContents().get(1);
		private final Keyword cInputsKeyword_12_1_2 = (Keyword)cGroup_12_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_12_1_3 = (Keyword)cGroup_12_1.eContents().get(3);
		private final UnorderedGroup cUnorderedGroup_12_1_4 = (UnorderedGroup)cGroup_12_1.eContents().get(4);
		private final Group cGroup_12_1_4_0 = (Group)cUnorderedGroup_12_1_4.eContents().get(0);
		private final Keyword cCityInputKeyword_12_1_4_0_0 = (Keyword)cGroup_12_1_4_0.eContents().get(0);
		private final Assignment cCityInputAssignment_12_1_4_0_1 = (Assignment)cGroup_12_1_4_0.eContents().get(1);
		private final RuleCall cCityInputAbstractContentProviderPathParserRuleCall_12_1_4_0_1_0 = (RuleCall)cCityInputAssignment_12_1_4_0_1.eContents().get(0);
		private final Group cGroup_12_1_4_1 = (Group)cUnorderedGroup_12_1_4.eContents().get(1);
		private final Keyword cStreetInputKeyword_12_1_4_1_0 = (Keyword)cGroup_12_1_4_1.eContents().get(0);
		private final Assignment cStreetInputAssignment_12_1_4_1_1 = (Assignment)cGroup_12_1_4_1.eContents().get(1);
		private final RuleCall cStreetInputAbstractContentProviderPathParserRuleCall_12_1_4_1_1_0 = (RuleCall)cStreetInputAssignment_12_1_4_1_1.eContents().get(0);
		private final Group cGroup_12_1_4_2 = (Group)cUnorderedGroup_12_1_4.eContents().get(2);
		private final Keyword cStreetNumberInputKeyword_12_1_4_2_0 = (Keyword)cGroup_12_1_4_2.eContents().get(0);
		private final Assignment cStreetNumberInputAssignment_12_1_4_2_1 = (Assignment)cGroup_12_1_4_2.eContents().get(1);
		private final RuleCall cStreetNumberInputAbstractContentProviderPathParserRuleCall_12_1_4_2_1_0 = (RuleCall)cStreetNumberInputAssignment_12_1_4_2_1.eContents().get(0);
		private final Group cGroup_12_1_4_3 = (Group)cUnorderedGroup_12_1_4.eContents().get(3);
		private final Keyword cPostalInputKeyword_12_1_4_3_0 = (Keyword)cGroup_12_1_4_3.eContents().get(0);
		private final Assignment cPostalInputAssignment_12_1_4_3_1 = (Assignment)cGroup_12_1_4_3.eContents().get(1);
		private final RuleCall cPostalInputAbstractContentProviderPathParserRuleCall_12_1_4_3_1_0 = (RuleCall)cPostalInputAssignment_12_1_4_3_1.eContents().get(0);
		private final Group cGroup_12_1_4_4 = (Group)cUnorderedGroup_12_1_4.eContents().get(4);
		private final Keyword cCountryInputKeyword_12_1_4_4_0 = (Keyword)cGroup_12_1_4_4.eContents().get(0);
		private final Assignment cCountryInputAssignment_12_1_4_4_1 = (Assignment)cGroup_12_1_4_4.eContents().get(1);
		private final RuleCall cCountryInputAbstractContentProviderPathParserRuleCall_12_1_4_4_1_0 = (RuleCall)cCountryInputAssignment_12_1_4_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12_1_5 = (Keyword)cGroup_12_1.eContents().get(5);
		private final Keyword cOutputsKeyword_12_1_6 = (Keyword)cGroup_12_1.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_12_1_7 = (Keyword)cGroup_12_1.eContents().get(7);
		private final UnorderedGroup cUnorderedGroup_12_1_8 = (UnorderedGroup)cGroup_12_1.eContents().get(8);
		private final Group cGroup_12_1_8_0 = (Group)cUnorderedGroup_12_1_8.eContents().get(0);
		private final Keyword cLatitudeOutputKeyword_12_1_8_0_0 = (Keyword)cGroup_12_1_8_0.eContents().get(0);
		private final Assignment cLatitudeAssignment_12_1_8_0_1 = (Assignment)cGroup_12_1_8_0.eContents().get(1);
		private final RuleCall cLatitudeAbstractContentProviderPathParserRuleCall_12_1_8_0_1_0 = (RuleCall)cLatitudeAssignment_12_1_8_0_1.eContents().get(0);
		private final Group cGroup_12_1_8_1 = (Group)cUnorderedGroup_12_1_8.eContents().get(1);
		private final Keyword cLongitudeOutputKeyword_12_1_8_1_0 = (Keyword)cGroup_12_1_8_1.eContents().get(0);
		private final Assignment cLongitudeAssignment_12_1_8_1_1 = (Assignment)cGroup_12_1_8_1.eContents().get(1);
		private final RuleCall cLongitudeAbstractContentProviderPathParserRuleCall_12_1_8_1_1_0 = (RuleCall)cLongitudeAssignment_12_1_8_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12_1_9 = (Keyword)cGroup_12_1.eContents().get(9);
		private final Keyword cRightParenthesisKeyword_12_1_10 = (Keyword)cGroup_12_1.eContents().get(10);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Action cContentProviderAddActionAction_13_0 = (Action)cGroup_13.eContents().get(0);
		private final Group cGroup_13_1 = (Group)cGroup_13.eContents().get(1);
		private final Keyword cContentProviderAddKeyword_13_1_0 = (Keyword)cGroup_13_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_13_1_1 = (Keyword)cGroup_13_1.eContents().get(1);
		private final Assignment cContentProviderAssignment_13_1_2 = (Assignment)cGroup_13_1.eContents().get(2);
		private final RuleCall cContentProviderContentProviderReferenceParserRuleCall_13_1_2_0 = (RuleCall)cContentProviderAssignment_13_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13_1_3 = (Keyword)cGroup_13_1.eContents().get(3);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Action cContentProviderRemoveActionAction_14_0 = (Action)cGroup_14.eContents().get(0);
		private final Group cGroup_14_1 = (Group)cGroup_14.eContents().get(1);
		private final Keyword cContentProviderRemoveKeyword_14_1_0 = (Keyword)cGroup_14_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_14_1_1 = (Keyword)cGroup_14_1.eContents().get(1);
		private final Assignment cContentProviderAssignment_14_1_2 = (Assignment)cGroup_14_1.eContents().get(2);
		private final RuleCall cContentProviderContentProviderReferenceParserRuleCall_14_1_2_0 = (RuleCall)cContentProviderAssignment_14_1_2.eContents().get(0);
		private final Keyword cWhereKeyword_14_1_3 = (Keyword)cGroup_14_1.eContents().get(3);
		private final Assignment cWhereClauseAssignment_14_1_4 = (Assignment)cGroup_14_1.eContents().get(4);
		private final RuleCall cWhereClauseWhereClauseConditionParserRuleCall_14_1_4_0 = (RuleCall)cWhereClauseAssignment_14_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_14_1_5 = (Keyword)cGroup_14_1.eContents().get(5);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final Action cContentProviderGetActionAction_15_0 = (Action)cGroup_15.eContents().get(0);
		private final Group cGroup_15_1 = (Group)cGroup_15.eContents().get(1);
		private final Keyword cContentProviderGetKeyword_15_1_0 = (Keyword)cGroup_15_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_15_1_1 = (Keyword)cGroup_15_1.eContents().get(1);
		private final Assignment cContentProviderAssignment_15_1_2 = (Assignment)cGroup_15_1.eContents().get(2);
		private final RuleCall cContentProviderAbstractProviderReferenceParserRuleCall_15_1_2_0 = (RuleCall)cContentProviderAssignment_15_1_2.eContents().get(0);
		private final Group cGroup_15_1_3 = (Group)cGroup_15_1.eContents().get(3);
		private final Keyword cWhereKeyword_15_1_3_0 = (Keyword)cGroup_15_1_3.eContents().get(0);
		private final Assignment cWhereClauseAssignment_15_1_3_1 = (Assignment)cGroup_15_1_3.eContents().get(1);
		private final RuleCall cWhereClauseWhereClauseConditionParserRuleCall_15_1_3_1_0 = (RuleCall)cWhereClauseAssignment_15_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_15_1_4 = (Keyword)cGroup_15_1.eContents().get(4);
		
		/// *
		// * SimpleActions are simple tasks that can be used by the user to declare operations that the app shall perform.
		// * / SimpleAction: // virtual actions that are replaced during preprocessing
		//	{ProcessChainProceedAction} "ProcessChainProceed" | {ProcessChainReverseAction} "ProcessChainReverse" |
		//	{ProcessChainGotoAction} "ProcessChainGoto" "(" pcStep=[ProcessChainStep|QUALIFIED_NAME] ")" |
		//	{SetProcessChainAction} "SetProcessChain" "(" processChain=[ProcessChain] ")" | // core actions that have to be supported by the platform
		//	{GotoViewAction} ("GotoView" "(" view=AbstractViewGUIElementRef ")") | {DisableAction} ("Disable" "("
		//	inputField=AbstractViewGUIElementRef ")") | {EnableAction} ("Enable" "(" inputField=AbstractViewGUIElementRef ")") |
		//	{DisplayMessageAction} ("DisplayMessage" "(" message=SimpleExpression ")") | {ContentProviderOperationAction}
		//	("ContentProviderOperation" "(" operation=AllowedOperation contentProvider=AbstractProviderReference ")") |
		//	{ContentProviderResetAction} ("ContentProviderReset" "(" contentProvider=ContentProviderReference ")") |
		//	{FireEventAction} ("FireEvent" "(" workflowEvent=WorkflowEvent ")") | {WebServiceCallAction} ("WebServiceCall"
		//	webServiceCall=[WebServiceCall]) | {LocationAction} ("Location" "(" "inputs" "(" ("cityInput"
		//	cityInput=AbstractContentProviderPath & "streetInput" streetInput=AbstractContentProviderPath & ("streetNumberInput"
		//	streetNumberInput=AbstractContentProviderPath)? & "postalInput" postalInput=AbstractContentProviderPath &
		//	"countryInput" countryInput=AbstractContentProviderPath) ")" "outputs" "(" ("latitudeOutput"
		//	latitude=AbstractContentProviderPath & "longitudeOutput" longitude=AbstractContentProviderPath) ")" ")") | // TODO -- multi-valued content provider, not supported yet
		//	{ContentProviderAddAction} ("ContentProviderAdd" "(" contentProvider=ContentProviderReference ")") |
		//	{ContentProviderRemoveAction} ("ContentProviderRemove" "(" contentProvider=ContentProviderReference "where"
		//	whereClause=WhereClauseCondition ")") | // TODO -- does not make sense as action; maybe allow getters as follows :contentProviderRef(first where Customer.name equals "John").name
		//	{ContentProviderGetAction} ("ContentProviderGet" "(" contentProvider=AbstractProviderReference ("where"
		//	whereClause=WhereClauseCondition)? ")");
		@Override public ParserRule getRule() { return rule; }

		//// virtual actions that are replaced during preprocessing
		//{ProcessChainProceedAction} "ProcessChainProceed" | {ProcessChainReverseAction} "ProcessChainReverse" |
		//{ProcessChainGotoAction} "ProcessChainGoto" "(" pcStep=[ProcessChainStep|QUALIFIED_NAME] ")" | {SetProcessChainAction}
		//"SetProcessChain" "(" processChain=[ProcessChain] ")" | // core actions that have to be supported by the platform
		//{GotoViewAction} ("GotoView" "(" view=AbstractViewGUIElementRef ")") | {DisableAction} ("Disable" "("
		//inputField=AbstractViewGUIElementRef ")") | {EnableAction} ("Enable" "(" inputField=AbstractViewGUIElementRef ")") |
		//{DisplayMessageAction} ("DisplayMessage" "(" message=SimpleExpression ")") | {ContentProviderOperationAction}
		//("ContentProviderOperation" "(" operation=AllowedOperation contentProvider=AbstractProviderReference ")") |
		//{ContentProviderResetAction} ("ContentProviderReset" "(" contentProvider=ContentProviderReference ")") |
		//{FireEventAction} ("FireEvent" "(" workflowEvent=WorkflowEvent ")") | {WebServiceCallAction} ("WebServiceCall"
		//webServiceCall=[WebServiceCall]) | {LocationAction} ("Location" "(" "inputs" "(" ("cityInput"
		//cityInput=AbstractContentProviderPath & "streetInput" streetInput=AbstractContentProviderPath & ("streetNumberInput"
		//streetNumberInput=AbstractContentProviderPath)? & "postalInput" postalInput=AbstractContentProviderPath &
		//"countryInput" countryInput=AbstractContentProviderPath) ")" "outputs" "(" ("latitudeOutput"
		//latitude=AbstractContentProviderPath & "longitudeOutput" longitude=AbstractContentProviderPath) ")" ")") | // TODO -- multi-valued content provider, not supported yet
		//{ContentProviderAddAction} ("ContentProviderAdd" "(" contentProvider=ContentProviderReference ")") |
		//{ContentProviderRemoveAction} ("ContentProviderRemove" "(" contentProvider=ContentProviderReference "where"
		//whereClause=WhereClauseCondition ")") | // TODO -- does not make sense as action; maybe allow getters as follows :contentProviderRef(first where Customer.name equals "John").name
		//{ContentProviderGetAction} ("ContentProviderGet" "(" contentProvider=AbstractProviderReference ("where"
		//whereClause=WhereClauseCondition)? ")")
		public Alternatives getAlternatives() { return cAlternatives; }

		//// virtual actions that are replaced during preprocessing
		//{ProcessChainProceedAction} "ProcessChainProceed"
		public Group getGroup_0() { return cGroup_0; }

		//// virtual actions that are replaced during preprocessing
		//{ProcessChainProceedAction}
		public Action getProcessChainProceedActionAction_0_0() { return cProcessChainProceedActionAction_0_0; }

		//"ProcessChainProceed"
		public Keyword getProcessChainProceedKeyword_0_1() { return cProcessChainProceedKeyword_0_1; }

		//{ProcessChainReverseAction} "ProcessChainReverse"
		public Group getGroup_1() { return cGroup_1; }

		//{ProcessChainReverseAction}
		public Action getProcessChainReverseActionAction_1_0() { return cProcessChainReverseActionAction_1_0; }

		//"ProcessChainReverse"
		public Keyword getProcessChainReverseKeyword_1_1() { return cProcessChainReverseKeyword_1_1; }

		//{ProcessChainGotoAction} "ProcessChainGoto" "(" pcStep=[ProcessChainStep|QUALIFIED_NAME] ")"
		public Group getGroup_2() { return cGroup_2; }

		//{ProcessChainGotoAction}
		public Action getProcessChainGotoActionAction_2_0() { return cProcessChainGotoActionAction_2_0; }

		//"ProcessChainGoto"
		public Keyword getProcessChainGotoKeyword_2_1() { return cProcessChainGotoKeyword_2_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }

		//pcStep=[ProcessChainStep|QUALIFIED_NAME]
		public Assignment getPcStepAssignment_2_3() { return cPcStepAssignment_2_3; }

		//[ProcessChainStep|QUALIFIED_NAME]
		public CrossReference getPcStepProcessChainStepCrossReference_2_3_0() { return cPcStepProcessChainStepCrossReference_2_3_0; }

		//QUALIFIED_NAME
		public RuleCall getPcStepProcessChainStepQUALIFIED_NAMEParserRuleCall_2_3_0_1() { return cPcStepProcessChainStepQUALIFIED_NAMEParserRuleCall_2_3_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }

		//{SetProcessChainAction} "SetProcessChain" "(" processChain=[ProcessChain] ")"
		public Group getGroup_3() { return cGroup_3; }

		//{SetProcessChainAction}
		public Action getSetProcessChainActionAction_3_0() { return cSetProcessChainActionAction_3_0; }

		//"SetProcessChain"
		public Keyword getSetProcessChainKeyword_3_1() { return cSetProcessChainKeyword_3_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }

		//processChain=[ProcessChain]
		public Assignment getProcessChainAssignment_3_3() { return cProcessChainAssignment_3_3; }

		//[ProcessChain]
		public CrossReference getProcessChainProcessChainCrossReference_3_3_0() { return cProcessChainProcessChainCrossReference_3_3_0; }

		//ID
		public RuleCall getProcessChainProcessChainIDTerminalRuleCall_3_3_0_1() { return cProcessChainProcessChainIDTerminalRuleCall_3_3_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }

		//// core actions that have to be supported by the platform
		//{GotoViewAction} ("GotoView" "(" view=AbstractViewGUIElementRef ")")
		public Group getGroup_4() { return cGroup_4; }

		//// core actions that have to be supported by the platform
		//{GotoViewAction}
		public Action getGotoViewActionAction_4_0() { return cGotoViewActionAction_4_0; }

		//"GotoView" "(" view=AbstractViewGUIElementRef ")"
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"GotoView"
		public Keyword getGotoViewKeyword_4_1_0() { return cGotoViewKeyword_4_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_1_1() { return cLeftParenthesisKeyword_4_1_1; }

		//view=AbstractViewGUIElementRef
		public Assignment getViewAssignment_4_1_2() { return cViewAssignment_4_1_2; }

		//AbstractViewGUIElementRef
		public RuleCall getViewAbstractViewGUIElementRefParserRuleCall_4_1_2_0() { return cViewAbstractViewGUIElementRefParserRuleCall_4_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_1_3() { return cRightParenthesisKeyword_4_1_3; }

		//{DisableAction} ("Disable" "(" inputField=AbstractViewGUIElementRef ")")
		public Group getGroup_5() { return cGroup_5; }

		//{DisableAction}
		public Action getDisableActionAction_5_0() { return cDisableActionAction_5_0; }

		//"Disable" "(" inputField=AbstractViewGUIElementRef ")"
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"Disable"
		public Keyword getDisableKeyword_5_1_0() { return cDisableKeyword_5_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_1_1() { return cLeftParenthesisKeyword_5_1_1; }

		//inputField=AbstractViewGUIElementRef
		public Assignment getInputFieldAssignment_5_1_2() { return cInputFieldAssignment_5_1_2; }

		//AbstractViewGUIElementRef
		public RuleCall getInputFieldAbstractViewGUIElementRefParserRuleCall_5_1_2_0() { return cInputFieldAbstractViewGUIElementRefParserRuleCall_5_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_1_3() { return cRightParenthesisKeyword_5_1_3; }

		//{EnableAction} ("Enable" "(" inputField=AbstractViewGUIElementRef ")")
		public Group getGroup_6() { return cGroup_6; }

		//{EnableAction}
		public Action getEnableActionAction_6_0() { return cEnableActionAction_6_0; }

		//"Enable" "(" inputField=AbstractViewGUIElementRef ")"
		public Group getGroup_6_1() { return cGroup_6_1; }

		//"Enable"
		public Keyword getEnableKeyword_6_1_0() { return cEnableKeyword_6_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_1_1() { return cLeftParenthesisKeyword_6_1_1; }

		//inputField=AbstractViewGUIElementRef
		public Assignment getInputFieldAssignment_6_1_2() { return cInputFieldAssignment_6_1_2; }

		//AbstractViewGUIElementRef
		public RuleCall getInputFieldAbstractViewGUIElementRefParserRuleCall_6_1_2_0() { return cInputFieldAbstractViewGUIElementRefParserRuleCall_6_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_1_3() { return cRightParenthesisKeyword_6_1_3; }

		//{DisplayMessageAction} ("DisplayMessage" "(" message=SimpleExpression ")")
		public Group getGroup_7() { return cGroup_7; }

		//{DisplayMessageAction}
		public Action getDisplayMessageActionAction_7_0() { return cDisplayMessageActionAction_7_0; }

		//"DisplayMessage" "(" message=SimpleExpression ")"
		public Group getGroup_7_1() { return cGroup_7_1; }

		//"DisplayMessage"
		public Keyword getDisplayMessageKeyword_7_1_0() { return cDisplayMessageKeyword_7_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_7_1_1() { return cLeftParenthesisKeyword_7_1_1; }

		//message=SimpleExpression
		public Assignment getMessageAssignment_7_1_2() { return cMessageAssignment_7_1_2; }

		//SimpleExpression
		public RuleCall getMessageSimpleExpressionParserRuleCall_7_1_2_0() { return cMessageSimpleExpressionParserRuleCall_7_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7_1_3() { return cRightParenthesisKeyword_7_1_3; }

		//{ContentProviderOperationAction} ("ContentProviderOperation" "(" operation=AllowedOperation
		//contentProvider=AbstractProviderReference ")")
		public Group getGroup_8() { return cGroup_8; }

		//{ContentProviderOperationAction}
		public Action getContentProviderOperationActionAction_8_0() { return cContentProviderOperationActionAction_8_0; }

		//"ContentProviderOperation" "(" operation=AllowedOperation contentProvider=AbstractProviderReference ")"
		public Group getGroup_8_1() { return cGroup_8_1; }

		//"ContentProviderOperation"
		public Keyword getContentProviderOperationKeyword_8_1_0() { return cContentProviderOperationKeyword_8_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_8_1_1() { return cLeftParenthesisKeyword_8_1_1; }

		//operation=AllowedOperation
		public Assignment getOperationAssignment_8_1_2() { return cOperationAssignment_8_1_2; }

		//AllowedOperation
		public RuleCall getOperationAllowedOperationEnumRuleCall_8_1_2_0() { return cOperationAllowedOperationEnumRuleCall_8_1_2_0; }

		//contentProvider=AbstractProviderReference
		public Assignment getContentProviderAssignment_8_1_3() { return cContentProviderAssignment_8_1_3; }

		//AbstractProviderReference
		public RuleCall getContentProviderAbstractProviderReferenceParserRuleCall_8_1_3_0() { return cContentProviderAbstractProviderReferenceParserRuleCall_8_1_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8_1_4() { return cRightParenthesisKeyword_8_1_4; }

		//{ContentProviderResetAction} ("ContentProviderReset" "(" contentProvider=ContentProviderReference ")")
		public Group getGroup_9() { return cGroup_9; }

		//{ContentProviderResetAction}
		public Action getContentProviderResetActionAction_9_0() { return cContentProviderResetActionAction_9_0; }

		//"ContentProviderReset" "(" contentProvider=ContentProviderReference ")"
		public Group getGroup_9_1() { return cGroup_9_1; }

		//"ContentProviderReset"
		public Keyword getContentProviderResetKeyword_9_1_0() { return cContentProviderResetKeyword_9_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_9_1_1() { return cLeftParenthesisKeyword_9_1_1; }

		//contentProvider=ContentProviderReference
		public Assignment getContentProviderAssignment_9_1_2() { return cContentProviderAssignment_9_1_2; }

		//ContentProviderReference
		public RuleCall getContentProviderContentProviderReferenceParserRuleCall_9_1_2_0() { return cContentProviderContentProviderReferenceParserRuleCall_9_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9_1_3() { return cRightParenthesisKeyword_9_1_3; }

		//{FireEventAction} ("FireEvent" "(" workflowEvent=WorkflowEvent ")")
		public Group getGroup_10() { return cGroup_10; }

		//{FireEventAction}
		public Action getFireEventActionAction_10_0() { return cFireEventActionAction_10_0; }

		//"FireEvent" "(" workflowEvent=WorkflowEvent ")"
		public Group getGroup_10_1() { return cGroup_10_1; }

		//"FireEvent"
		public Keyword getFireEventKeyword_10_1_0() { return cFireEventKeyword_10_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_10_1_1() { return cLeftParenthesisKeyword_10_1_1; }

		//workflowEvent=WorkflowEvent
		public Assignment getWorkflowEventAssignment_10_1_2() { return cWorkflowEventAssignment_10_1_2; }

		//WorkflowEvent
		public RuleCall getWorkflowEventWorkflowEventParserRuleCall_10_1_2_0() { return cWorkflowEventWorkflowEventParserRuleCall_10_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10_1_3() { return cRightParenthesisKeyword_10_1_3; }

		//{WebServiceCallAction} ("WebServiceCall" webServiceCall=[WebServiceCall])
		public Group getGroup_11() { return cGroup_11; }

		//{WebServiceCallAction}
		public Action getWebServiceCallActionAction_11_0() { return cWebServiceCallActionAction_11_0; }

		//"WebServiceCall" webServiceCall=[WebServiceCall]
		public Group getGroup_11_1() { return cGroup_11_1; }

		//"WebServiceCall"
		public Keyword getWebServiceCallKeyword_11_1_0() { return cWebServiceCallKeyword_11_1_0; }

		//webServiceCall=[WebServiceCall]
		public Assignment getWebServiceCallAssignment_11_1_1() { return cWebServiceCallAssignment_11_1_1; }

		//[WebServiceCall]
		public CrossReference getWebServiceCallWebServiceCallCrossReference_11_1_1_0() { return cWebServiceCallWebServiceCallCrossReference_11_1_1_0; }

		//ID
		public RuleCall getWebServiceCallWebServiceCallIDTerminalRuleCall_11_1_1_0_1() { return cWebServiceCallWebServiceCallIDTerminalRuleCall_11_1_1_0_1; }

		//{LocationAction} ("Location" "(" "inputs" "(" ("cityInput" cityInput=AbstractContentProviderPath & "streetInput"
		//streetInput=AbstractContentProviderPath & ("streetNumberInput" streetNumberInput=AbstractContentProviderPath)? &
		//"postalInput" postalInput=AbstractContentProviderPath & "countryInput" countryInput=AbstractContentProviderPath) ")"
		//"outputs" "(" ("latitudeOutput" latitude=AbstractContentProviderPath & "longitudeOutput"
		//longitude=AbstractContentProviderPath) ")" ")")
		public Group getGroup_12() { return cGroup_12; }

		//{LocationAction}
		public Action getLocationActionAction_12_0() { return cLocationActionAction_12_0; }

		//"Location" "(" "inputs" "(" ("cityInput" cityInput=AbstractContentProviderPath & "streetInput"
		//streetInput=AbstractContentProviderPath & ("streetNumberInput" streetNumberInput=AbstractContentProviderPath)? &
		//"postalInput" postalInput=AbstractContentProviderPath & "countryInput" countryInput=AbstractContentProviderPath) ")"
		//"outputs" "(" ("latitudeOutput" latitude=AbstractContentProviderPath & "longitudeOutput"
		//longitude=AbstractContentProviderPath) ")" ")"
		public Group getGroup_12_1() { return cGroup_12_1; }

		//"Location"
		public Keyword getLocationKeyword_12_1_0() { return cLocationKeyword_12_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_12_1_1() { return cLeftParenthesisKeyword_12_1_1; }

		//"inputs"
		public Keyword getInputsKeyword_12_1_2() { return cInputsKeyword_12_1_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_12_1_3() { return cLeftParenthesisKeyword_12_1_3; }

		//"cityInput" cityInput=AbstractContentProviderPath & "streetInput" streetInput=AbstractContentProviderPath &
		//("streetNumberInput" streetNumberInput=AbstractContentProviderPath)? & "postalInput"
		//postalInput=AbstractContentProviderPath & "countryInput" countryInput=AbstractContentProviderPath
		public UnorderedGroup getUnorderedGroup_12_1_4() { return cUnorderedGroup_12_1_4; }

		//"cityInput" cityInput=AbstractContentProviderPath
		public Group getGroup_12_1_4_0() { return cGroup_12_1_4_0; }

		//"cityInput"
		public Keyword getCityInputKeyword_12_1_4_0_0() { return cCityInputKeyword_12_1_4_0_0; }

		//cityInput=AbstractContentProviderPath
		public Assignment getCityInputAssignment_12_1_4_0_1() { return cCityInputAssignment_12_1_4_0_1; }

		//AbstractContentProviderPath
		public RuleCall getCityInputAbstractContentProviderPathParserRuleCall_12_1_4_0_1_0() { return cCityInputAbstractContentProviderPathParserRuleCall_12_1_4_0_1_0; }

		//"streetInput" streetInput=AbstractContentProviderPath
		public Group getGroup_12_1_4_1() { return cGroup_12_1_4_1; }

		//"streetInput"
		public Keyword getStreetInputKeyword_12_1_4_1_0() { return cStreetInputKeyword_12_1_4_1_0; }

		//streetInput=AbstractContentProviderPath
		public Assignment getStreetInputAssignment_12_1_4_1_1() { return cStreetInputAssignment_12_1_4_1_1; }

		//AbstractContentProviderPath
		public RuleCall getStreetInputAbstractContentProviderPathParserRuleCall_12_1_4_1_1_0() { return cStreetInputAbstractContentProviderPathParserRuleCall_12_1_4_1_1_0; }

		//("streetNumberInput" streetNumberInput=AbstractContentProviderPath)?
		public Group getGroup_12_1_4_2() { return cGroup_12_1_4_2; }

		//"streetNumberInput"
		public Keyword getStreetNumberInputKeyword_12_1_4_2_0() { return cStreetNumberInputKeyword_12_1_4_2_0; }

		//streetNumberInput=AbstractContentProviderPath
		public Assignment getStreetNumberInputAssignment_12_1_4_2_1() { return cStreetNumberInputAssignment_12_1_4_2_1; }

		//AbstractContentProviderPath
		public RuleCall getStreetNumberInputAbstractContentProviderPathParserRuleCall_12_1_4_2_1_0() { return cStreetNumberInputAbstractContentProviderPathParserRuleCall_12_1_4_2_1_0; }

		//"postalInput" postalInput=AbstractContentProviderPath
		public Group getGroup_12_1_4_3() { return cGroup_12_1_4_3; }

		//"postalInput"
		public Keyword getPostalInputKeyword_12_1_4_3_0() { return cPostalInputKeyword_12_1_4_3_0; }

		//postalInput=AbstractContentProviderPath
		public Assignment getPostalInputAssignment_12_1_4_3_1() { return cPostalInputAssignment_12_1_4_3_1; }

		//AbstractContentProviderPath
		public RuleCall getPostalInputAbstractContentProviderPathParserRuleCall_12_1_4_3_1_0() { return cPostalInputAbstractContentProviderPathParserRuleCall_12_1_4_3_1_0; }

		//"countryInput" countryInput=AbstractContentProviderPath
		public Group getGroup_12_1_4_4() { return cGroup_12_1_4_4; }

		//"countryInput"
		public Keyword getCountryInputKeyword_12_1_4_4_0() { return cCountryInputKeyword_12_1_4_4_0; }

		//countryInput=AbstractContentProviderPath
		public Assignment getCountryInputAssignment_12_1_4_4_1() { return cCountryInputAssignment_12_1_4_4_1; }

		//AbstractContentProviderPath
		public RuleCall getCountryInputAbstractContentProviderPathParserRuleCall_12_1_4_4_1_0() { return cCountryInputAbstractContentProviderPathParserRuleCall_12_1_4_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_12_1_5() { return cRightParenthesisKeyword_12_1_5; }

		//"outputs"
		public Keyword getOutputsKeyword_12_1_6() { return cOutputsKeyword_12_1_6; }

		//"("
		public Keyword getLeftParenthesisKeyword_12_1_7() { return cLeftParenthesisKeyword_12_1_7; }

		//"latitudeOutput" latitude=AbstractContentProviderPath & "longitudeOutput" longitude=AbstractContentProviderPath
		public UnorderedGroup getUnorderedGroup_12_1_8() { return cUnorderedGroup_12_1_8; }

		//"latitudeOutput" latitude=AbstractContentProviderPath
		public Group getGroup_12_1_8_0() { return cGroup_12_1_8_0; }

		//"latitudeOutput"
		public Keyword getLatitudeOutputKeyword_12_1_8_0_0() { return cLatitudeOutputKeyword_12_1_8_0_0; }

		//latitude=AbstractContentProviderPath
		public Assignment getLatitudeAssignment_12_1_8_0_1() { return cLatitudeAssignment_12_1_8_0_1; }

		//AbstractContentProviderPath
		public RuleCall getLatitudeAbstractContentProviderPathParserRuleCall_12_1_8_0_1_0() { return cLatitudeAbstractContentProviderPathParserRuleCall_12_1_8_0_1_0; }

		//"longitudeOutput" longitude=AbstractContentProviderPath
		public Group getGroup_12_1_8_1() { return cGroup_12_1_8_1; }

		//"longitudeOutput"
		public Keyword getLongitudeOutputKeyword_12_1_8_1_0() { return cLongitudeOutputKeyword_12_1_8_1_0; }

		//longitude=AbstractContentProviderPath
		public Assignment getLongitudeAssignment_12_1_8_1_1() { return cLongitudeAssignment_12_1_8_1_1; }

		//AbstractContentProviderPath
		public RuleCall getLongitudeAbstractContentProviderPathParserRuleCall_12_1_8_1_1_0() { return cLongitudeAbstractContentProviderPathParserRuleCall_12_1_8_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_12_1_9() { return cRightParenthesisKeyword_12_1_9; }

		//")"
		public Keyword getRightParenthesisKeyword_12_1_10() { return cRightParenthesisKeyword_12_1_10; }

		//// TODO -- multi-valued content provider, not supported yet
		//{ContentProviderAddAction} ("ContentProviderAdd" "(" contentProvider=ContentProviderReference ")")
		public Group getGroup_13() { return cGroup_13; }

		//// TODO -- multi-valued content provider, not supported yet
		//{ContentProviderAddAction}
		public Action getContentProviderAddActionAction_13_0() { return cContentProviderAddActionAction_13_0; }

		//"ContentProviderAdd" "(" contentProvider=ContentProviderReference ")"
		public Group getGroup_13_1() { return cGroup_13_1; }

		//"ContentProviderAdd"
		public Keyword getContentProviderAddKeyword_13_1_0() { return cContentProviderAddKeyword_13_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_13_1_1() { return cLeftParenthesisKeyword_13_1_1; }

		//contentProvider=ContentProviderReference
		public Assignment getContentProviderAssignment_13_1_2() { return cContentProviderAssignment_13_1_2; }

		//ContentProviderReference
		public RuleCall getContentProviderContentProviderReferenceParserRuleCall_13_1_2_0() { return cContentProviderContentProviderReferenceParserRuleCall_13_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_13_1_3() { return cRightParenthesisKeyword_13_1_3; }

		//{ContentProviderRemoveAction} ("ContentProviderRemove" "(" contentProvider=ContentProviderReference "where"
		//whereClause=WhereClauseCondition ")")
		public Group getGroup_14() { return cGroup_14; }

		//{ContentProviderRemoveAction}
		public Action getContentProviderRemoveActionAction_14_0() { return cContentProviderRemoveActionAction_14_0; }

		//"ContentProviderRemove" "(" contentProvider=ContentProviderReference "where" whereClause=WhereClauseCondition ")"
		public Group getGroup_14_1() { return cGroup_14_1; }

		//"ContentProviderRemove"
		public Keyword getContentProviderRemoveKeyword_14_1_0() { return cContentProviderRemoveKeyword_14_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_14_1_1() { return cLeftParenthesisKeyword_14_1_1; }

		//contentProvider=ContentProviderReference
		public Assignment getContentProviderAssignment_14_1_2() { return cContentProviderAssignment_14_1_2; }

		//ContentProviderReference
		public RuleCall getContentProviderContentProviderReferenceParserRuleCall_14_1_2_0() { return cContentProviderContentProviderReferenceParserRuleCall_14_1_2_0; }

		//"where"
		public Keyword getWhereKeyword_14_1_3() { return cWhereKeyword_14_1_3; }

		//whereClause=WhereClauseCondition
		public Assignment getWhereClauseAssignment_14_1_4() { return cWhereClauseAssignment_14_1_4; }

		//WhereClauseCondition
		public RuleCall getWhereClauseWhereClauseConditionParserRuleCall_14_1_4_0() { return cWhereClauseWhereClauseConditionParserRuleCall_14_1_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_14_1_5() { return cRightParenthesisKeyword_14_1_5; }

		//// TODO -- does not make sense as action; maybe allow getters as follows :contentProviderRef(first where Customer.name equals "John").name
		//{ContentProviderGetAction} ("ContentProviderGet" "(" contentProvider=AbstractProviderReference ("where"
		//whereClause=WhereClauseCondition)? ")")
		public Group getGroup_15() { return cGroup_15; }

		//// TODO -- does not make sense as action; maybe allow getters as follows :contentProviderRef(first where Customer.name equals "John").name
		//{ContentProviderGetAction}
		public Action getContentProviderGetActionAction_15_0() { return cContentProviderGetActionAction_15_0; }

		//"ContentProviderGet" "(" contentProvider=AbstractProviderReference ("where" whereClause=WhereClauseCondition)? ")"
		public Group getGroup_15_1() { return cGroup_15_1; }

		//"ContentProviderGet"
		public Keyword getContentProviderGetKeyword_15_1_0() { return cContentProviderGetKeyword_15_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_15_1_1() { return cLeftParenthesisKeyword_15_1_1; }

		//contentProvider=AbstractProviderReference
		public Assignment getContentProviderAssignment_15_1_2() { return cContentProviderAssignment_15_1_2; }

		//AbstractProviderReference
		public RuleCall getContentProviderAbstractProviderReferenceParserRuleCall_15_1_2_0() { return cContentProviderAbstractProviderReferenceParserRuleCall_15_1_2_0; }

		//("where" whereClause=WhereClauseCondition)?
		public Group getGroup_15_1_3() { return cGroup_15_1_3; }

		//"where"
		public Keyword getWhereKeyword_15_1_3_0() { return cWhereKeyword_15_1_3_0; }

		//whereClause=WhereClauseCondition
		public Assignment getWhereClauseAssignment_15_1_3_1() { return cWhereClauseAssignment_15_1_3_1; }

		//WhereClauseCondition
		public RuleCall getWhereClauseWhereClauseConditionParserRuleCall_15_1_3_1_0() { return cWhereClauseWhereClauseConditionParserRuleCall_15_1_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_15_1_4() { return cRightParenthesisKeyword_15_1_4; }
	}

	public class CustomCodeFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CustomCodeFragment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cBindKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cAlternatives_0_1.eContents().get(0);
		private final Action cEventBindingTaskAction_0_1_0_0 = (Action)cGroup_0_1_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1_0_1 = (Alternatives)cGroup_0_1_0.eContents().get(1);
		private final Keyword cActionKeyword_0_1_0_1_0 = (Keyword)cAlternatives_0_1_0_1.eContents().get(0);
		private final Keyword cActionsKeyword_0_1_0_1_1 = (Keyword)cAlternatives_0_1_0_1.eContents().get(1);
		private final Assignment cActionsAssignment_0_1_0_2 = (Assignment)cGroup_0_1_0.eContents().get(2);
		private final RuleCall cActionsActionDefParserRuleCall_0_1_0_2_0 = (RuleCall)cActionsAssignment_0_1_0_2.eContents().get(0);
		private final Keyword cOnKeyword_0_1_0_3 = (Keyword)cGroup_0_1_0.eContents().get(3);
		private final Assignment cEventsAssignment_0_1_0_4 = (Assignment)cGroup_0_1_0.eContents().get(4);
		private final RuleCall cEventsEventDefParserRuleCall_0_1_0_4_0 = (RuleCall)cEventsAssignment_0_1_0_4.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cAlternatives_0_1.eContents().get(1);
		private final Action cValidatorBindingTaskAction_0_1_1_0 = (Action)cGroup_0_1_1.eContents().get(0);
		private final Alternatives cAlternatives_0_1_1_1 = (Alternatives)cGroup_0_1_1.eContents().get(1);
		private final Keyword cValidatorKeyword_0_1_1_1_0 = (Keyword)cAlternatives_0_1_1_1.eContents().get(0);
		private final Keyword cValidatorsKeyword_0_1_1_1_1 = (Keyword)cAlternatives_0_1_1_1.eContents().get(1);
		private final Assignment cValidatorsAssignment_0_1_1_2 = (Assignment)cGroup_0_1_1.eContents().get(2);
		private final RuleCall cValidatorsValidatorTypeParserRuleCall_0_1_1_2_0 = (RuleCall)cValidatorsAssignment_0_1_1_2.eContents().get(0);
		private final Keyword cOnKeyword_0_1_1_3 = (Keyword)cGroup_0_1_1.eContents().get(3);
		private final Assignment cReferencedFieldsAssignment_0_1_1_4 = (Assignment)cGroup_0_1_1.eContents().get(4);
		private final RuleCall cReferencedFieldsAbstractViewGUIElementRefParserRuleCall_0_1_1_4_0 = (RuleCall)cReferencedFieldsAssignment_0_1_1_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cUnbindKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Action cEventUnbindTaskAction_1_1_0_0 = (Action)cGroup_1_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_0_1 = (Alternatives)cGroup_1_1_0.eContents().get(1);
		private final Keyword cActionKeyword_1_1_0_1_0 = (Keyword)cAlternatives_1_1_0_1.eContents().get(0);
		private final Keyword cActionsKeyword_1_1_0_1_1 = (Keyword)cAlternatives_1_1_0_1.eContents().get(1);
		private final Assignment cActionsAssignment_1_1_0_2 = (Assignment)cGroup_1_1_0.eContents().get(2);
		private final RuleCall cActionsActionDefParserRuleCall_1_1_0_2_0 = (RuleCall)cActionsAssignment_1_1_0_2.eContents().get(0);
		private final Keyword cFromKeyword_1_1_0_3 = (Keyword)cGroup_1_1_0.eContents().get(3);
		private final Assignment cEventsAssignment_1_1_0_4 = (Assignment)cGroup_1_1_0.eContents().get(4);
		private final RuleCall cEventsEventDefParserRuleCall_1_1_0_4_0 = (RuleCall)cEventsAssignment_1_1_0_4.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Action cValidatorUnbindTaskAction_1_1_1_0 = (Action)cGroup_1_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1_1 = (Alternatives)cGroup_1_1_1.eContents().get(1);
		private final Keyword cValidatorKeyword_1_1_1_1_0 = (Keyword)cAlternatives_1_1_1_1.eContents().get(0);
		private final Keyword cValidatorsKeyword_1_1_1_1_1 = (Keyword)cAlternatives_1_1_1_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_1_2 = (Alternatives)cGroup_1_1_1.eContents().get(2);
		private final Assignment cValidatorsAssignment_1_1_1_2_0 = (Assignment)cAlternatives_1_1_1_2.eContents().get(0);
		private final RuleCall cValidatorsValidatorTypeParserRuleCall_1_1_1_2_0_0 = (RuleCall)cValidatorsAssignment_1_1_1_2_0.eContents().get(0);
		private final Assignment cAllTypesAssignment_1_1_1_2_1 = (Assignment)cAlternatives_1_1_1_2.eContents().get(1);
		private final Keyword cAllTypesAllKeyword_1_1_1_2_1_0 = (Keyword)cAllTypesAssignment_1_1_1_2_1.eContents().get(0);
		private final Keyword cFromKeyword_1_1_1_3 = (Keyword)cGroup_1_1_1.eContents().get(3);
		private final Assignment cReferencedFieldsAssignment_1_1_1_4 = (Assignment)cGroup_1_1_1.eContents().get(4);
		private final RuleCall cReferencedFieldsAbstractViewGUIElementRefParserRuleCall_1_1_1_4_0 = (RuleCall)cReferencedFieldsAssignment_1_1_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cCallKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Action cCallTaskAction_2_1_0 = (Action)cGroup_2_1.eContents().get(0);
		private final Assignment cActionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cActionActionDefParserRuleCall_2_1_1_0 = (RuleCall)cActionAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cMapKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Action cMappingTaskAction_3_1_0 = (Action)cGroup_3_1.eContents().get(0);
		private final Assignment cReferencedViewFieldAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cReferencedViewFieldAbstractViewGUIElementRefParserRuleCall_3_1_1_0 = (RuleCall)cReferencedViewFieldAssignment_3_1_1.eContents().get(0);
		private final Keyword cToKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final Assignment cPathDefinitionAssignment_3_1_3 = (Assignment)cGroup_3_1.eContents().get(3);
		private final RuleCall cPathDefinitionAbstractContentProviderPathParserRuleCall_3_1_3_0 = (RuleCall)cPathDefinitionAssignment_3_1_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cUnmapKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Action cUnmappingTaskAction_4_1_0 = (Action)cGroup_4_1.eContents().get(0);
		private final Assignment cReferencedViewFieldAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cReferencedViewFieldAbstractViewGUIElementRefParserRuleCall_4_1_1_0 = (RuleCall)cReferencedViewFieldAssignment_4_1_1.eContents().get(0);
		private final Keyword cFromKeyword_4_1_2 = (Keyword)cGroup_4_1.eContents().get(2);
		private final Assignment cPathDefinitionAssignment_4_1_3 = (Assignment)cGroup_4_1.eContents().get(3);
		private final RuleCall cPathDefinitionAbstractContentProviderPathParserRuleCall_4_1_3_0 = (RuleCall)cPathDefinitionAssignment_4_1_3.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cSetKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Group cGroup_5_1_0 = (Group)cAlternatives_5_1.eContents().get(0);
		private final RuleCall cContentProviderPathParserRuleCall_5_1_0_0 = (RuleCall)cGroup_5_1_0.eContents().get(0);
		private final Action cAttributeSetTaskPathDefinitionAction_5_1_0_1 = (Action)cGroup_5_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_5_1_0_2 = (Keyword)cGroup_5_1_0.eContents().get(2);
		private final Assignment cSourceAssignment_5_1_0_3 = (Assignment)cGroup_5_1_0.eContents().get(3);
		private final RuleCall cSourceSimpleExpressionParserRuleCall_5_1_0_3_0 = (RuleCall)cSourceAssignment_5_1_0_3.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cAlternatives_5_1.eContents().get(1);
		private final RuleCall cContentProviderReferenceParserRuleCall_5_1_1_0 = (RuleCall)cGroup_5_1_1.eContents().get(0);
		private final Action cContentProviderSetTaskContentProviderAction_5_1_1_1 = (Action)cGroup_5_1_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_5_1_1_2 = (Keyword)cGroup_5_1_1.eContents().get(2);
		private final Assignment cSourceAssignment_5_1_1_3 = (Assignment)cGroup_5_1_1.eContents().get(3);
		private final RuleCall cSourceSimpleExpressionParserRuleCall_5_1_1_3_0 = (RuleCall)cSourceAssignment_5_1_1_3.eContents().get(0);
		private final Group cGroup_5_1_2 = (Group)cAlternatives_5_1.eContents().get(2);
		private final RuleCall cAbstractViewGUIElementRefParserRuleCall_5_1_2_0 = (RuleCall)cGroup_5_1_2.eContents().get(0);
		private final Action cViewElementSetTaskReferencedViewFieldAction_5_1_2_1 = (Action)cGroup_5_1_2.eContents().get(1);
		private final Keyword cEqualsSignKeyword_5_1_2_2 = (Keyword)cGroup_5_1_2.eContents().get(2);
		private final Assignment cSourceAssignment_5_1_2_3 = (Assignment)cGroup_5_1_2.eContents().get(3);
		private final RuleCall cSourceSimpleExpressionParserRuleCall_5_1_2_3_0 = (RuleCall)cSourceAssignment_5_1_2_3.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cIfKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Action cConditionalCodeFragmentAction_6_1_0 = (Action)cGroup_6_1.eContents().get(0);
		private final Assignment cIfAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cIfIfCodeBlockParserRuleCall_6_1_1_0 = (RuleCall)cIfAssignment_6_1_1.eContents().get(0);
		private final Group cGroup_6_1_2 = (Group)cGroup_6_1.eContents().get(2);
		private final Keyword cElseifKeyword_6_1_2_0 = (Keyword)cGroup_6_1_2.eContents().get(0);
		private final Assignment cElseifsAssignment_6_1_2_1 = (Assignment)cGroup_6_1_2.eContents().get(1);
		private final RuleCall cElseifsIfCodeBlockParserRuleCall_6_1_2_1_0 = (RuleCall)cElseifsAssignment_6_1_2_1.eContents().get(0);
		private final Group cGroup_6_1_3 = (Group)cGroup_6_1.eContents().get(3);
		private final Keyword cElseKeyword_6_1_3_0 = (Keyword)cGroup_6_1_3.eContents().get(0);
		private final Assignment cElseAssignment_6_1_3_1 = (Assignment)cGroup_6_1_3.eContents().get(1);
		private final RuleCall cElseElseCodeBlockParserRuleCall_6_1_3_1_0 = (RuleCall)cElseAssignment_6_1_3_1.eContents().get(0);
		
		///////////////////////////////////////
		//// Controller layer => Custom code
		///////////////////////////////////////
		/// *
		// * A CustomCodeFragment defines the possible commands and tasks that can be declared in a CustomAction.
		// * 
		// * TODO define all keywords that are supported by our language
		// * TODO provide possibility to implement arbitrary code (in theory)
		// * / CustomCodeFragment:
		//	"bind" ({EventBindingTask} ("action" | "actions") actions+=ActionDef+ "on" events+=EventDef+ | {ValidatorBindingTask}
		//	("validator" | "validators") validators+=ValidatorType+ "on" referencedFields+=AbstractViewGUIElementRef+) | "unbind"
		//	({EventUnbindTask} ("action" | "actions") actions+=ActionDef+ "from" events+=EventDef+ | {ValidatorUnbindTask}
		//	("validator" | "validators") (validators+=ValidatorType+ | allTypes?="all") "from"
		//	referencedFields+=AbstractViewGUIElementRef+) | "call" ({CallTask} action=ActionDef) | "map" ({MappingTask}
		//	referencedViewField=AbstractViewGUIElementRef "to" pathDefinition=AbstractContentProviderPath) | "unmap"
		//	({UnmappingTask} referencedViewField=AbstractViewGUIElementRef "from" pathDefinition=AbstractContentProviderPath) |
		//	"set" (ContentProviderPath {AttributeSetTask.pathDefinition=current} "=" source=SimpleExpression |
		//	ContentProviderReference {ContentProviderSetTask.contentProvider=current} "=" source=SimpleExpression |
		//	AbstractViewGUIElementRef {ViewElementSetTask.referencedViewField=current} "=" source=SimpleExpression) | "if"
		//	({ConditionalCodeFragment} if=IfCodeBlock ("elseif" elseifs+=IfCodeBlock)* ("else" else=ElseCodeBlock)?);
		@Override public ParserRule getRule() { return rule; }

		//"bind" ({EventBindingTask} ("action" | "actions") actions+=ActionDef+ "on" events+=EventDef+ | {ValidatorBindingTask}
		//("validator" | "validators") validators+=ValidatorType+ "on" referencedFields+=AbstractViewGUIElementRef+) | "unbind"
		//({EventUnbindTask} ("action" | "actions") actions+=ActionDef+ "from" events+=EventDef+ | {ValidatorUnbindTask}
		//("validator" | "validators") (validators+=ValidatorType+ | allTypes?="all") "from"
		//referencedFields+=AbstractViewGUIElementRef+) | "call" ({CallTask} action=ActionDef) | "map" ({MappingTask}
		//referencedViewField=AbstractViewGUIElementRef "to" pathDefinition=AbstractContentProviderPath) | "unmap"
		//({UnmappingTask} referencedViewField=AbstractViewGUIElementRef "from" pathDefinition=AbstractContentProviderPath) |
		//"set" (ContentProviderPath {AttributeSetTask.pathDefinition=current} "=" source=SimpleExpression |
		//ContentProviderReference {ContentProviderSetTask.contentProvider=current} "=" source=SimpleExpression |
		//AbstractViewGUIElementRef {ViewElementSetTask.referencedViewField=current} "=" source=SimpleExpression) | "if"
		//({ConditionalCodeFragment} if=IfCodeBlock ("elseif" elseifs+=IfCodeBlock)* ("else" else=ElseCodeBlock)?)
		public Alternatives getAlternatives() { return cAlternatives; }

		//"bind" ({EventBindingTask} ("action" | "actions") actions+=ActionDef+ "on" events+=EventDef+ | {ValidatorBindingTask}
		//("validator" | "validators") validators+=ValidatorType+ "on" referencedFields+=AbstractViewGUIElementRef+)
		public Group getGroup_0() { return cGroup_0; }

		//"bind"
		public Keyword getBindKeyword_0_0() { return cBindKeyword_0_0; }

		//{EventBindingTask} ("action" | "actions") actions+=ActionDef+ "on" events+=EventDef+ | {ValidatorBindingTask}
		//("validator" | "validators") validators+=ValidatorType+ "on" referencedFields+=AbstractViewGUIElementRef+
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//{EventBindingTask} ("action" | "actions") actions+=ActionDef+ "on" events+=EventDef+
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }

		//{EventBindingTask}
		public Action getEventBindingTaskAction_0_1_0_0() { return cEventBindingTaskAction_0_1_0_0; }

		//"action" | "actions"
		public Alternatives getAlternatives_0_1_0_1() { return cAlternatives_0_1_0_1; }

		//"action"
		public Keyword getActionKeyword_0_1_0_1_0() { return cActionKeyword_0_1_0_1_0; }

		//"actions"
		public Keyword getActionsKeyword_0_1_0_1_1() { return cActionsKeyword_0_1_0_1_1; }

		//actions+=ActionDef+
		public Assignment getActionsAssignment_0_1_0_2() { return cActionsAssignment_0_1_0_2; }

		//ActionDef
		public RuleCall getActionsActionDefParserRuleCall_0_1_0_2_0() { return cActionsActionDefParserRuleCall_0_1_0_2_0; }

		//"on"
		public Keyword getOnKeyword_0_1_0_3() { return cOnKeyword_0_1_0_3; }

		//events+=EventDef+
		public Assignment getEventsAssignment_0_1_0_4() { return cEventsAssignment_0_1_0_4; }

		//EventDef
		public RuleCall getEventsEventDefParserRuleCall_0_1_0_4_0() { return cEventsEventDefParserRuleCall_0_1_0_4_0; }

		//{ValidatorBindingTask} ("validator" | "validators") validators+=ValidatorType+ "on"
		//referencedFields+=AbstractViewGUIElementRef+
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }

		//{ValidatorBindingTask}
		public Action getValidatorBindingTaskAction_0_1_1_0() { return cValidatorBindingTaskAction_0_1_1_0; }

		//"validator" | "validators"
		public Alternatives getAlternatives_0_1_1_1() { return cAlternatives_0_1_1_1; }

		//"validator"
		public Keyword getValidatorKeyword_0_1_1_1_0() { return cValidatorKeyword_0_1_1_1_0; }

		//"validators"
		public Keyword getValidatorsKeyword_0_1_1_1_1() { return cValidatorsKeyword_0_1_1_1_1; }

		//validators+=ValidatorType+
		public Assignment getValidatorsAssignment_0_1_1_2() { return cValidatorsAssignment_0_1_1_2; }

		//ValidatorType
		public RuleCall getValidatorsValidatorTypeParserRuleCall_0_1_1_2_0() { return cValidatorsValidatorTypeParserRuleCall_0_1_1_2_0; }

		//"on"
		public Keyword getOnKeyword_0_1_1_3() { return cOnKeyword_0_1_1_3; }

		//referencedFields+=AbstractViewGUIElementRef+
		public Assignment getReferencedFieldsAssignment_0_1_1_4() { return cReferencedFieldsAssignment_0_1_1_4; }

		//AbstractViewGUIElementRef
		public RuleCall getReferencedFieldsAbstractViewGUIElementRefParserRuleCall_0_1_1_4_0() { return cReferencedFieldsAbstractViewGUIElementRefParserRuleCall_0_1_1_4_0; }

		//"unbind" ({EventUnbindTask} ("action" | "actions") actions+=ActionDef+ "from" events+=EventDef+ | {ValidatorUnbindTask}
		//("validator" | "validators") (validators+=ValidatorType+ | allTypes?="all") "from"
		//referencedFields+=AbstractViewGUIElementRef+)
		public Group getGroup_1() { return cGroup_1; }

		//"unbind"
		public Keyword getUnbindKeyword_1_0() { return cUnbindKeyword_1_0; }

		//{EventUnbindTask} ("action" | "actions") actions+=ActionDef+ "from" events+=EventDef+ | {ValidatorUnbindTask}
		//("validator" | "validators") (validators+=ValidatorType+ | allTypes?="all") "from"
		//referencedFields+=AbstractViewGUIElementRef+
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//{EventUnbindTask} ("action" | "actions") actions+=ActionDef+ "from" events+=EventDef+
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{EventUnbindTask}
		public Action getEventUnbindTaskAction_1_1_0_0() { return cEventUnbindTaskAction_1_1_0_0; }

		//"action" | "actions"
		public Alternatives getAlternatives_1_1_0_1() { return cAlternatives_1_1_0_1; }

		//"action"
		public Keyword getActionKeyword_1_1_0_1_0() { return cActionKeyword_1_1_0_1_0; }

		//"actions"
		public Keyword getActionsKeyword_1_1_0_1_1() { return cActionsKeyword_1_1_0_1_1; }

		//actions+=ActionDef+
		public Assignment getActionsAssignment_1_1_0_2() { return cActionsAssignment_1_1_0_2; }

		//ActionDef
		public RuleCall getActionsActionDefParserRuleCall_1_1_0_2_0() { return cActionsActionDefParserRuleCall_1_1_0_2_0; }

		//"from"
		public Keyword getFromKeyword_1_1_0_3() { return cFromKeyword_1_1_0_3; }

		//events+=EventDef+
		public Assignment getEventsAssignment_1_1_0_4() { return cEventsAssignment_1_1_0_4; }

		//EventDef
		public RuleCall getEventsEventDefParserRuleCall_1_1_0_4_0() { return cEventsEventDefParserRuleCall_1_1_0_4_0; }

		//{ValidatorUnbindTask} ("validator" | "validators") (validators+=ValidatorType+ | allTypes?="all") "from"
		//referencedFields+=AbstractViewGUIElementRef+
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//{ValidatorUnbindTask}
		public Action getValidatorUnbindTaskAction_1_1_1_0() { return cValidatorUnbindTaskAction_1_1_1_0; }

		//"validator" | "validators"
		public Alternatives getAlternatives_1_1_1_1() { return cAlternatives_1_1_1_1; }

		//"validator"
		public Keyword getValidatorKeyword_1_1_1_1_0() { return cValidatorKeyword_1_1_1_1_0; }

		//"validators"
		public Keyword getValidatorsKeyword_1_1_1_1_1() { return cValidatorsKeyword_1_1_1_1_1; }

		//validators+=ValidatorType+ | allTypes?="all"
		public Alternatives getAlternatives_1_1_1_2() { return cAlternatives_1_1_1_2; }

		//validators+=ValidatorType+
		public Assignment getValidatorsAssignment_1_1_1_2_0() { return cValidatorsAssignment_1_1_1_2_0; }

		//ValidatorType
		public RuleCall getValidatorsValidatorTypeParserRuleCall_1_1_1_2_0_0() { return cValidatorsValidatorTypeParserRuleCall_1_1_1_2_0_0; }

		//allTypes?="all"
		public Assignment getAllTypesAssignment_1_1_1_2_1() { return cAllTypesAssignment_1_1_1_2_1; }

		//"all"
		public Keyword getAllTypesAllKeyword_1_1_1_2_1_0() { return cAllTypesAllKeyword_1_1_1_2_1_0; }

		//"from"
		public Keyword getFromKeyword_1_1_1_3() { return cFromKeyword_1_1_1_3; }

		//referencedFields+=AbstractViewGUIElementRef+
		public Assignment getReferencedFieldsAssignment_1_1_1_4() { return cReferencedFieldsAssignment_1_1_1_4; }

		//AbstractViewGUIElementRef
		public RuleCall getReferencedFieldsAbstractViewGUIElementRefParserRuleCall_1_1_1_4_0() { return cReferencedFieldsAbstractViewGUIElementRefParserRuleCall_1_1_1_4_0; }

		//"call" ({CallTask} action=ActionDef)
		public Group getGroup_2() { return cGroup_2; }

		//"call"
		public Keyword getCallKeyword_2_0() { return cCallKeyword_2_0; }

		//{CallTask} action=ActionDef
		public Group getGroup_2_1() { return cGroup_2_1; }

		//{CallTask}
		public Action getCallTaskAction_2_1_0() { return cCallTaskAction_2_1_0; }

		//action=ActionDef
		public Assignment getActionAssignment_2_1_1() { return cActionAssignment_2_1_1; }

		//ActionDef
		public RuleCall getActionActionDefParserRuleCall_2_1_1_0() { return cActionActionDefParserRuleCall_2_1_1_0; }

		//"map" ({MappingTask} referencedViewField=AbstractViewGUIElementRef "to" pathDefinition=AbstractContentProviderPath)
		public Group getGroup_3() { return cGroup_3; }

		//"map"
		public Keyword getMapKeyword_3_0() { return cMapKeyword_3_0; }

		//{MappingTask} referencedViewField=AbstractViewGUIElementRef "to" pathDefinition=AbstractContentProviderPath
		public Group getGroup_3_1() { return cGroup_3_1; }

		//{MappingTask}
		public Action getMappingTaskAction_3_1_0() { return cMappingTaskAction_3_1_0; }

		//referencedViewField=AbstractViewGUIElementRef
		public Assignment getReferencedViewFieldAssignment_3_1_1() { return cReferencedViewFieldAssignment_3_1_1; }

		//AbstractViewGUIElementRef
		public RuleCall getReferencedViewFieldAbstractViewGUIElementRefParserRuleCall_3_1_1_0() { return cReferencedViewFieldAbstractViewGUIElementRefParserRuleCall_3_1_1_0; }

		//"to"
		public Keyword getToKeyword_3_1_2() { return cToKeyword_3_1_2; }

		//pathDefinition=AbstractContentProviderPath
		public Assignment getPathDefinitionAssignment_3_1_3() { return cPathDefinitionAssignment_3_1_3; }

		//AbstractContentProviderPath
		public RuleCall getPathDefinitionAbstractContentProviderPathParserRuleCall_3_1_3_0() { return cPathDefinitionAbstractContentProviderPathParserRuleCall_3_1_3_0; }

		//"unmap" ({UnmappingTask} referencedViewField=AbstractViewGUIElementRef "from"
		//pathDefinition=AbstractContentProviderPath)
		public Group getGroup_4() { return cGroup_4; }

		//"unmap"
		public Keyword getUnmapKeyword_4_0() { return cUnmapKeyword_4_0; }

		//{UnmappingTask} referencedViewField=AbstractViewGUIElementRef "from" pathDefinition=AbstractContentProviderPath
		public Group getGroup_4_1() { return cGroup_4_1; }

		//{UnmappingTask}
		public Action getUnmappingTaskAction_4_1_0() { return cUnmappingTaskAction_4_1_0; }

		//referencedViewField=AbstractViewGUIElementRef
		public Assignment getReferencedViewFieldAssignment_4_1_1() { return cReferencedViewFieldAssignment_4_1_1; }

		//AbstractViewGUIElementRef
		public RuleCall getReferencedViewFieldAbstractViewGUIElementRefParserRuleCall_4_1_1_0() { return cReferencedViewFieldAbstractViewGUIElementRefParserRuleCall_4_1_1_0; }

		//"from"
		public Keyword getFromKeyword_4_1_2() { return cFromKeyword_4_1_2; }

		//pathDefinition=AbstractContentProviderPath
		public Assignment getPathDefinitionAssignment_4_1_3() { return cPathDefinitionAssignment_4_1_3; }

		//AbstractContentProviderPath
		public RuleCall getPathDefinitionAbstractContentProviderPathParserRuleCall_4_1_3_0() { return cPathDefinitionAbstractContentProviderPathParserRuleCall_4_1_3_0; }

		//"set" (ContentProviderPath {AttributeSetTask.pathDefinition=current} "=" source=SimpleExpression |
		//ContentProviderReference {ContentProviderSetTask.contentProvider=current} "=" source=SimpleExpression |
		//AbstractViewGUIElementRef {ViewElementSetTask.referencedViewField=current} "=" source=SimpleExpression)
		public Group getGroup_5() { return cGroup_5; }

		//"set"
		public Keyword getSetKeyword_5_0() { return cSetKeyword_5_0; }

		//=> ContentProviderPath {AttributeSetTask.pathDefinition=current} "=" source=SimpleExpression | ContentProviderReference
		//{ContentProviderSetTask.contentProvider=current} "=" source=SimpleExpression | AbstractViewGUIElementRef
		//{ViewElementSetTask.referencedViewField=current} "=" source=SimpleExpression
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }

		//=> ContentProviderPath {AttributeSetTask.pathDefinition=current} "=" source=SimpleExpression
		public Group getGroup_5_1_0() { return cGroup_5_1_0; }

		//=> ContentProviderPath
		public RuleCall getContentProviderPathParserRuleCall_5_1_0_0() { return cContentProviderPathParserRuleCall_5_1_0_0; }

		//{AttributeSetTask.pathDefinition=current}
		public Action getAttributeSetTaskPathDefinitionAction_5_1_0_1() { return cAttributeSetTaskPathDefinitionAction_5_1_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_5_1_0_2() { return cEqualsSignKeyword_5_1_0_2; }

		//source=SimpleExpression
		public Assignment getSourceAssignment_5_1_0_3() { return cSourceAssignment_5_1_0_3; }

		//SimpleExpression
		public RuleCall getSourceSimpleExpressionParserRuleCall_5_1_0_3_0() { return cSourceSimpleExpressionParserRuleCall_5_1_0_3_0; }

		//ContentProviderReference {ContentProviderSetTask.contentProvider=current} "=" source=SimpleExpression
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }

		//ContentProviderReference
		public RuleCall getContentProviderReferenceParserRuleCall_5_1_1_0() { return cContentProviderReferenceParserRuleCall_5_1_1_0; }

		//{ContentProviderSetTask.contentProvider=current}
		public Action getContentProviderSetTaskContentProviderAction_5_1_1_1() { return cContentProviderSetTaskContentProviderAction_5_1_1_1; }

		//"="
		public Keyword getEqualsSignKeyword_5_1_1_2() { return cEqualsSignKeyword_5_1_1_2; }

		//source=SimpleExpression
		public Assignment getSourceAssignment_5_1_1_3() { return cSourceAssignment_5_1_1_3; }

		//SimpleExpression
		public RuleCall getSourceSimpleExpressionParserRuleCall_5_1_1_3_0() { return cSourceSimpleExpressionParserRuleCall_5_1_1_3_0; }

		//AbstractViewGUIElementRef {ViewElementSetTask.referencedViewField=current} "=" source=SimpleExpression
		public Group getGroup_5_1_2() { return cGroup_5_1_2; }

		//AbstractViewGUIElementRef
		public RuleCall getAbstractViewGUIElementRefParserRuleCall_5_1_2_0() { return cAbstractViewGUIElementRefParserRuleCall_5_1_2_0; }

		//{ViewElementSetTask.referencedViewField=current}
		public Action getViewElementSetTaskReferencedViewFieldAction_5_1_2_1() { return cViewElementSetTaskReferencedViewFieldAction_5_1_2_1; }

		//"="
		public Keyword getEqualsSignKeyword_5_1_2_2() { return cEqualsSignKeyword_5_1_2_2; }

		//source=SimpleExpression
		public Assignment getSourceAssignment_5_1_2_3() { return cSourceAssignment_5_1_2_3; }

		//SimpleExpression
		public RuleCall getSourceSimpleExpressionParserRuleCall_5_1_2_3_0() { return cSourceSimpleExpressionParserRuleCall_5_1_2_3_0; }

		//"if" ({ConditionalCodeFragment} if=IfCodeBlock ("elseif" elseifs+=IfCodeBlock)* ("else" else=ElseCodeBlock)?)
		public Group getGroup_6() { return cGroup_6; }

		//"if"
		public Keyword getIfKeyword_6_0() { return cIfKeyword_6_0; }

		//{ConditionalCodeFragment} if=IfCodeBlock ("elseif" elseifs+=IfCodeBlock)* ("else" else=ElseCodeBlock)?
		public Group getGroup_6_1() { return cGroup_6_1; }

		//{ConditionalCodeFragment}
		public Action getConditionalCodeFragmentAction_6_1_0() { return cConditionalCodeFragmentAction_6_1_0; }

		//if=IfCodeBlock
		public Assignment getIfAssignment_6_1_1() { return cIfAssignment_6_1_1; }

		//IfCodeBlock
		public RuleCall getIfIfCodeBlockParserRuleCall_6_1_1_0() { return cIfIfCodeBlockParserRuleCall_6_1_1_0; }

		//("elseif" elseifs+=IfCodeBlock)*
		public Group getGroup_6_1_2() { return cGroup_6_1_2; }

		//"elseif"
		public Keyword getElseifKeyword_6_1_2_0() { return cElseifKeyword_6_1_2_0; }

		//elseifs+=IfCodeBlock
		public Assignment getElseifsAssignment_6_1_2_1() { return cElseifsAssignment_6_1_2_1; }

		//IfCodeBlock
		public RuleCall getElseifsIfCodeBlockParserRuleCall_6_1_2_1_0() { return cElseifsIfCodeBlockParserRuleCall_6_1_2_1_0; }

		//("else" else=ElseCodeBlock)?
		public Group getGroup_6_1_3() { return cGroup_6_1_3; }

		//"else"
		public Keyword getElseKeyword_6_1_3_0() { return cElseKeyword_6_1_3_0; }

		//else=ElseCodeBlock
		public Assignment getElseAssignment_6_1_3_1() { return cElseAssignment_6_1_3_1; }

		//ElseCodeBlock
		public RuleCall getElseElseCodeBlockParserRuleCall_6_1_3_1_0() { return cElseElseCodeBlockParserRuleCall_6_1_3_1_0; }
	}

	public class IfCodeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfCodeBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCodeFragmentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCodeFragmentsCustomCodeFragmentParserRuleCall_4_0 = (RuleCall)cCodeFragmentsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IfCodeBlock:
		//	"(" condition=Condition ")" "{" codeFragments+=CustomCodeFragment* "}";
		@Override public ParserRule getRule() { return rule; }

		//"(" condition=Condition ")" "{" codeFragments+=CustomCodeFragment* "}"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//condition=Condition
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_0() { return cConditionConditionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//codeFragments+=CustomCodeFragment*
		public Assignment getCodeFragmentsAssignment_4() { return cCodeFragmentsAssignment_4; }

		//CustomCodeFragment
		public RuleCall getCodeFragmentsCustomCodeFragmentParserRuleCall_4_0() { return cCodeFragmentsCustomCodeFragmentParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ElseCodeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElseCodeBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElseCodeBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCodeFragmentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodeFragmentsCustomCodeFragmentParserRuleCall_2_0 = (RuleCall)cCodeFragmentsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ElseCodeBlock:
		//	{ElseCodeBlock} "{" codeFragments+=CustomCodeFragment* "}";
		@Override public ParserRule getRule() { return rule; }

		//{ElseCodeBlock} "{" codeFragments+=CustomCodeFragment* "}"
		public Group getGroup() { return cGroup; }

		//{ElseCodeBlock}
		public Action getElseCodeBlockAction_0() { return cElseCodeBlockAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//codeFragments+=CustomCodeFragment*
		public Assignment getCodeFragmentsAssignment_2() { return cCodeFragmentsAssignment_2; }

		//CustomCodeFragment
		public RuleCall getCodeFragmentsCustomCodeFragmentParserRuleCall_2_0() { return cCodeFragmentsCustomCodeFragmentParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ContainsCodeFragmentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContainsCodeFragments");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCustomActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfCodeBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cElseCodeBlockParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/// *
		// * Helper Rule. Each element that can contain codeFragments should inherit from ContainsCodeFragments. So, the code of the generators and
		// * the preprocessing does not have to be adapted each time a new element that has a codeFragments attribute is added.
		// * / ContainsCodeFragments:
		//	CustomAction | IfCodeBlock | ElseCodeBlock;
		@Override public ParserRule getRule() { return rule; }

		//CustomAction | IfCodeBlock | ElseCodeBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//CustomAction
		public RuleCall getCustomActionParserRuleCall_0() { return cCustomActionParserRuleCall_0; }

		//IfCodeBlock
		public RuleCall getIfCodeBlockParserRuleCall_1() { return cIfCodeBlockParserRuleCall_1; }

		//ElseCodeBlock
		public RuleCall getElseCodeBlockParserRuleCall_2() { return cElseCodeBlockParserRuleCall_2; }
	}

	public class AbstractViewGUIElementRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractViewGUIElementRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefViewElementTypeCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefViewElementTypeQUALIFIED_NAMEParserRuleCall_0_0_1 = (RuleCall)cRefViewElementTypeCrossReference_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTailAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTailNestedAbstractViewGUIElementRefParserRuleCall_1_0_0 = (RuleCall)cTailAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Assignment cPathAssignment_1_1_1_0 = (Assignment)cAlternatives_1_1_1.eContents().get(0);
		private final RuleCall cPathEntityPathParserRuleCall_1_1_1_0_0 = (RuleCall)cPathAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cSimpleTypeAssignment_1_1_1_1 = (Assignment)cAlternatives_1_1_1.eContents().get(1);
		private final RuleCall cSimpleTypeSimpleDataTypeWrapperParserRuleCall_1_1_1_1_0 = (RuleCall)cSimpleTypeAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		/// *
		// * The AbstractViewGUIElementRef allows to reference any defined ViewGUIElement.
		// * First a top level element has to be defined in ref. In tail a recursive navigation
		// * to nested elements can be specified. If the last tail points to an
		// * AutoGeneratedContentElement path or simpleType can be used to navigate inside the
		// * Entity, the ContentProvider is bound on. This will be a reference to the auto
		// * generated ViewGUIElement containing the value of the specified Attribute.
		// * / AbstractViewGUIElementRef:
		//	ref=[ViewElementType|QUALIFIED_NAME] (tail=NestedAbstractViewGUIElementRef | "[" (path=EntityPath |
		//	simpleType=SimpleDataTypeWrapper) "]")?;
		@Override public ParserRule getRule() { return rule; }

		//ref=[ViewElementType|QUALIFIED_NAME] (tail=NestedAbstractViewGUIElementRef | "[" (path=EntityPath |
		//simpleType=SimpleDataTypeWrapper) "]")?
		public Group getGroup() { return cGroup; }

		//ref=[ViewElementType|QUALIFIED_NAME]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//[ViewElementType|QUALIFIED_NAME]
		public CrossReference getRefViewElementTypeCrossReference_0_0() { return cRefViewElementTypeCrossReference_0_0; }

		//QUALIFIED_NAME
		public RuleCall getRefViewElementTypeQUALIFIED_NAMEParserRuleCall_0_0_1() { return cRefViewElementTypeQUALIFIED_NAMEParserRuleCall_0_0_1; }

		//(tail=NestedAbstractViewGUIElementRef | "[" (path=EntityPath | simpleType=SimpleDataTypeWrapper) "]")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//tail=NestedAbstractViewGUIElementRef
		public Assignment getTailAssignment_1_0() { return cTailAssignment_1_0; }

		//NestedAbstractViewGUIElementRef
		public RuleCall getTailNestedAbstractViewGUIElementRefParserRuleCall_1_0_0() { return cTailNestedAbstractViewGUIElementRefParserRuleCall_1_0_0; }

		//"[" (path=EntityPath | simpleType=SimpleDataTypeWrapper) "]"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_0() { return cLeftSquareBracketKeyword_1_1_0; }

		//path=EntityPath | simpleType=SimpleDataTypeWrapper
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }

		//path=EntityPath
		public Assignment getPathAssignment_1_1_1_0() { return cPathAssignment_1_1_1_0; }

		//EntityPath
		public RuleCall getPathEntityPathParserRuleCall_1_1_1_0_0() { return cPathEntityPathParserRuleCall_1_1_1_0_0; }

		//simpleType=SimpleDataTypeWrapper
		public Assignment getSimpleTypeAssignment_1_1_1_1() { return cSimpleTypeAssignment_1_1_1_1; }

		//SimpleDataTypeWrapper
		public RuleCall getSimpleTypeSimpleDataTypeWrapperParserRuleCall_1_1_1_1_0() { return cSimpleTypeSimpleDataTypeWrapperParserRuleCall_1_1_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_2() { return cRightSquareBracketKeyword_1_1_2; }
	}

	public class NestedAbstractViewGUIElementRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NestedAbstractViewGUIElementRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefViewElementTypeCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefViewElementTypeQUALIFIED_NAMEParserRuleCall_1_0_1 = (RuleCall)cRefViewElementTypeCrossReference_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTailAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cTailNestedAbstractViewGUIElementRefParserRuleCall_2_0_0 = (RuleCall)cTailAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Alternatives cAlternatives_2_1_1 = (Alternatives)cGroup_2_1.eContents().get(1);
		private final Assignment cPathAssignment_2_1_1_0 = (Assignment)cAlternatives_2_1_1.eContents().get(0);
		private final RuleCall cPathEntityPathParserRuleCall_2_1_1_0_0 = (RuleCall)cPathAssignment_2_1_1_0.eContents().get(0);
		private final Assignment cSimpleTypeAssignment_2_1_1_1 = (Assignment)cAlternatives_2_1_1.eContents().get(1);
		private final RuleCall cSimpleTypeSimpleDataTypeWrapperParserRuleCall_2_1_1_1_0 = (RuleCall)cSimpleTypeAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		/// *
		// * The NestedAbstractViewGUIElementRef allows to point to an ViewGUIElement
		// * nested in another ViewGUIElement. In tail a recursive navigation
		// * to nested elements can be specified. If the last tail points to an
		// * AutoGeneratedContentElement path or simpleType can be used to navigate inside the
		// * Entity, the ContentProvider is bound on. This will be an reference to the auto
		// * generated ViewGUIElement containing the value of the specified Attribute.
		// * 
		// * A NestedAbstractViewGUIElementRef will result in an AbstractViewGUIElementRef.
		// * The difference and reason, why the NestedAbstractViewGUIElementRef is needed,
		// * is that AbstractViewGUIElementRef can just point to top level ViewGUIElements
		// * while NestedAbstractViewGUIElementRef can point to nested ViewGUIElements.
		// * This is important, if a ViewGUIElement referred in a ContainerElement
		// * shall be referenced.
		// * / NestedAbstractViewGUIElementRef returns AbstractViewGUIElementRef:
		//	"->" ref=[ViewElementType|QUALIFIED_NAME] (tail=NestedAbstractViewGUIElementRef | "[" (path=EntityPath |
		//	simpleType=SimpleDataTypeWrapper) "]")?;
		@Override public ParserRule getRule() { return rule; }

		//"->" ref=[ViewElementType|QUALIFIED_NAME] (tail=NestedAbstractViewGUIElementRef | "[" (path=EntityPath |
		//simpleType=SimpleDataTypeWrapper) "]")?
		public Group getGroup() { return cGroup; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }

		//ref=[ViewElementType|QUALIFIED_NAME]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[ViewElementType|QUALIFIED_NAME]
		public CrossReference getRefViewElementTypeCrossReference_1_0() { return cRefViewElementTypeCrossReference_1_0; }

		//QUALIFIED_NAME
		public RuleCall getRefViewElementTypeQUALIFIED_NAMEParserRuleCall_1_0_1() { return cRefViewElementTypeQUALIFIED_NAMEParserRuleCall_1_0_1; }

		//(tail=NestedAbstractViewGUIElementRef | "[" (path=EntityPath | simpleType=SimpleDataTypeWrapper) "]")?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//tail=NestedAbstractViewGUIElementRef
		public Assignment getTailAssignment_2_0() { return cTailAssignment_2_0; }

		//NestedAbstractViewGUIElementRef
		public RuleCall getTailNestedAbstractViewGUIElementRefParserRuleCall_2_0_0() { return cTailNestedAbstractViewGUIElementRefParserRuleCall_2_0_0; }

		//"[" (path=EntityPath | simpleType=SimpleDataTypeWrapper) "]"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }

		//path=EntityPath | simpleType=SimpleDataTypeWrapper
		public Alternatives getAlternatives_2_1_1() { return cAlternatives_2_1_1; }

		//path=EntityPath
		public Assignment getPathAssignment_2_1_1_0() { return cPathAssignment_2_1_1_0; }

		//EntityPath
		public RuleCall getPathEntityPathParserRuleCall_2_1_1_0_0() { return cPathEntityPathParserRuleCall_2_1_1_0_0; }

		//simpleType=SimpleDataTypeWrapper
		public Assignment getSimpleTypeAssignment_2_1_1_1() { return cSimpleTypeAssignment_2_1_1_1; }

		//SimpleDataTypeWrapper
		public RuleCall getSimpleTypeSimpleDataTypeWrapperParserRuleCall_2_1_1_1_0() { return cSimpleTypeSimpleDataTypeWrapperParserRuleCall_2_1_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_2() { return cRightSquareBracketKeyword_2_1_2; }
	}

	public class ActionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cActionReferenceAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cActionRefAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cActionRefActionCrossReference_0_1_0 = (CrossReference)cActionRefAssignment_0_1.eContents().get(0);
		private final RuleCall cActionRefActionQUALIFIED_NAMEParserRuleCall_0_1_0_1 = (RuleCall)cActionRefActionCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSimpleActionRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cActionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cActionSimpleActionParserRuleCall_1_1_0 = (RuleCall)cActionAssignment_1_1.eContents().get(0);
		
		/// *
		// * The ActionDef allows the user to either define a new Action or
		// * directly a SimpleAction
		// * / ActionDef:
		//	{ActionReference} actionRef=[Action|QUALIFIED_NAME] | {SimpleActionRef} action=SimpleAction;
		@Override public ParserRule getRule() { return rule; }

		//{ActionReference} actionRef=[Action|QUALIFIED_NAME] | {SimpleActionRef} action=SimpleAction
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ActionReference} actionRef=[Action|QUALIFIED_NAME]
		public Group getGroup_0() { return cGroup_0; }

		//{ActionReference}
		public Action getActionReferenceAction_0_0() { return cActionReferenceAction_0_0; }

		//actionRef=[Action|QUALIFIED_NAME]
		public Assignment getActionRefAssignment_0_1() { return cActionRefAssignment_0_1; }

		//[Action|QUALIFIED_NAME]
		public CrossReference getActionRefActionCrossReference_0_1_0() { return cActionRefActionCrossReference_0_1_0; }

		//QUALIFIED_NAME
		public RuleCall getActionRefActionQUALIFIED_NAMEParserRuleCall_0_1_0_1() { return cActionRefActionQUALIFIED_NAMEParserRuleCall_0_1_0_1; }

		//{SimpleActionRef} action=SimpleAction
		public Group getGroup_1() { return cGroup_1; }

		//{SimpleActionRef}
		public Action getSimpleActionRefAction_1_0() { return cSimpleActionRefAction_1_0; }

		//action=SimpleAction
		public Assignment getActionAssignment_1_1() { return cActionAssignment_1_1; }

		//SimpleAction
		public RuleCall getActionSimpleActionParserRuleCall_1_1_0() { return cActionSimpleActionParserRuleCall_1_1_0; }
	}

	public class EventDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractContentProviderPathParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Action cContentProviderPathEventRefPathDefinitionAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cEventAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cEventContentProviderEventTypeEnumRuleCall_0_3_0 = (RuleCall)cEventAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cAbstractProviderReferenceParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Action cContentProviderEventRefContentProviderAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cEventAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cEventContentProviderEventTypeEnumRuleCall_1_3_0 = (RuleCall)cEventAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cViewElementEventRefAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cReferencedFieldAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cReferencedFieldAbstractViewGUIElementRefParserRuleCall_2_1_0 = (RuleCall)cReferencedFieldAssignment_2_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cEventAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cEventElementEventTypeEnumRuleCall_2_3_0 = (RuleCall)cEventAssignment_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cGlobalEventRefAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cEventAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEventGlobalEventTypeEnumRuleCall_3_1_0 = (RuleCall)cEventAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cConditionalEventRefAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cEventReferenceAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cEventReferenceOnConditionEventCrossReference_4_1_0 = (CrossReference)cEventReferenceAssignment_4_1.eContents().get(0);
		private final RuleCall cEventReferenceOnConditionEventQUALIFIED_NAMEParserRuleCall_4_1_0_1 = (RuleCall)cEventReferenceOnConditionEventCrossReference_4_1_0.eContents().get(1);
		
		/// *
		// * The EventDef allows the user to refer to one of the four possible event types.
		// * / EventDef:
		//	AbstractContentProviderPath {ContentProviderPathEventRef.pathDefinition=current} "." event=ContentProviderEventType |
		//	AbstractProviderReference {ContentProviderEventRef.contentProvider=current} "." event=ContentProviderEventType |
		//	{ViewElementEventRef} referencedField=AbstractViewGUIElementRef "." event=ElementEventType | {GlobalEventRef}
		//	event=GlobalEventType | {ConditionalEventRef} eventReference=[OnConditionEvent|QUALIFIED_NAME];
		@Override public ParserRule getRule() { return rule; }

		//=> AbstractContentProviderPath {ContentProviderPathEventRef.pathDefinition=current} "." event=ContentProviderEventType |
		//AbstractProviderReference {ContentProviderEventRef.contentProvider=current} "." event=ContentProviderEventType |
		//{ViewElementEventRef} referencedField=AbstractViewGUIElementRef "." event=ElementEventType | {GlobalEventRef}
		//event=GlobalEventType | {ConditionalEventRef} eventReference=[OnConditionEvent|QUALIFIED_NAME]
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> AbstractContentProviderPath {ContentProviderPathEventRef.pathDefinition=current} "." event=ContentProviderEventType
		public Group getGroup_0() { return cGroup_0; }

		//=> AbstractContentProviderPath
		public RuleCall getAbstractContentProviderPathParserRuleCall_0_0() { return cAbstractContentProviderPathParserRuleCall_0_0; }

		//{ContentProviderPathEventRef.pathDefinition=current}
		public Action getContentProviderPathEventRefPathDefinitionAction_0_1() { return cContentProviderPathEventRefPathDefinitionAction_0_1; }

		//"."
		public Keyword getFullStopKeyword_0_2() { return cFullStopKeyword_0_2; }

		//event=ContentProviderEventType
		public Assignment getEventAssignment_0_3() { return cEventAssignment_0_3; }

		//ContentProviderEventType
		public RuleCall getEventContentProviderEventTypeEnumRuleCall_0_3_0() { return cEventContentProviderEventTypeEnumRuleCall_0_3_0; }

		//AbstractProviderReference {ContentProviderEventRef.contentProvider=current} "." event=ContentProviderEventType
		public Group getGroup_1() { return cGroup_1; }

		//AbstractProviderReference
		public RuleCall getAbstractProviderReferenceParserRuleCall_1_0() { return cAbstractProviderReferenceParserRuleCall_1_0; }

		//{ContentProviderEventRef.contentProvider=current}
		public Action getContentProviderEventRefContentProviderAction_1_1() { return cContentProviderEventRefContentProviderAction_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_2() { return cFullStopKeyword_1_2; }

		//event=ContentProviderEventType
		public Assignment getEventAssignment_1_3() { return cEventAssignment_1_3; }

		//ContentProviderEventType
		public RuleCall getEventContentProviderEventTypeEnumRuleCall_1_3_0() { return cEventContentProviderEventTypeEnumRuleCall_1_3_0; }

		//{ViewElementEventRef} referencedField=AbstractViewGUIElementRef "." event=ElementEventType
		public Group getGroup_2() { return cGroup_2; }

		//{ViewElementEventRef}
		public Action getViewElementEventRefAction_2_0() { return cViewElementEventRefAction_2_0; }

		//referencedField=AbstractViewGUIElementRef
		public Assignment getReferencedFieldAssignment_2_1() { return cReferencedFieldAssignment_2_1; }

		//AbstractViewGUIElementRef
		public RuleCall getReferencedFieldAbstractViewGUIElementRefParserRuleCall_2_1_0() { return cReferencedFieldAbstractViewGUIElementRefParserRuleCall_2_1_0; }

		//"."
		public Keyword getFullStopKeyword_2_2() { return cFullStopKeyword_2_2; }

		//event=ElementEventType
		public Assignment getEventAssignment_2_3() { return cEventAssignment_2_3; }

		//ElementEventType
		public RuleCall getEventElementEventTypeEnumRuleCall_2_3_0() { return cEventElementEventTypeEnumRuleCall_2_3_0; }

		//{GlobalEventRef} event=GlobalEventType
		public Group getGroup_3() { return cGroup_3; }

		//{GlobalEventRef}
		public Action getGlobalEventRefAction_3_0() { return cGlobalEventRefAction_3_0; }

		//event=GlobalEventType
		public Assignment getEventAssignment_3_1() { return cEventAssignment_3_1; }

		//GlobalEventType
		public RuleCall getEventGlobalEventTypeEnumRuleCall_3_1_0() { return cEventGlobalEventTypeEnumRuleCall_3_1_0; }

		//{ConditionalEventRef} eventReference=[OnConditionEvent|QUALIFIED_NAME]
		public Group getGroup_4() { return cGroup_4; }

		//{ConditionalEventRef}
		public Action getConditionalEventRefAction_4_0() { return cConditionalEventRefAction_4_0; }

		//eventReference=[OnConditionEvent|QUALIFIED_NAME]
		public Assignment getEventReferenceAssignment_4_1() { return cEventReferenceAssignment_4_1; }

		//[OnConditionEvent|QUALIFIED_NAME]
		public CrossReference getEventReferenceOnConditionEventCrossReference_4_1_0() { return cEventReferenceOnConditionEventCrossReference_4_1_0; }

		//QUALIFIED_NAME
		public RuleCall getEventReferenceOnConditionEventQUALIFIED_NAMEParserRuleCall_4_1_0_1() { return cEventReferenceOnConditionEventQUALIFIED_NAMEParserRuleCall_4_1_0_1; }
	}

	public class ValidatorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidatorType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCustomizedValidatorTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValidatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cValidatorValidatorCrossReference_0_1_0 = (CrossReference)cValidatorAssignment_0_1.eContents().get(0);
		private final RuleCall cValidatorValidatorQUALIFIED_NAMEParserRuleCall_0_1_0_1 = (RuleCall)cValidatorValidatorCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStandardValidatorTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValidatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValidatorStandardValidatorParserRuleCall_1_1_0 = (RuleCall)cValidatorAssignment_1_1.eContents().get(0);
		
		///////////////////////////////////////
		//// Controller layer => Validators
		///////////////////////////////////////
		/// *
		// * The ValidatorType allows to either specify
		// * a new Validator or to use a StandardValidator
		// * / ValidatorType:
		//	{CustomizedValidatorType} validator=[Validator|QUALIFIED_NAME] | {StandardValidatorType} validator=StandardValidator;
		@Override public ParserRule getRule() { return rule; }

		//{CustomizedValidatorType} validator=[Validator|QUALIFIED_NAME] | {StandardValidatorType} validator=StandardValidator
		public Alternatives getAlternatives() { return cAlternatives; }

		//{CustomizedValidatorType} validator=[Validator|QUALIFIED_NAME]
		public Group getGroup_0() { return cGroup_0; }

		//{CustomizedValidatorType}
		public Action getCustomizedValidatorTypeAction_0_0() { return cCustomizedValidatorTypeAction_0_0; }

		//validator=[Validator|QUALIFIED_NAME]
		public Assignment getValidatorAssignment_0_1() { return cValidatorAssignment_0_1; }

		//[Validator|QUALIFIED_NAME]
		public CrossReference getValidatorValidatorCrossReference_0_1_0() { return cValidatorValidatorCrossReference_0_1_0; }

		//QUALIFIED_NAME
		public RuleCall getValidatorValidatorQUALIFIED_NAMEParserRuleCall_0_1_0_1() { return cValidatorValidatorQUALIFIED_NAMEParserRuleCall_0_1_0_1; }

		//{StandardValidatorType} validator=StandardValidator
		public Group getGroup_1() { return cGroup_1; }

		//{StandardValidatorType}
		public Action getStandardValidatorTypeAction_1_0() { return cStandardValidatorTypeAction_1_0; }

		//validator=StandardValidator
		public Assignment getValidatorAssignment_1_1() { return cValidatorAssignment_1_1; }

		//StandardValidator
		public RuleCall getValidatorStandardValidatorParserRuleCall_1_1_0() { return cValidatorStandardValidatorParserRuleCall_1_1_0; }
	}

	public class ValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Validator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValidatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cRegExValidatorAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cRegExValidatorKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cNameAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cNameEIDParserRuleCall_1_0_2_0 = (RuleCall)cNameAssignment_1_0_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_0_4 = (Group)cGroup_1_0.eContents().get(4);
		private final Assignment cParamsAssignment_1_0_4_0 = (Assignment)cGroup_1_0_4.eContents().get(0);
		private final RuleCall cParamsRegExValidatorParamParserRuleCall_1_0_4_0_0 = (RuleCall)cParamsAssignment_1_0_4_0.eContents().get(0);
		private final Assignment cParamsAssignment_1_0_4_1 = (Assignment)cGroup_1_0_4.eContents().get(1);
		private final RuleCall cParamsRegExValidatorParamParserRuleCall_1_0_4_1_0 = (RuleCall)cParamsAssignment_1_0_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_0_5 = (Keyword)cGroup_1_0.eContents().get(5);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cNotNullValidatorAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cNotNullValidatorKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cNameAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cNameEIDParserRuleCall_1_1_2_0 = (RuleCall)cNameAssignment_1_1_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Assignment cParamsAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cParamsValidatorMessageParamParserRuleCall_1_1_4_0 = (RuleCall)cParamsAssignment_1_1_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_5 = (Keyword)cGroup_1_1.eContents().get(5);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cNumberRangeValidatorAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cNumberRangeValidatorKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cNameAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cNameEIDParserRuleCall_1_2_2_0 = (RuleCall)cNameAssignment_1_2_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_2_3 = (Keyword)cGroup_1_2.eContents().get(3);
		private final Group cGroup_1_2_4 = (Group)cGroup_1_2.eContents().get(4);
		private final Assignment cParamsAssignment_1_2_4_0 = (Assignment)cGroup_1_2_4.eContents().get(0);
		private final RuleCall cParamsNumberRangeValidatorParamParserRuleCall_1_2_4_0_0 = (RuleCall)cParamsAssignment_1_2_4_0.eContents().get(0);
		private final Assignment cParamsAssignment_1_2_4_1 = (Assignment)cGroup_1_2_4.eContents().get(1);
		private final RuleCall cParamsNumberRangeValidatorParamParserRuleCall_1_2_4_1_0 = (RuleCall)cParamsAssignment_1_2_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2_5 = (Keyword)cGroup_1_2.eContents().get(5);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cStringRangeValidatorAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Keyword cStringRangeValidatorKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cNameAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cNameEIDParserRuleCall_1_3_2_0 = (RuleCall)cNameAssignment_1_3_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_3_3 = (Keyword)cGroup_1_3.eContents().get(3);
		private final Group cGroup_1_3_4 = (Group)cGroup_1_3.eContents().get(4);
		private final Assignment cParamsAssignment_1_3_4_0 = (Assignment)cGroup_1_3_4.eContents().get(0);
		private final RuleCall cParamsStringRangeValidatorParamParserRuleCall_1_3_4_0_0 = (RuleCall)cParamsAssignment_1_3_4_0.eContents().get(0);
		private final Assignment cParamsAssignment_1_3_4_1 = (Assignment)cGroup_1_3_4.eContents().get(1);
		private final RuleCall cParamsStringRangeValidatorParamParserRuleCall_1_3_4_1_0 = (RuleCall)cParamsAssignment_1_3_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3_5 = (Keyword)cGroup_1_3.eContents().get(5);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Action cDateRangeValidatorAction_1_4_0 = (Action)cGroup_1_4.eContents().get(0);
		private final Keyword cDateRangeValidatorKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Assignment cNameAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cNameEIDParserRuleCall_1_4_2_0 = (RuleCall)cNameAssignment_1_4_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_4_3 = (Keyword)cGroup_1_4.eContents().get(3);
		private final Group cGroup_1_4_4 = (Group)cGroup_1_4.eContents().get(4);
		private final Assignment cParamsAssignment_1_4_4_0 = (Assignment)cGroup_1_4_4.eContents().get(0);
		private final RuleCall cParamsDateRangeValidatorParamParserRuleCall_1_4_4_0_0 = (RuleCall)cParamsAssignment_1_4_4_0.eContents().get(0);
		private final Assignment cParamsAssignment_1_4_4_1 = (Assignment)cGroup_1_4_4.eContents().get(1);
		private final RuleCall cParamsDateRangeValidatorParamParserRuleCall_1_4_4_1_0 = (RuleCall)cParamsAssignment_1_4_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_4_5 = (Keyword)cGroup_1_4.eContents().get(5);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final Action cTimeRangeValidatorAction_1_5_0 = (Action)cGroup_1_5.eContents().get(0);
		private final Keyword cTimeRangeValidatorKeyword_1_5_1 = (Keyword)cGroup_1_5.eContents().get(1);
		private final Assignment cNameAssignment_1_5_2 = (Assignment)cGroup_1_5.eContents().get(2);
		private final RuleCall cNameEIDParserRuleCall_1_5_2_0 = (RuleCall)cNameAssignment_1_5_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_5_3 = (Keyword)cGroup_1_5.eContents().get(3);
		private final Group cGroup_1_5_4 = (Group)cGroup_1_5.eContents().get(4);
		private final Assignment cParamsAssignment_1_5_4_0 = (Assignment)cGroup_1_5_4.eContents().get(0);
		private final RuleCall cParamsTimeRangeValidatorParamParserRuleCall_1_5_4_0_0 = (RuleCall)cParamsAssignment_1_5_4_0.eContents().get(0);
		private final Assignment cParamsAssignment_1_5_4_1 = (Assignment)cGroup_1_5_4.eContents().get(1);
		private final RuleCall cParamsTimeRangeValidatorParamParserRuleCall_1_5_4_1_0 = (RuleCall)cParamsAssignment_1_5_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_5_5 = (Keyword)cGroup_1_5.eContents().get(5);
		private final Group cGroup_1_6 = (Group)cAlternatives_1.eContents().get(6);
		private final Action cDateTimeRangeValidatorAction_1_6_0 = (Action)cGroup_1_6.eContents().get(0);
		private final Keyword cDateTimeRangeValidatorKeyword_1_6_1 = (Keyword)cGroup_1_6.eContents().get(1);
		private final Assignment cNameAssignment_1_6_2 = (Assignment)cGroup_1_6.eContents().get(2);
		private final RuleCall cNameEIDParserRuleCall_1_6_2_0 = (RuleCall)cNameAssignment_1_6_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_6_3 = (Keyword)cGroup_1_6.eContents().get(3);
		private final Group cGroup_1_6_4 = (Group)cGroup_1_6.eContents().get(4);
		private final Assignment cParamsAssignment_1_6_4_0 = (Assignment)cGroup_1_6_4.eContents().get(0);
		private final RuleCall cParamsDateTimeRangeValidatorParamParserRuleCall_1_6_4_0_0 = (RuleCall)cParamsAssignment_1_6_4_0.eContents().get(0);
		private final Assignment cParamsAssignment_1_6_4_1 = (Assignment)cGroup_1_6_4.eContents().get(1);
		private final RuleCall cParamsDateTimeRangeValidatorParamParserRuleCall_1_6_4_1_0 = (RuleCall)cParamsAssignment_1_6_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_6_5 = (Keyword)cGroup_1_6.eContents().get(5);
		private final RuleCall cRemoteValidatorParserRuleCall_1_7 = (RuleCall)cAlternatives_1.eContents().get(7);
		
		/// *
		// * Validator allows to declare one of the supported Validators. Apart from the RemoteValidator, all validators are transformed into
		// * StandardValidators during the pre-processing.
		// * / Validator:
		//	"validator" ({RegExValidator} "RegExValidator" name=EID "{" (params+=RegExValidatorParam
		//	params+=RegExValidatorParam*) "}" | {NotNullValidator} "NotNullValidator" name=EID "{" params+=ValidatorMessageParam?
		//	"}" | {NumberRangeValidator} "NumberRangeValidator" name=EID "{" (params+=NumberRangeValidatorParam
		//	params+=NumberRangeValidatorParam*) "}" | {StringRangeValidator} "StringRangeValidator" name=EID "{"
		//	(params+=StringRangeValidatorParam params+=StringRangeValidatorParam*) "}" | {DateRangeValidator}
		//	"DateRangeValidator" name=EID "{" (params+=DateRangeValidatorParam params+=DateRangeValidatorParam*) "}" |
		//	{TimeRangeValidator} "TimeRangeValidator" name=EID "{" (params+=TimeRangeValidatorParam
		//	params+=TimeRangeValidatorParam*) "}" | {DateTimeRangeValidator} "DateTimeRangeValidator" name=EID "{"
		//	(params+=DateTimeRangeValidatorParam params+=DateTimeRangeValidatorParam*) "}" | RemoteValidator);
		@Override public ParserRule getRule() { return rule; }

		//"validator" ({RegExValidator} "RegExValidator" name=EID "{" (params+=RegExValidatorParam params+=RegExValidatorParam*)
		//"}" | {NotNullValidator} "NotNullValidator" name=EID "{" params+=ValidatorMessageParam? "}" | {NumberRangeValidator}
		//"NumberRangeValidator" name=EID "{" (params+=NumberRangeValidatorParam params+=NumberRangeValidatorParam*) "}" |
		//{StringRangeValidator} "StringRangeValidator" name=EID "{" (params+=StringRangeValidatorParam
		//params+=StringRangeValidatorParam*) "}" | {DateRangeValidator} "DateRangeValidator" name=EID "{"
		//(params+=DateRangeValidatorParam params+=DateRangeValidatorParam*) "}" | {TimeRangeValidator} "TimeRangeValidator"
		//name=EID "{" (params+=TimeRangeValidatorParam params+=TimeRangeValidatorParam*) "}" | {DateTimeRangeValidator}
		//"DateTimeRangeValidator" name=EID "{" (params+=DateTimeRangeValidatorParam params+=DateTimeRangeValidatorParam*) "}" |
		//RemoteValidator)
		public Group getGroup() { return cGroup; }

		//"validator"
		public Keyword getValidatorKeyword_0() { return cValidatorKeyword_0; }

		//{RegExValidator} "RegExValidator" name=EID "{" (params+=RegExValidatorParam params+=RegExValidatorParam*) "}" |
		//{NotNullValidator} "NotNullValidator" name=EID "{" params+=ValidatorMessageParam? "}" | {NumberRangeValidator}
		//"NumberRangeValidator" name=EID "{" (params+=NumberRangeValidatorParam params+=NumberRangeValidatorParam*) "}" |
		//{StringRangeValidator} "StringRangeValidator" name=EID "{" (params+=StringRangeValidatorParam
		//params+=StringRangeValidatorParam*) "}" | {DateRangeValidator} "DateRangeValidator" name=EID "{"
		//(params+=DateRangeValidatorParam params+=DateRangeValidatorParam*) "}" | {TimeRangeValidator} "TimeRangeValidator"
		//name=EID "{" (params+=TimeRangeValidatorParam params+=TimeRangeValidatorParam*) "}" | {DateTimeRangeValidator}
		//"DateTimeRangeValidator" name=EID "{" (params+=DateTimeRangeValidatorParam params+=DateTimeRangeValidatorParam*) "}" |
		//RemoteValidator
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{RegExValidator} "RegExValidator" name=EID "{" (params+=RegExValidatorParam params+=RegExValidatorParam*) "}"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{RegExValidator}
		public Action getRegExValidatorAction_1_0_0() { return cRegExValidatorAction_1_0_0; }

		//"RegExValidator"
		public Keyword getRegExValidatorKeyword_1_0_1() { return cRegExValidatorKeyword_1_0_1; }

		//name=EID
		public Assignment getNameAssignment_1_0_2() { return cNameAssignment_1_0_2; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0_2_0() { return cNameEIDParserRuleCall_1_0_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0_3() { return cLeftCurlyBracketKeyword_1_0_3; }

		//params+=RegExValidatorParam params+=RegExValidatorParam*
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }

		//params+=RegExValidatorParam
		public Assignment getParamsAssignment_1_0_4_0() { return cParamsAssignment_1_0_4_0; }

		//RegExValidatorParam
		public RuleCall getParamsRegExValidatorParamParserRuleCall_1_0_4_0_0() { return cParamsRegExValidatorParamParserRuleCall_1_0_4_0_0; }

		//params+=RegExValidatorParam*
		public Assignment getParamsAssignment_1_0_4_1() { return cParamsAssignment_1_0_4_1; }

		//RegExValidatorParam
		public RuleCall getParamsRegExValidatorParamParserRuleCall_1_0_4_1_0() { return cParamsRegExValidatorParamParserRuleCall_1_0_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_0_5() { return cRightCurlyBracketKeyword_1_0_5; }

		//{NotNullValidator} "NotNullValidator" name=EID "{" params+=ValidatorMessageParam? "}"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{NotNullValidator}
		public Action getNotNullValidatorAction_1_1_0() { return cNotNullValidatorAction_1_1_0; }

		//"NotNullValidator"
		public Keyword getNotNullValidatorKeyword_1_1_1() { return cNotNullValidatorKeyword_1_1_1; }

		//name=EID
		public Assignment getNameAssignment_1_1_2() { return cNameAssignment_1_1_2; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_1_2_0() { return cNameEIDParserRuleCall_1_1_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1_3() { return cLeftCurlyBracketKeyword_1_1_3; }

		//params+=ValidatorMessageParam?
		public Assignment getParamsAssignment_1_1_4() { return cParamsAssignment_1_1_4; }

		//ValidatorMessageParam
		public RuleCall getParamsValidatorMessageParamParserRuleCall_1_1_4_0() { return cParamsValidatorMessageParamParserRuleCall_1_1_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_1_5() { return cRightCurlyBracketKeyword_1_1_5; }

		//{NumberRangeValidator} "NumberRangeValidator" name=EID "{" (params+=NumberRangeValidatorParam
		//params+=NumberRangeValidatorParam*) "}"
		public Group getGroup_1_2() { return cGroup_1_2; }

		//{NumberRangeValidator}
		public Action getNumberRangeValidatorAction_1_2_0() { return cNumberRangeValidatorAction_1_2_0; }

		//"NumberRangeValidator"
		public Keyword getNumberRangeValidatorKeyword_1_2_1() { return cNumberRangeValidatorKeyword_1_2_1; }

		//name=EID
		public Assignment getNameAssignment_1_2_2() { return cNameAssignment_1_2_2; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_2_2_0() { return cNameEIDParserRuleCall_1_2_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_2_3() { return cLeftCurlyBracketKeyword_1_2_3; }

		//params+=NumberRangeValidatorParam params+=NumberRangeValidatorParam*
		public Group getGroup_1_2_4() { return cGroup_1_2_4; }

		//params+=NumberRangeValidatorParam
		public Assignment getParamsAssignment_1_2_4_0() { return cParamsAssignment_1_2_4_0; }

		//NumberRangeValidatorParam
		public RuleCall getParamsNumberRangeValidatorParamParserRuleCall_1_2_4_0_0() { return cParamsNumberRangeValidatorParamParserRuleCall_1_2_4_0_0; }

		//params+=NumberRangeValidatorParam*
		public Assignment getParamsAssignment_1_2_4_1() { return cParamsAssignment_1_2_4_1; }

		//NumberRangeValidatorParam
		public RuleCall getParamsNumberRangeValidatorParamParserRuleCall_1_2_4_1_0() { return cParamsNumberRangeValidatorParamParserRuleCall_1_2_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2_5() { return cRightCurlyBracketKeyword_1_2_5; }

		//{StringRangeValidator} "StringRangeValidator" name=EID "{" (params+=StringRangeValidatorParam
		//params+=StringRangeValidatorParam*) "}"
		public Group getGroup_1_3() { return cGroup_1_3; }

		//{StringRangeValidator}
		public Action getStringRangeValidatorAction_1_3_0() { return cStringRangeValidatorAction_1_3_0; }

		//"StringRangeValidator"
		public Keyword getStringRangeValidatorKeyword_1_3_1() { return cStringRangeValidatorKeyword_1_3_1; }

		//name=EID
		public Assignment getNameAssignment_1_3_2() { return cNameAssignment_1_3_2; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_3_2_0() { return cNameEIDParserRuleCall_1_3_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_3_3() { return cLeftCurlyBracketKeyword_1_3_3; }

		//params+=StringRangeValidatorParam params+=StringRangeValidatorParam*
		public Group getGroup_1_3_4() { return cGroup_1_3_4; }

		//params+=StringRangeValidatorParam
		public Assignment getParamsAssignment_1_3_4_0() { return cParamsAssignment_1_3_4_0; }

		//StringRangeValidatorParam
		public RuleCall getParamsStringRangeValidatorParamParserRuleCall_1_3_4_0_0() { return cParamsStringRangeValidatorParamParserRuleCall_1_3_4_0_0; }

		//params+=StringRangeValidatorParam*
		public Assignment getParamsAssignment_1_3_4_1() { return cParamsAssignment_1_3_4_1; }

		//StringRangeValidatorParam
		public RuleCall getParamsStringRangeValidatorParamParserRuleCall_1_3_4_1_0() { return cParamsStringRangeValidatorParamParserRuleCall_1_3_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3_5() { return cRightCurlyBracketKeyword_1_3_5; }

		//{DateRangeValidator} "DateRangeValidator" name=EID "{" (params+=DateRangeValidatorParam
		//params+=DateRangeValidatorParam*) "}"
		public Group getGroup_1_4() { return cGroup_1_4; }

		//{DateRangeValidator}
		public Action getDateRangeValidatorAction_1_4_0() { return cDateRangeValidatorAction_1_4_0; }

		//"DateRangeValidator"
		public Keyword getDateRangeValidatorKeyword_1_4_1() { return cDateRangeValidatorKeyword_1_4_1; }

		//name=EID
		public Assignment getNameAssignment_1_4_2() { return cNameAssignment_1_4_2; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_4_2_0() { return cNameEIDParserRuleCall_1_4_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_4_3() { return cLeftCurlyBracketKeyword_1_4_3; }

		//params+=DateRangeValidatorParam params+=DateRangeValidatorParam*
		public Group getGroup_1_4_4() { return cGroup_1_4_4; }

		//params+=DateRangeValidatorParam
		public Assignment getParamsAssignment_1_4_4_0() { return cParamsAssignment_1_4_4_0; }

		//DateRangeValidatorParam
		public RuleCall getParamsDateRangeValidatorParamParserRuleCall_1_4_4_0_0() { return cParamsDateRangeValidatorParamParserRuleCall_1_4_4_0_0; }

		//params+=DateRangeValidatorParam*
		public Assignment getParamsAssignment_1_4_4_1() { return cParamsAssignment_1_4_4_1; }

		//DateRangeValidatorParam
		public RuleCall getParamsDateRangeValidatorParamParserRuleCall_1_4_4_1_0() { return cParamsDateRangeValidatorParamParserRuleCall_1_4_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_4_5() { return cRightCurlyBracketKeyword_1_4_5; }

		//{TimeRangeValidator} "TimeRangeValidator" name=EID "{" (params+=TimeRangeValidatorParam
		//params+=TimeRangeValidatorParam*) "}"
		public Group getGroup_1_5() { return cGroup_1_5; }

		//{TimeRangeValidator}
		public Action getTimeRangeValidatorAction_1_5_0() { return cTimeRangeValidatorAction_1_5_0; }

		//"TimeRangeValidator"
		public Keyword getTimeRangeValidatorKeyword_1_5_1() { return cTimeRangeValidatorKeyword_1_5_1; }

		//name=EID
		public Assignment getNameAssignment_1_5_2() { return cNameAssignment_1_5_2; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_5_2_0() { return cNameEIDParserRuleCall_1_5_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_5_3() { return cLeftCurlyBracketKeyword_1_5_3; }

		//params+=TimeRangeValidatorParam params+=TimeRangeValidatorParam*
		public Group getGroup_1_5_4() { return cGroup_1_5_4; }

		//params+=TimeRangeValidatorParam
		public Assignment getParamsAssignment_1_5_4_0() { return cParamsAssignment_1_5_4_0; }

		//TimeRangeValidatorParam
		public RuleCall getParamsTimeRangeValidatorParamParserRuleCall_1_5_4_0_0() { return cParamsTimeRangeValidatorParamParserRuleCall_1_5_4_0_0; }

		//params+=TimeRangeValidatorParam*
		public Assignment getParamsAssignment_1_5_4_1() { return cParamsAssignment_1_5_4_1; }

		//TimeRangeValidatorParam
		public RuleCall getParamsTimeRangeValidatorParamParserRuleCall_1_5_4_1_0() { return cParamsTimeRangeValidatorParamParserRuleCall_1_5_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_5_5() { return cRightCurlyBracketKeyword_1_5_5; }

		//{DateTimeRangeValidator} "DateTimeRangeValidator" name=EID "{" (params+=DateTimeRangeValidatorParam
		//params+=DateTimeRangeValidatorParam*) "}"
		public Group getGroup_1_6() { return cGroup_1_6; }

		//{DateTimeRangeValidator}
		public Action getDateTimeRangeValidatorAction_1_6_0() { return cDateTimeRangeValidatorAction_1_6_0; }

		//"DateTimeRangeValidator"
		public Keyword getDateTimeRangeValidatorKeyword_1_6_1() { return cDateTimeRangeValidatorKeyword_1_6_1; }

		//name=EID
		public Assignment getNameAssignment_1_6_2() { return cNameAssignment_1_6_2; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_6_2_0() { return cNameEIDParserRuleCall_1_6_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_6_3() { return cLeftCurlyBracketKeyword_1_6_3; }

		//params+=DateTimeRangeValidatorParam params+=DateTimeRangeValidatorParam*
		public Group getGroup_1_6_4() { return cGroup_1_6_4; }

		//params+=DateTimeRangeValidatorParam
		public Assignment getParamsAssignment_1_6_4_0() { return cParamsAssignment_1_6_4_0; }

		//DateTimeRangeValidatorParam
		public RuleCall getParamsDateTimeRangeValidatorParamParserRuleCall_1_6_4_0_0() { return cParamsDateTimeRangeValidatorParamParserRuleCall_1_6_4_0_0; }

		//params+=DateTimeRangeValidatorParam*
		public Assignment getParamsAssignment_1_6_4_1() { return cParamsAssignment_1_6_4_1; }

		//DateTimeRangeValidatorParam
		public RuleCall getParamsDateTimeRangeValidatorParamParserRuleCall_1_6_4_1_0() { return cParamsDateTimeRangeValidatorParamParserRuleCall_1_6_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_6_5() { return cRightCurlyBracketKeyword_1_6_5; }

		//RemoteValidator
		public RuleCall getRemoteValidatorParserRuleCall_1_7() { return cRemoteValidatorParserRuleCall_1_7; }
	}

	public class StandardValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StandardValidator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStandardNotNullValidatorAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNotNullValidatorKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cParamsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cParamsValidatorMessageParamParserRuleCall_0_2_1_0 = (RuleCall)cParamsAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStandardRegExValidatorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cRegExValidatorKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cParamsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cParamsRegExValidatorParamParserRuleCall_1_3_0 = (RuleCall)cParamsAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cCommaKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cParamsAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cParamsRegExValidatorParamParserRuleCall_1_4_1_0 = (RuleCall)cParamsAssignment_1_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStandardNumberRangeValidatorAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cNumberRangeValidatorKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cParamsAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cParamsNumberRangeValidatorParamParserRuleCall_2_3_0 = (RuleCall)cParamsAssignment_2_3.eContents().get(0);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Keyword cCommaKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Assignment cParamsAssignment_2_4_1 = (Assignment)cGroup_2_4.eContents().get(1);
		private final RuleCall cParamsNumberRangeValidatorParamParserRuleCall_2_4_1_0 = (RuleCall)cParamsAssignment_2_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStandardStringRangeValidatorAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cStringRangeValidatorKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cParamsAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cParamsStringRangeValidatorParamParserRuleCall_3_3_0 = (RuleCall)cParamsAssignment_3_3.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Keyword cCommaKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cParamsAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cParamsStringRangeValidatorParamParserRuleCall_3_4_1_0 = (RuleCall)cParamsAssignment_3_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cStandardDateRangeValidatorAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cDateRangeValidatorKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cParamsAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cParamsDateRangeValidatorParamParserRuleCall_4_3_0 = (RuleCall)cParamsAssignment_4_3.eContents().get(0);
		private final Group cGroup_4_4 = (Group)cGroup_4.eContents().get(4);
		private final Keyword cCommaKeyword_4_4_0 = (Keyword)cGroup_4_4.eContents().get(0);
		private final Assignment cParamsAssignment_4_4_1 = (Assignment)cGroup_4_4.eContents().get(1);
		private final RuleCall cParamsDateRangeValidatorParamParserRuleCall_4_4_1_0 = (RuleCall)cParamsAssignment_4_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_5 = (Keyword)cGroup_4.eContents().get(5);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cStandardTimeRangeValidatorAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cTimeRangeValidatorKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cParamsAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cParamsTimeRangeValidatorParamParserRuleCall_5_3_0 = (RuleCall)cParamsAssignment_5_3.eContents().get(0);
		private final Group cGroup_5_4 = (Group)cGroup_5.eContents().get(4);
		private final Keyword cCommaKeyword_5_4_0 = (Keyword)cGroup_5_4.eContents().get(0);
		private final Assignment cParamsAssignment_5_4_1 = (Assignment)cGroup_5_4.eContents().get(1);
		private final RuleCall cParamsTimeRangeValidatorParamParserRuleCall_5_4_1_0 = (RuleCall)cParamsAssignment_5_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_5 = (Keyword)cGroup_5.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cStandardDateTimeRangeValidatorAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cDateTimeRangeValidatorKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cParamsAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cParamsDateTimeRangeValidatorParamParserRuleCall_6_3_0 = (RuleCall)cParamsAssignment_6_3.eContents().get(0);
		private final Group cGroup_6_4 = (Group)cGroup_6.eContents().get(4);
		private final Keyword cCommaKeyword_6_4_0 = (Keyword)cGroup_6_4.eContents().get(0);
		private final Assignment cParamsAssignment_6_4_1 = (Assignment)cGroup_6_4.eContents().get(1);
		private final RuleCall cParamsDateTimeRangeValidatorParamParserRuleCall_6_4_1_0 = (RuleCall)cParamsAssignment_6_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_5 = (Keyword)cGroup_6.eContents().get(5);
		
		/// *
		// * StandardValidator contains all Validators that can be directly assigned to input fields without
		// * being defined explicitly before. Each StandardValidator supports a set of parameters to allow
		// * to define the behavior of the StandardValidator.
		// * / StandardValidator:
		//	{StandardNotNullValidator} "NotNullValidator" ("(" params+=ValidatorMessageParam? ")")? | {StandardRegExValidator}
		//	"RegExValidator" "(" params+=RegExValidatorParam ("," params+=RegExValidatorParam)* ")" |
		//	{StandardNumberRangeValidator} "NumberRangeValidator" "(" params+=NumberRangeValidatorParam (","
		//	params+=NumberRangeValidatorParam)* ")" | {StandardStringRangeValidator} "StringRangeValidator" "("
		//	params+=StringRangeValidatorParam ("," params+=StringRangeValidatorParam)* ")" | {StandardDateRangeValidator}
		//	"DateRangeValidator" "(" params+=DateRangeValidatorParam ("," params+=DateRangeValidatorParam)* ")" |
		//	{StandardTimeRangeValidator} "TimeRangeValidator" "(" params+=TimeRangeValidatorParam (","
		//	params+=TimeRangeValidatorParam)* ")" | {StandardDateTimeRangeValidator} "DateTimeRangeValidator" "("
		//	params+=DateTimeRangeValidatorParam ("," params+=DateTimeRangeValidatorParam)* ")";
		@Override public ParserRule getRule() { return rule; }

		//{StandardNotNullValidator} "NotNullValidator" ("(" params+=ValidatorMessageParam? ")")? | {StandardRegExValidator}
		//"RegExValidator" "(" params+=RegExValidatorParam ("," params+=RegExValidatorParam)* ")" |
		//{StandardNumberRangeValidator} "NumberRangeValidator" "(" params+=NumberRangeValidatorParam (","
		//params+=NumberRangeValidatorParam)* ")" | {StandardStringRangeValidator} "StringRangeValidator" "("
		//params+=StringRangeValidatorParam ("," params+=StringRangeValidatorParam)* ")" | {StandardDateRangeValidator}
		//"DateRangeValidator" "(" params+=DateRangeValidatorParam ("," params+=DateRangeValidatorParam)* ")" |
		//{StandardTimeRangeValidator} "TimeRangeValidator" "(" params+=TimeRangeValidatorParam (","
		//params+=TimeRangeValidatorParam)* ")" | {StandardDateTimeRangeValidator} "DateTimeRangeValidator" "("
		//params+=DateTimeRangeValidatorParam ("," params+=DateTimeRangeValidatorParam)* ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{StandardNotNullValidator} "NotNullValidator" ("(" params+=ValidatorMessageParam? ")")?
		public Group getGroup_0() { return cGroup_0; }

		//{StandardNotNullValidator}
		public Action getStandardNotNullValidatorAction_0_0() { return cStandardNotNullValidatorAction_0_0; }

		//"NotNullValidator"
		public Keyword getNotNullValidatorKeyword_0_1() { return cNotNullValidatorKeyword_0_1; }

		//("(" params+=ValidatorMessageParam? ")")?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2_0() { return cLeftParenthesisKeyword_0_2_0; }

		//params+=ValidatorMessageParam?
		public Assignment getParamsAssignment_0_2_1() { return cParamsAssignment_0_2_1; }

		//ValidatorMessageParam
		public RuleCall getParamsValidatorMessageParamParserRuleCall_0_2_1_0() { return cParamsValidatorMessageParamParserRuleCall_0_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2_2() { return cRightParenthesisKeyword_0_2_2; }

		//{StandardRegExValidator} "RegExValidator" "(" params+=RegExValidatorParam ("," params+=RegExValidatorParam)* ")"
		public Group getGroup_1() { return cGroup_1; }

		//{StandardRegExValidator}
		public Action getStandardRegExValidatorAction_1_0() { return cStandardRegExValidatorAction_1_0; }

		//"RegExValidator"
		public Keyword getRegExValidatorKeyword_1_1() { return cRegExValidatorKeyword_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//params+=RegExValidatorParam
		public Assignment getParamsAssignment_1_3() { return cParamsAssignment_1_3; }

		//RegExValidatorParam
		public RuleCall getParamsRegExValidatorParamParserRuleCall_1_3_0() { return cParamsRegExValidatorParamParserRuleCall_1_3_0; }

		//("," params+=RegExValidatorParam)*
		public Group getGroup_1_4() { return cGroup_1_4; }

		//","
		public Keyword getCommaKeyword_1_4_0() { return cCommaKeyword_1_4_0; }

		//params+=RegExValidatorParam
		public Assignment getParamsAssignment_1_4_1() { return cParamsAssignment_1_4_1; }

		//RegExValidatorParam
		public RuleCall getParamsRegExValidatorParamParserRuleCall_1_4_1_0() { return cParamsRegExValidatorParamParserRuleCall_1_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }

		//{StandardNumberRangeValidator} "NumberRangeValidator" "(" params+=NumberRangeValidatorParam (","
		//params+=NumberRangeValidatorParam)* ")"
		public Group getGroup_2() { return cGroup_2; }

		//{StandardNumberRangeValidator}
		public Action getStandardNumberRangeValidatorAction_2_0() { return cStandardNumberRangeValidatorAction_2_0; }

		//"NumberRangeValidator"
		public Keyword getNumberRangeValidatorKeyword_2_1() { return cNumberRangeValidatorKeyword_2_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }

		//params+=NumberRangeValidatorParam
		public Assignment getParamsAssignment_2_3() { return cParamsAssignment_2_3; }

		//NumberRangeValidatorParam
		public RuleCall getParamsNumberRangeValidatorParamParserRuleCall_2_3_0() { return cParamsNumberRangeValidatorParamParserRuleCall_2_3_0; }

		//("," params+=NumberRangeValidatorParam)*
		public Group getGroup_2_4() { return cGroup_2_4; }

		//","
		public Keyword getCommaKeyword_2_4_0() { return cCommaKeyword_2_4_0; }

		//params+=NumberRangeValidatorParam
		public Assignment getParamsAssignment_2_4_1() { return cParamsAssignment_2_4_1; }

		//NumberRangeValidatorParam
		public RuleCall getParamsNumberRangeValidatorParamParserRuleCall_2_4_1_0() { return cParamsNumberRangeValidatorParamParserRuleCall_2_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }

		//{StandardStringRangeValidator} "StringRangeValidator" "(" params+=StringRangeValidatorParam (","
		//params+=StringRangeValidatorParam)* ")"
		public Group getGroup_3() { return cGroup_3; }

		//{StandardStringRangeValidator}
		public Action getStandardStringRangeValidatorAction_3_0() { return cStandardStringRangeValidatorAction_3_0; }

		//"StringRangeValidator"
		public Keyword getStringRangeValidatorKeyword_3_1() { return cStringRangeValidatorKeyword_3_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }

		//params+=StringRangeValidatorParam
		public Assignment getParamsAssignment_3_3() { return cParamsAssignment_3_3; }

		//StringRangeValidatorParam
		public RuleCall getParamsStringRangeValidatorParamParserRuleCall_3_3_0() { return cParamsStringRangeValidatorParamParserRuleCall_3_3_0; }

		//("," params+=StringRangeValidatorParam)*
		public Group getGroup_3_4() { return cGroup_3_4; }

		//","
		public Keyword getCommaKeyword_3_4_0() { return cCommaKeyword_3_4_0; }

		//params+=StringRangeValidatorParam
		public Assignment getParamsAssignment_3_4_1() { return cParamsAssignment_3_4_1; }

		//StringRangeValidatorParam
		public RuleCall getParamsStringRangeValidatorParamParserRuleCall_3_4_1_0() { return cParamsStringRangeValidatorParamParserRuleCall_3_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_5() { return cRightParenthesisKeyword_3_5; }

		//{StandardDateRangeValidator} "DateRangeValidator" "(" params+=DateRangeValidatorParam (","
		//params+=DateRangeValidatorParam)* ")"
		public Group getGroup_4() { return cGroup_4; }

		//{StandardDateRangeValidator}
		public Action getStandardDateRangeValidatorAction_4_0() { return cStandardDateRangeValidatorAction_4_0; }

		//"DateRangeValidator"
		public Keyword getDateRangeValidatorKeyword_4_1() { return cDateRangeValidatorKeyword_4_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }

		//params+=DateRangeValidatorParam
		public Assignment getParamsAssignment_4_3() { return cParamsAssignment_4_3; }

		//DateRangeValidatorParam
		public RuleCall getParamsDateRangeValidatorParamParserRuleCall_4_3_0() { return cParamsDateRangeValidatorParamParserRuleCall_4_3_0; }

		//("," params+=DateRangeValidatorParam)*
		public Group getGroup_4_4() { return cGroup_4_4; }

		//","
		public Keyword getCommaKeyword_4_4_0() { return cCommaKeyword_4_4_0; }

		//params+=DateRangeValidatorParam
		public Assignment getParamsAssignment_4_4_1() { return cParamsAssignment_4_4_1; }

		//DateRangeValidatorParam
		public RuleCall getParamsDateRangeValidatorParamParserRuleCall_4_4_1_0() { return cParamsDateRangeValidatorParamParserRuleCall_4_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_5() { return cRightParenthesisKeyword_4_5; }

		//{StandardTimeRangeValidator} "TimeRangeValidator" "(" params+=TimeRangeValidatorParam (","
		//params+=TimeRangeValidatorParam)* ")"
		public Group getGroup_5() { return cGroup_5; }

		//{StandardTimeRangeValidator}
		public Action getStandardTimeRangeValidatorAction_5_0() { return cStandardTimeRangeValidatorAction_5_0; }

		//"TimeRangeValidator"
		public Keyword getTimeRangeValidatorKeyword_5_1() { return cTimeRangeValidatorKeyword_5_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }

		//params+=TimeRangeValidatorParam
		public Assignment getParamsAssignment_5_3() { return cParamsAssignment_5_3; }

		//TimeRangeValidatorParam
		public RuleCall getParamsTimeRangeValidatorParamParserRuleCall_5_3_0() { return cParamsTimeRangeValidatorParamParserRuleCall_5_3_0; }

		//("," params+=TimeRangeValidatorParam)*
		public Group getGroup_5_4() { return cGroup_5_4; }

		//","
		public Keyword getCommaKeyword_5_4_0() { return cCommaKeyword_5_4_0; }

		//params+=TimeRangeValidatorParam
		public Assignment getParamsAssignment_5_4_1() { return cParamsAssignment_5_4_1; }

		//TimeRangeValidatorParam
		public RuleCall getParamsTimeRangeValidatorParamParserRuleCall_5_4_1_0() { return cParamsTimeRangeValidatorParamParserRuleCall_5_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_5() { return cRightParenthesisKeyword_5_5; }

		//{StandardDateTimeRangeValidator} "DateTimeRangeValidator" "(" params+=DateTimeRangeValidatorParam (","
		//params+=DateTimeRangeValidatorParam)* ")"
		public Group getGroup_6() { return cGroup_6; }

		//{StandardDateTimeRangeValidator}
		public Action getStandardDateTimeRangeValidatorAction_6_0() { return cStandardDateTimeRangeValidatorAction_6_0; }

		//"DateTimeRangeValidator"
		public Keyword getDateTimeRangeValidatorKeyword_6_1() { return cDateTimeRangeValidatorKeyword_6_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_2() { return cLeftParenthesisKeyword_6_2; }

		//params+=DateTimeRangeValidatorParam
		public Assignment getParamsAssignment_6_3() { return cParamsAssignment_6_3; }

		//DateTimeRangeValidatorParam
		public RuleCall getParamsDateTimeRangeValidatorParamParserRuleCall_6_3_0() { return cParamsDateTimeRangeValidatorParamParserRuleCall_6_3_0; }

		//("," params+=DateTimeRangeValidatorParam)*
		public Group getGroup_6_4() { return cGroup_6_4; }

		//","
		public Keyword getCommaKeyword_6_4_0() { return cCommaKeyword_6_4_0; }

		//params+=DateTimeRangeValidatorParam
		public Assignment getParamsAssignment_6_4_1() { return cParamsAssignment_6_4_1; }

		//DateTimeRangeValidatorParam
		public RuleCall getParamsDateTimeRangeValidatorParamParserRuleCall_6_4_1_0() { return cParamsDateTimeRangeValidatorParamParserRuleCall_6_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_5() { return cRightParenthesisKeyword_6_5; }
	}

	public class RemoteValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RemoteValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoteValidatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cUnorderedGroup_3.eContents().get(0);
		private final RuleCall cParamsValidatorMessageParamParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cConnectionKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cConnectionAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cConnectionRemoteConnectionCrossReference_3_1_1_0 = (CrossReference)cConnectionAssignment_3_1_1.eContents().get(0);
		private final RuleCall cConnectionRemoteConnectionIDTerminalRuleCall_3_1_1_0_1 = (RuleCall)cConnectionRemoteConnectionCrossReference_3_1_1_0.eContents().get(1);
		private final Alternatives cAlternatives_3_2 = (Alternatives)cUnorderedGroup_3.eContents().get(2);
		private final Group cGroup_3_2_0 = (Group)cAlternatives_3_2.eContents().get(0);
		private final Keyword cModelKeyword_3_2_0_0 = (Keyword)cGroup_3_2_0.eContents().get(0);
		private final Assignment cContentProviderAssignment_3_2_0_1 = (Assignment)cGroup_3_2_0.eContents().get(1);
		private final RuleCall cContentProviderContentProviderReferenceParserRuleCall_3_2_0_1_0 = (RuleCall)cContentProviderAssignment_3_2_0_1.eContents().get(0);
		private final Group cGroup_3_2_1 = (Group)cAlternatives_3_2.eContents().get(1);
		private final Keyword cAttributesKeyword_3_2_1_0 = (Keyword)cGroup_3_2_1.eContents().get(0);
		private final Assignment cProvideAttributesAssignment_3_2_1_1 = (Assignment)cGroup_3_2_1.eContents().get(1);
		private final RuleCall cProvideAttributesContentProviderPathParserRuleCall_3_2_1_1_0 = (RuleCall)cProvideAttributesAssignment_3_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * The RemoteValidator allows to use a Validator offered by the backend server.
		// * 
		// * By default only the content and id of the field on which the RemoteValidator has been assigned
		// * are transmitted to the backend server. However, additional information can be provided using the
		// * provideModel or provideAttributes keyword.
		// * / RemoteValidator:
		//	"RemoteValidator" name=EID "{" (params+=ValidatorMessageParam? & ("connection" connection=[RemoteConnection])? &
		//	("model" contentProvider=ContentProviderReference | "attributes" provideAttributes+=ContentProviderPath+)) "}";
		@Override public ParserRule getRule() { return rule; }

		//"RemoteValidator" name=EID "{" (params+=ValidatorMessageParam? & ("connection" connection=[RemoteConnection])? &
		//("model" contentProvider=ContentProviderReference | "attributes" provideAttributes+=ContentProviderPath+)) "}"
		public Group getGroup() { return cGroup; }

		//"RemoteValidator"
		public Keyword getRemoteValidatorKeyword_0() { return cRemoteValidatorKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//params+=ValidatorMessageParam? & ("connection" connection=[RemoteConnection])? & ("model"
		//contentProvider=ContentProviderReference | "attributes" provideAttributes+=ContentProviderPath+)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//params+=ValidatorMessageParam?
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }

		//ValidatorMessageParam
		public RuleCall getParamsValidatorMessageParamParserRuleCall_3_0_0() { return cParamsValidatorMessageParamParserRuleCall_3_0_0; }

		//("connection" connection=[RemoteConnection])?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"connection"
		public Keyword getConnectionKeyword_3_1_0() { return cConnectionKeyword_3_1_0; }

		//connection=[RemoteConnection]
		public Assignment getConnectionAssignment_3_1_1() { return cConnectionAssignment_3_1_1; }

		//[RemoteConnection]
		public CrossReference getConnectionRemoteConnectionCrossReference_3_1_1_0() { return cConnectionRemoteConnectionCrossReference_3_1_1_0; }

		//ID
		public RuleCall getConnectionRemoteConnectionIDTerminalRuleCall_3_1_1_0_1() { return cConnectionRemoteConnectionIDTerminalRuleCall_3_1_1_0_1; }

		//"model" contentProvider=ContentProviderReference | "attributes" provideAttributes+=ContentProviderPath+
		public Alternatives getAlternatives_3_2() { return cAlternatives_3_2; }

		//"model" contentProvider=ContentProviderReference
		public Group getGroup_3_2_0() { return cGroup_3_2_0; }

		//"model"
		public Keyword getModelKeyword_3_2_0_0() { return cModelKeyword_3_2_0_0; }

		//contentProvider=ContentProviderReference
		public Assignment getContentProviderAssignment_3_2_0_1() { return cContentProviderAssignment_3_2_0_1; }

		//ContentProviderReference
		public RuleCall getContentProviderContentProviderReferenceParserRuleCall_3_2_0_1_0() { return cContentProviderContentProviderReferenceParserRuleCall_3_2_0_1_0; }

		//"attributes" provideAttributes+=ContentProviderPath+
		public Group getGroup_3_2_1() { return cGroup_3_2_1; }

		//"attributes"
		public Keyword getAttributesKeyword_3_2_1_0() { return cAttributesKeyword_3_2_1_0; }

		//provideAttributes+=ContentProviderPath+
		public Assignment getProvideAttributesAssignment_3_2_1_1() { return cProvideAttributesAssignment_3_2_1_1; }

		//ContentProviderPath
		public RuleCall getProvideAttributesContentProviderPathParserRuleCall_3_2_1_1_0() { return cProvideAttributesContentProviderPathParserRuleCall_3_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ValidatorParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidatorParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValidatorMessageParamParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRegExValidatorParamParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumberRangeValidatorParamParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringRangeValidatorParamParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDateRangeValidatorParamParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTimeRangeValidatorParamParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDateTimeRangeValidatorParamParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		/// *
		// * ValidatorParam is used to define a common super type of all specific ValidatorParams.
		// * 
		// * The ValidatorParam is not used in the language but will be used by the generators. Therefore
		// * it can be seen as a workaround to manipulate the meta model, that will be built by Xtext.
		// * / ValidatorParam:
		//	ValidatorMessageParam | RegExValidatorParam | NumberRangeValidatorParam | StringRangeValidatorParam |
		//	DateRangeValidatorParam | TimeRangeValidatorParam | DateTimeRangeValidatorParam;
		@Override public ParserRule getRule() { return rule; }

		//ValidatorMessageParam | RegExValidatorParam | NumberRangeValidatorParam | StringRangeValidatorParam |
		//DateRangeValidatorParam | TimeRangeValidatorParam | DateTimeRangeValidatorParam
		public Alternatives getAlternatives() { return cAlternatives; }

		//ValidatorMessageParam
		public RuleCall getValidatorMessageParamParserRuleCall_0() { return cValidatorMessageParamParserRuleCall_0; }

		//RegExValidatorParam
		public RuleCall getRegExValidatorParamParserRuleCall_1() { return cRegExValidatorParamParserRuleCall_1; }

		//NumberRangeValidatorParam
		public RuleCall getNumberRangeValidatorParamParserRuleCall_2() { return cNumberRangeValidatorParamParserRuleCall_2; }

		//StringRangeValidatorParam
		public RuleCall getStringRangeValidatorParamParserRuleCall_3() { return cStringRangeValidatorParamParserRuleCall_3; }

		//DateRangeValidatorParam
		public RuleCall getDateRangeValidatorParamParserRuleCall_4() { return cDateRangeValidatorParamParserRuleCall_4; }

		//TimeRangeValidatorParam
		public RuleCall getTimeRangeValidatorParamParserRuleCall_5() { return cTimeRangeValidatorParamParserRuleCall_5; }

		//DateTimeRangeValidatorParam
		public RuleCall getDateTimeRangeValidatorParamParserRuleCall_6() { return cDateTimeRangeValidatorParamParserRuleCall_6; }
	}

	public class ValidatorMessageParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidatorMessageParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMessageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMessageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMessageSimpleExpressionParserRuleCall_1_0 = (RuleCall)cMessageAssignment_1.eContents().get(0);
		
		/// *
		// * ValidatorMessageParam provides the possibility to define a message, that will be shown to the
		// * user if the validation fails.
		// * / ValidatorMessageParam:
		//	"message" message=SimpleExpression;
		@Override public ParserRule getRule() { return rule; }

		//"message" message=SimpleExpression
		public Group getGroup() { return cGroup; }

		//"message"
		public Keyword getMessageKeyword_0() { return cMessageKeyword_0; }

		//message=SimpleExpression
		public Assignment getMessageAssignment_1() { return cMessageAssignment_1; }

		//SimpleExpression
		public RuleCall getMessageSimpleExpressionParserRuleCall_1_0() { return cMessageSimpleExpressionParserRuleCall_1_0; }
	}

	public class RegExValidatorParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegExValidatorParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValidatorMessageParamParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cValidatorRegExParamAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cRegExKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRegExAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRegExSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cRegExAssignment_1_2.eContents().get(0);
		
		/// *
		// * The RegExValidatorParam allows the definition of a regular
		// * expression, that the validator uses to validate the user input.
		// * Additionally it contains the ValidatorMessageParam
		// * / RegExValidatorParam:
		//	ValidatorMessageParam | {ValidatorRegExParam} "regEx" regEx=STRING;
		@Override public ParserRule getRule() { return rule; }

		//ValidatorMessageParam | {ValidatorRegExParam} "regEx" regEx=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//ValidatorMessageParam
		public RuleCall getValidatorMessageParamParserRuleCall_0() { return cValidatorMessageParamParserRuleCall_0; }

		//{ValidatorRegExParam} "regEx" regEx=STRING
		public Group getGroup_1() { return cGroup_1; }

		//{ValidatorRegExParam}
		public Action getValidatorRegExParamAction_1_0() { return cValidatorRegExParamAction_1_0; }

		//"regEx"
		public Keyword getRegExKeyword_1_1() { return cRegExKeyword_1_1; }

		//regEx=STRING
		public Assignment getRegExAssignment_1_2() { return cRegExAssignment_1_2; }

		//STRING
		public RuleCall getRegExSTRINGTerminalRuleCall_1_2_0() { return cRegExSTRINGTerminalRuleCall_1_2_0; }
	}

	public class NumberRangeValidatorParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberRangeValidatorParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValidatorMessageParamParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cValidatorMaxParamAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cMaxKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMaxAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cMaxFLOATParserRuleCall_1_2_0 = (RuleCall)cMaxAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cValidatorMinParamAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cMinKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cMinAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cMinFLOATParserRuleCall_2_2_0 = (RuleCall)cMinAssignment_2_2.eContents().get(0);
		
		/// *
		// * The NumberRangeValidatorParam allows the definition of
		// * a numeric range that shall contain the user input.
		// * Additionally it contains the ValidatorMessageParam
		// * / NumberRangeValidatorParam:
		//	ValidatorMessageParam | {ValidatorMaxParam} "max" max=FLOAT | {ValidatorMinParam} "min" min=FLOAT;
		@Override public ParserRule getRule() { return rule; }

		//ValidatorMessageParam | {ValidatorMaxParam} "max" max=FLOAT | {ValidatorMinParam} "min" min=FLOAT
		public Alternatives getAlternatives() { return cAlternatives; }

		//ValidatorMessageParam
		public RuleCall getValidatorMessageParamParserRuleCall_0() { return cValidatorMessageParamParserRuleCall_0; }

		//{ValidatorMaxParam} "max" max=FLOAT
		public Group getGroup_1() { return cGroup_1; }

		//{ValidatorMaxParam}
		public Action getValidatorMaxParamAction_1_0() { return cValidatorMaxParamAction_1_0; }

		//"max"
		public Keyword getMaxKeyword_1_1() { return cMaxKeyword_1_1; }

		//max=FLOAT
		public Assignment getMaxAssignment_1_2() { return cMaxAssignment_1_2; }

		//FLOAT
		public RuleCall getMaxFLOATParserRuleCall_1_2_0() { return cMaxFLOATParserRuleCall_1_2_0; }

		//{ValidatorMinParam} "min" min=FLOAT
		public Group getGroup_2() { return cGroup_2; }

		//{ValidatorMinParam}
		public Action getValidatorMinParamAction_2_0() { return cValidatorMinParamAction_2_0; }

		//"min"
		public Keyword getMinKeyword_2_1() { return cMinKeyword_2_1; }

		//min=FLOAT
		public Assignment getMinAssignment_2_2() { return cMinAssignment_2_2; }

		//FLOAT
		public RuleCall getMinFLOATParserRuleCall_2_2_0() { return cMinFLOATParserRuleCall_2_2_0; }
	}

	public class StringRangeValidatorParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringRangeValidatorParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValidatorMessageParamParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cValidatorMaxLengthParamAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cMaxLengthKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMaxLengthAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cMaxLengthINTTerminalRuleCall_1_2_0 = (RuleCall)cMaxLengthAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cValidatorMinLengthParamAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cMinLengthKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cMinLengthAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cMinLengthINTTerminalRuleCall_2_2_0 = (RuleCall)cMinLengthAssignment_2_2.eContents().get(0);
		
		/// *
		// * The StringRangeValidatorParam allows the definition
		// * of a string length range. The length of the STRING
		// * input by the user will be checked against this range.
		// * Additionally it contains the ValidatorMessageParam
		// * / StringRangeValidatorParam:
		//	ValidatorMessageParam | {ValidatorMaxLengthParam} "maxLength" maxLength=INT | {ValidatorMinLengthParam} "minLength"
		//	minLength=INT;
		@Override public ParserRule getRule() { return rule; }

		//ValidatorMessageParam | {ValidatorMaxLengthParam} "maxLength" maxLength=INT | {ValidatorMinLengthParam} "minLength"
		//minLength=INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//ValidatorMessageParam
		public RuleCall getValidatorMessageParamParserRuleCall_0() { return cValidatorMessageParamParserRuleCall_0; }

		//{ValidatorMaxLengthParam} "maxLength" maxLength=INT
		public Group getGroup_1() { return cGroup_1; }

		//{ValidatorMaxLengthParam}
		public Action getValidatorMaxLengthParamAction_1_0() { return cValidatorMaxLengthParamAction_1_0; }

		//"maxLength"
		public Keyword getMaxLengthKeyword_1_1() { return cMaxLengthKeyword_1_1; }

		//maxLength=INT
		public Assignment getMaxLengthAssignment_1_2() { return cMaxLengthAssignment_1_2; }

		//INT
		public RuleCall getMaxLengthINTTerminalRuleCall_1_2_0() { return cMaxLengthINTTerminalRuleCall_1_2_0; }

		//{ValidatorMinLengthParam} "minLength" minLength=INT
		public Group getGroup_2() { return cGroup_2; }

		//{ValidatorMinLengthParam}
		public Action getValidatorMinLengthParamAction_2_0() { return cValidatorMinLengthParamAction_2_0; }

		//"minLength"
		public Keyword getMinLengthKeyword_2_1() { return cMinLengthKeyword_2_1; }

		//minLength=INT
		public Assignment getMinLengthAssignment_2_2() { return cMinLengthAssignment_2_2; }

		//INT
		public RuleCall getMinLengthINTTerminalRuleCall_2_2_0() { return cMinLengthINTTerminalRuleCall_2_2_0; }
	}

	public class DateRangeValidatorParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateRangeValidatorParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValidatorMessageParamParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cValidatorMaxDateParamAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cMaxKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMaxAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cMaxDATEParserRuleCall_1_2_0 = (RuleCall)cMaxAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cValidatorMinDateParamAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cMinKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cMinAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cMinDATEParserRuleCall_2_2_0 = (RuleCall)cMinAssignment_2_2.eContents().get(0);
		
		/// *
		// * Allows the definition of the earliest / latest valid date.
		// * E.g. min "1900-01-01"
		// * / DateRangeValidatorParam:
		//	ValidatorMessageParam | {ValidatorMaxDateParam} "max" max=DATE | {ValidatorMinDateParam} "min" min=DATE;
		@Override public ParserRule getRule() { return rule; }

		//ValidatorMessageParam | {ValidatorMaxDateParam} "max" max=DATE | {ValidatorMinDateParam} "min" min=DATE
		public Alternatives getAlternatives() { return cAlternatives; }

		//ValidatorMessageParam
		public RuleCall getValidatorMessageParamParserRuleCall_0() { return cValidatorMessageParamParserRuleCall_0; }

		//{ValidatorMaxDateParam} "max" max=DATE
		public Group getGroup_1() { return cGroup_1; }

		//{ValidatorMaxDateParam}
		public Action getValidatorMaxDateParamAction_1_0() { return cValidatorMaxDateParamAction_1_0; }

		//"max"
		public Keyword getMaxKeyword_1_1() { return cMaxKeyword_1_1; }

		//max=DATE
		public Assignment getMaxAssignment_1_2() { return cMaxAssignment_1_2; }

		//DATE
		public RuleCall getMaxDATEParserRuleCall_1_2_0() { return cMaxDATEParserRuleCall_1_2_0; }

		//{ValidatorMinDateParam} "min" min=DATE
		public Group getGroup_2() { return cGroup_2; }

		//{ValidatorMinDateParam}
		public Action getValidatorMinDateParamAction_2_0() { return cValidatorMinDateParamAction_2_0; }

		//"min"
		public Keyword getMinKeyword_2_1() { return cMinKeyword_2_1; }

		//min=DATE
		public Assignment getMinAssignment_2_2() { return cMinAssignment_2_2; }

		//DATE
		public RuleCall getMinDATEParserRuleCall_2_2_0() { return cMinDATEParserRuleCall_2_2_0; }
	}

	public class TimeRangeValidatorParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeRangeValidatorParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValidatorMessageParamParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cValidatorMaxTimeParamAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cMaxKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMaxAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cMaxTIMEParserRuleCall_1_2_0 = (RuleCall)cMaxAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cValidatorMinTimeParamAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cMinKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cMinAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cMinTIMEParserRuleCall_2_2_0 = (RuleCall)cMinAssignment_2_2.eContents().get(0);
		
		/// *
		// * Allows the definition of the earliest / latest valid point in time.
		// * E.g. min "03:00:00+02:00"
		// * / TimeRangeValidatorParam:
		//	ValidatorMessageParam | {ValidatorMaxTimeParam} "max" max=TIME | {ValidatorMinTimeParam} "min" min=TIME;
		@Override public ParserRule getRule() { return rule; }

		//ValidatorMessageParam | {ValidatorMaxTimeParam} "max" max=TIME | {ValidatorMinTimeParam} "min" min=TIME
		public Alternatives getAlternatives() { return cAlternatives; }

		//ValidatorMessageParam
		public RuleCall getValidatorMessageParamParserRuleCall_0() { return cValidatorMessageParamParserRuleCall_0; }

		//{ValidatorMaxTimeParam} "max" max=TIME
		public Group getGroup_1() { return cGroup_1; }

		//{ValidatorMaxTimeParam}
		public Action getValidatorMaxTimeParamAction_1_0() { return cValidatorMaxTimeParamAction_1_0; }

		//"max"
		public Keyword getMaxKeyword_1_1() { return cMaxKeyword_1_1; }

		//max=TIME
		public Assignment getMaxAssignment_1_2() { return cMaxAssignment_1_2; }

		//TIME
		public RuleCall getMaxTIMEParserRuleCall_1_2_0() { return cMaxTIMEParserRuleCall_1_2_0; }

		//{ValidatorMinTimeParam} "min" min=TIME
		public Group getGroup_2() { return cGroup_2; }

		//{ValidatorMinTimeParam}
		public Action getValidatorMinTimeParamAction_2_0() { return cValidatorMinTimeParamAction_2_0; }

		//"min"
		public Keyword getMinKeyword_2_1() { return cMinKeyword_2_1; }

		//min=TIME
		public Assignment getMinAssignment_2_2() { return cMinAssignment_2_2; }

		//TIME
		public RuleCall getMinTIMEParserRuleCall_2_2_0() { return cMinTIMEParserRuleCall_2_2_0; }
	}

	public class DateTimeRangeValidatorParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateTimeRangeValidatorParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValidatorMessageParamParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cValidatorMaxDateTimeParamAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cMaxKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMaxAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cMaxDATE_TIMEParserRuleCall_1_2_0 = (RuleCall)cMaxAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cValidatorMinDateTimeParamAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cMinKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cMinAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cMinDATE_TIMEParserRuleCall_2_2_0 = (RuleCall)cMinAssignment_2_2.eContents().get(0);
		
		/// *
		// * Allows the definition of the earliest / latest valid point in time.
		// * E.g. min "1900-01-01T03:00:00+02:00"
		// * / DateTimeRangeValidatorParam:
		//	ValidatorMessageParam | {ValidatorMaxDateTimeParam} "max" max=DATE_TIME | {ValidatorMinDateTimeParam} "min"
		//	min=DATE_TIME;
		@Override public ParserRule getRule() { return rule; }

		//ValidatorMessageParam | {ValidatorMaxDateTimeParam} "max" max=DATE_TIME | {ValidatorMinDateTimeParam} "min"
		//min=DATE_TIME
		public Alternatives getAlternatives() { return cAlternatives; }

		//ValidatorMessageParam
		public RuleCall getValidatorMessageParamParserRuleCall_0() { return cValidatorMessageParamParserRuleCall_0; }

		//{ValidatorMaxDateTimeParam} "max" max=DATE_TIME
		public Group getGroup_1() { return cGroup_1; }

		//{ValidatorMaxDateTimeParam}
		public Action getValidatorMaxDateTimeParamAction_1_0() { return cValidatorMaxDateTimeParamAction_1_0; }

		//"max"
		public Keyword getMaxKeyword_1_1() { return cMaxKeyword_1_1; }

		//max=DATE_TIME
		public Assignment getMaxAssignment_1_2() { return cMaxAssignment_1_2; }

		//DATE_TIME
		public RuleCall getMaxDATE_TIMEParserRuleCall_1_2_0() { return cMaxDATE_TIMEParserRuleCall_1_2_0; }

		//{ValidatorMinDateTimeParam} "min" min=DATE_TIME
		public Group getGroup_2() { return cGroup_2; }

		//{ValidatorMinDateTimeParam}
		public Action getValidatorMinDateTimeParamAction_2_0() { return cValidatorMinDateTimeParamAction_2_0; }

		//"min"
		public Keyword getMinKeyword_2_1() { return cMinKeyword_2_1; }

		//min=DATE_TIME
		public Assignment getMinAssignment_2_2() { return cMinAssignment_2_2; }

		//DATE_TIME
		public RuleCall getMinDATE_TIMEParserRuleCall_2_2_0() { return cMinDATE_TIMEParserRuleCall_2_2_0; }
	}

	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Main");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cAppVersionKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cAppVersionAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cAppVersionSTRINGTerminalRuleCall_2_0_1_0 = (RuleCall)cAppVersionAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cModelVersionKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cModelVersionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cModelVersionSTRINGTerminalRuleCall_2_1_1_0 = (RuleCall)cModelVersionAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cWorkflowManagerKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cWorkflowManagerAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cWorkflowManagerRemoteConnectionCrossReference_2_2_1_0 = (CrossReference)cWorkflowManagerAssignment_2_2_1.eContents().get(0);
		private final RuleCall cWorkflowManagerRemoteConnectionIDTerminalRuleCall_2_2_1_0_1 = (RuleCall)cWorkflowManagerRemoteConnectionCrossReference_2_2_1_0.eContents().get(1);
		private final Group cGroup_2_3 = (Group)cUnorderedGroup_2.eContents().get(3);
		private final Keyword cDefaultConnectionKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cDefaultConnectionAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final CrossReference cDefaultConnectionRemoteConnectionCrossReference_2_3_1_0 = (CrossReference)cDefaultConnectionAssignment_2_3_1.eContents().get(0);
		private final RuleCall cDefaultConnectionRemoteConnectionIDTerminalRuleCall_2_3_1_0_1 = (RuleCall)cDefaultConnectionRemoteConnectionCrossReference_2_3_1_0.eContents().get(1);
		private final Group cGroup_2_4 = (Group)cUnorderedGroup_2.eContents().get(4);
		private final Keyword cFileUploadConnectionKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Assignment cFileUploadConnectionAssignment_2_4_1 = (Assignment)cGroup_2_4.eContents().get(1);
		private final CrossReference cFileUploadConnectionRemoteConnectionCrossReference_2_4_1_0 = (CrossReference)cFileUploadConnectionAssignment_2_4_1.eContents().get(0);
		private final RuleCall cFileUploadConnectionRemoteConnectionIDTerminalRuleCall_2_4_1_0_1 = (RuleCall)cFileUploadConnectionRemoteConnectionCrossReference_2_4_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///////////////////////////////////////
		//// Controller layer => Main
		///////////////////////////////////////
		/// *
		// * The Main object contains all basic information about the collection of apps.
		// * Each set of models must contain exactly one Main object.
		// * / Main:
		//	"main" "{" ("appVersion" appVersion=STRING & "modelVersion" modelVersion=STRING & "workflowManager"
		//	workflowManager=[RemoteConnection] & ("defaultConnection" defaultConnection=[RemoteConnection])? &
		//	("fileUploadConnection" fileUploadConnection=[RemoteConnection])?) "}";
		@Override public ParserRule getRule() { return rule; }

		//"main" "{" ("appVersion" appVersion=STRING & "modelVersion" modelVersion=STRING & "workflowManager"
		//workflowManager=[RemoteConnection] & ("defaultConnection" defaultConnection=[RemoteConnection])? &
		//("fileUploadConnection" fileUploadConnection=[RemoteConnection])?) "}"
		public Group getGroup() { return cGroup; }

		//"main"
		public Keyword getMainKeyword_0() { return cMainKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"appVersion" appVersion=STRING & "modelVersion" modelVersion=STRING & "workflowManager"
		//workflowManager=[RemoteConnection] & ("defaultConnection" defaultConnection=[RemoteConnection])? &
		//("fileUploadConnection" fileUploadConnection=[RemoteConnection])?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//"appVersion" appVersion=STRING
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"appVersion"
		public Keyword getAppVersionKeyword_2_0_0() { return cAppVersionKeyword_2_0_0; }

		//appVersion=STRING
		public Assignment getAppVersionAssignment_2_0_1() { return cAppVersionAssignment_2_0_1; }

		//STRING
		public RuleCall getAppVersionSTRINGTerminalRuleCall_2_0_1_0() { return cAppVersionSTRINGTerminalRuleCall_2_0_1_0; }

		//"modelVersion" modelVersion=STRING
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"modelVersion"
		public Keyword getModelVersionKeyword_2_1_0() { return cModelVersionKeyword_2_1_0; }

		//modelVersion=STRING
		public Assignment getModelVersionAssignment_2_1_1() { return cModelVersionAssignment_2_1_1; }

		//STRING
		public RuleCall getModelVersionSTRINGTerminalRuleCall_2_1_1_0() { return cModelVersionSTRINGTerminalRuleCall_2_1_1_0; }

		//"workflowManager" workflowManager=[RemoteConnection]
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"workflowManager"
		public Keyword getWorkflowManagerKeyword_2_2_0() { return cWorkflowManagerKeyword_2_2_0; }

		//workflowManager=[RemoteConnection]
		public Assignment getWorkflowManagerAssignment_2_2_1() { return cWorkflowManagerAssignment_2_2_1; }

		//[RemoteConnection]
		public CrossReference getWorkflowManagerRemoteConnectionCrossReference_2_2_1_0() { return cWorkflowManagerRemoteConnectionCrossReference_2_2_1_0; }

		//ID
		public RuleCall getWorkflowManagerRemoteConnectionIDTerminalRuleCall_2_2_1_0_1() { return cWorkflowManagerRemoteConnectionIDTerminalRuleCall_2_2_1_0_1; }

		//("defaultConnection" defaultConnection=[RemoteConnection])?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//"defaultConnection"
		public Keyword getDefaultConnectionKeyword_2_3_0() { return cDefaultConnectionKeyword_2_3_0; }

		//defaultConnection=[RemoteConnection]
		public Assignment getDefaultConnectionAssignment_2_3_1() { return cDefaultConnectionAssignment_2_3_1; }

		//[RemoteConnection]
		public CrossReference getDefaultConnectionRemoteConnectionCrossReference_2_3_1_0() { return cDefaultConnectionRemoteConnectionCrossReference_2_3_1_0; }

		//ID
		public RuleCall getDefaultConnectionRemoteConnectionIDTerminalRuleCall_2_3_1_0_1() { return cDefaultConnectionRemoteConnectionIDTerminalRuleCall_2_3_1_0_1; }

		//("fileUploadConnection" fileUploadConnection=[RemoteConnection])?
		public Group getGroup_2_4() { return cGroup_2_4; }

		//"fileUploadConnection"
		public Keyword getFileUploadConnectionKeyword_2_4_0() { return cFileUploadConnectionKeyword_2_4_0; }

		//fileUploadConnection=[RemoteConnection]
		public Assignment getFileUploadConnectionAssignment_2_4_1() { return cFileUploadConnectionAssignment_2_4_1; }

		//[RemoteConnection]
		public CrossReference getFileUploadConnectionRemoteConnectionCrossReference_2_4_1_0() { return cFileUploadConnectionRemoteConnectionCrossReference_2_4_1_0; }

		//ID
		public RuleCall getFileUploadConnectionRemoteConnectionIDTerminalRuleCall_2_4_1_0_1() { return cFileUploadConnectionRemoteConnectionIDTerminalRuleCall_2_4_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ContentProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContentProvider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContentProviderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDataTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cUnorderedGroup_4.eContents().get(0);
		private final Keyword cProviderTypeKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Alternatives cAlternatives_4_0_1 = (Alternatives)cGroup_4_0.eContents().get(1);
		private final Assignment cDefaultAssignment_4_0_1_0 = (Assignment)cAlternatives_4_0_1.eContents().get(0);
		private final Keyword cDefaultDefaultKeyword_4_0_1_0_0 = (Keyword)cDefaultAssignment_4_0_1_0.eContents().get(0);
		private final Assignment cLocalAssignment_4_0_1_1 = (Assignment)cAlternatives_4_0_1.eContents().get(1);
		private final Keyword cLocalLocalKeyword_4_0_1_1_0 = (Keyword)cLocalAssignment_4_0_1_1.eContents().get(0);
		private final Assignment cConnectionAssignment_4_0_1_2 = (Assignment)cAlternatives_4_0_1.eContents().get(2);
		private final CrossReference cConnectionRemoteConnectionCrossReference_4_0_1_2_0 = (CrossReference)cConnectionAssignment_4_0_1_2.eContents().get(0);
		private final RuleCall cConnectionRemoteConnectionIDTerminalRuleCall_4_0_1_2_0_1 = (RuleCall)cConnectionRemoteConnectionCrossReference_4_0_1_2_0.eContents().get(1);
		private final Group cGroup_4_1 = (Group)cUnorderedGroup_4.eContents().get(1);
		private final Assignment cFilterAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final Keyword cFilterFilterKeyword_4_1_0_0 = (Keyword)cFilterAssignment_4_1_0.eContents().get(0);
		private final Assignment cFilterTypeAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cFilterTypeFilterTypeEnumRuleCall_4_1_1_0 = (RuleCall)cFilterTypeAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_4_1_2 = (Group)cGroup_4_1.eContents().get(2);
		private final Keyword cWhereKeyword_4_1_2_0 = (Keyword)cGroup_4_1_2.eContents().get(0);
		private final Assignment cWhereClauseAssignment_4_1_2_1 = (Assignment)cGroup_4_1_2.eContents().get(1);
		private final RuleCall cWhereClauseWhereClauseConditionParserRuleCall_4_1_2_1_0 = (RuleCall)cWhereClauseAssignment_4_1_2_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cUnorderedGroup_4.eContents().get(2);
		private final Keyword cReadonlyKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Alternatives cAlternatives_4_2_1 = (Alternatives)cGroup_4_2.eContents().get(1);
		private final Assignment cReadonlyAssignment_4_2_1_0 = (Assignment)cAlternatives_4_2_1.eContents().get(0);
		private final Keyword cReadonlyTrueKeyword_4_2_1_0_0 = (Keyword)cReadonlyAssignment_4_2_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_4_2_1_1 = (Keyword)cAlternatives_4_2_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///////////////////////////////////////////
		//// Controller layer => ContentProvider
		///////////////////////////////////////////
		/// *
		// * A ContentProvider stores an instance of a ModelElement or a SimpleDataType. It allows to
		// * CREATE_OR_UPDATE (save), READ (load) and DELETE (remove) the stored instance. By default all operation
		// * are allowed. A filter enables to query a subset of all saved instances. The providerType
		// * defines whether the instances shall be stored locally or remotely. The read-only attribute specifies
		// * to which fields this content provider can be mapped (if read-only it can only be mapped to none-input fields
		// * such as label or tooltip).
		// * / ContentProvider:
		//	"contentProvider" type=DataType name=EID "{" ("providerType" (default?="default" | local?="local" |
		//	connection=[RemoteConnection]) & (filter?="filter" filterType=FilterType ("where"
		//	whereClause=WhereClauseCondition)?)? & ("readonly" (readonly?="true" | "false"))?) "}";
		@Override public ParserRule getRule() { return rule; }

		//"contentProvider" type=DataType name=EID "{" ("providerType" (default?="default" | local?="local" |
		//connection=[RemoteConnection]) & (filter?="filter" filterType=FilterType ("where" whereClause=WhereClauseCondition)?)?
		//& ("readonly" (readonly?="true" | "false"))?) "}"
		public Group getGroup() { return cGroup; }

		//"contentProvider"
		public Keyword getContentProviderKeyword_0() { return cContentProviderKeyword_0; }

		//type=DataType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_1_0() { return cTypeDataTypeParserRuleCall_1_0; }

		//name=EID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EID
		public RuleCall getNameEIDParserRuleCall_2_0() { return cNameEIDParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//"providerType" (default?="default" | local?="local" | connection=[RemoteConnection]) & (filter?="filter"
		//filterType=FilterType ("where" whereClause=WhereClauseCondition)?)? & ("readonly" (readonly?="true" | "false"))?
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }

		//"providerType" (default?="default" | local?="local" | connection=[RemoteConnection])
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"providerType"
		public Keyword getProviderTypeKeyword_4_0_0() { return cProviderTypeKeyword_4_0_0; }

		//default?="default" | local?="local" | connection=[RemoteConnection]
		public Alternatives getAlternatives_4_0_1() { return cAlternatives_4_0_1; }

		//default?="default"
		public Assignment getDefaultAssignment_4_0_1_0() { return cDefaultAssignment_4_0_1_0; }

		//"default"
		public Keyword getDefaultDefaultKeyword_4_0_1_0_0() { return cDefaultDefaultKeyword_4_0_1_0_0; }

		//local?="local"
		public Assignment getLocalAssignment_4_0_1_1() { return cLocalAssignment_4_0_1_1; }

		//"local"
		public Keyword getLocalLocalKeyword_4_0_1_1_0() { return cLocalLocalKeyword_4_0_1_1_0; }

		//connection=[RemoteConnection]
		public Assignment getConnectionAssignment_4_0_1_2() { return cConnectionAssignment_4_0_1_2; }

		//[RemoteConnection]
		public CrossReference getConnectionRemoteConnectionCrossReference_4_0_1_2_0() { return cConnectionRemoteConnectionCrossReference_4_0_1_2_0; }

		//ID
		public RuleCall getConnectionRemoteConnectionIDTerminalRuleCall_4_0_1_2_0_1() { return cConnectionRemoteConnectionIDTerminalRuleCall_4_0_1_2_0_1; }

		//(filter?="filter" filterType=FilterType ("where" whereClause=WhereClauseCondition)?)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//filter?="filter"
		public Assignment getFilterAssignment_4_1_0() { return cFilterAssignment_4_1_0; }

		//"filter"
		public Keyword getFilterFilterKeyword_4_1_0_0() { return cFilterFilterKeyword_4_1_0_0; }

		//filterType=FilterType
		public Assignment getFilterTypeAssignment_4_1_1() { return cFilterTypeAssignment_4_1_1; }

		//FilterType
		public RuleCall getFilterTypeFilterTypeEnumRuleCall_4_1_1_0() { return cFilterTypeFilterTypeEnumRuleCall_4_1_1_0; }

		//("where" whereClause=WhereClauseCondition)?
		public Group getGroup_4_1_2() { return cGroup_4_1_2; }

		//"where"
		public Keyword getWhereKeyword_4_1_2_0() { return cWhereKeyword_4_1_2_0; }

		//whereClause=WhereClauseCondition
		public Assignment getWhereClauseAssignment_4_1_2_1() { return cWhereClauseAssignment_4_1_2_1; }

		//WhereClauseCondition
		public RuleCall getWhereClauseWhereClauseConditionParserRuleCall_4_1_2_1_0() { return cWhereClauseWhereClauseConditionParserRuleCall_4_1_2_1_0; }

		//("readonly" (readonly?="true" | "false"))?
		public Group getGroup_4_2() { return cGroup_4_2; }

		//"readonly"
		public Keyword getReadonlyKeyword_4_2_0() { return cReadonlyKeyword_4_2_0; }

		//readonly?="true" | "false"
		public Alternatives getAlternatives_4_2_1() { return cAlternatives_4_2_1; }

		//readonly?="true"
		public Assignment getReadonlyAssignment_4_2_1_0() { return cReadonlyAssignment_4_2_1_0; }

		//"true"
		public Keyword getReadonlyTrueKeyword_4_2_1_0_0() { return cReadonlyTrueKeyword_4_2_1_0_0; }

		//"false"
		public Keyword getFalseKeyword_4_2_1_1() { return cFalseKeyword_4_2_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class RemoteConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RemoteConnection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoteConnectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cUriKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cUriAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cUriSTRINGTerminalRuleCall_3_0_1_0 = (RuleCall)cUriAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cPasswordKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cPasswordAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cPasswordSTRINGTerminalRuleCall_3_1_1_0 = (RuleCall)cPasswordAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cUserKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cUserAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cUserSTRINGTerminalRuleCall_3_2_1_0 = (RuleCall)cUserAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cKeyKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cKeyAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cKeySTRINGTerminalRuleCall_3_3_1_0 = (RuleCall)cKeyAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cUnorderedGroup_3.eContents().get(4);
		private final Keyword cStoragePathKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cStoragePathAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cStoragePathSTRINGTerminalRuleCall_3_4_1_0 = (RuleCall)cStoragePathAssignment_3_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * The RemoteConnection allows to specify the connection to a backend server.
		// * / RemoteConnection:
		//	"remoteConnection" name=EID "{" ("uri" uri=STRING & ("password" password=STRING)? & ("user" user=STRING)? & ("key"
		//	key=STRING)? & ("storagePath" storagePath=STRING)?) "}";
		@Override public ParserRule getRule() { return rule; }

		//"remoteConnection" name=EID "{" ("uri" uri=STRING & ("password" password=STRING)? & ("user" user=STRING)? & ("key"
		//key=STRING)? & ("storagePath" storagePath=STRING)?) "}"
		public Group getGroup() { return cGroup; }

		//"remoteConnection"
		public Keyword getRemoteConnectionKeyword_0() { return cRemoteConnectionKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"uri" uri=STRING & ("password" password=STRING)? & ("user" user=STRING)? & ("key" key=STRING)? & ("storagePath"
		//storagePath=STRING)?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//"uri" uri=STRING
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"uri"
		public Keyword getUriKeyword_3_0_0() { return cUriKeyword_3_0_0; }

		//uri=STRING
		public Assignment getUriAssignment_3_0_1() { return cUriAssignment_3_0_1; }

		//STRING
		public RuleCall getUriSTRINGTerminalRuleCall_3_0_1_0() { return cUriSTRINGTerminalRuleCall_3_0_1_0; }

		//("password" password=STRING)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"password"
		public Keyword getPasswordKeyword_3_1_0() { return cPasswordKeyword_3_1_0; }

		//password=STRING
		public Assignment getPasswordAssignment_3_1_1() { return cPasswordAssignment_3_1_1; }

		//STRING
		public RuleCall getPasswordSTRINGTerminalRuleCall_3_1_1_0() { return cPasswordSTRINGTerminalRuleCall_3_1_1_0; }

		//("user" user=STRING)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"user"
		public Keyword getUserKeyword_3_2_0() { return cUserKeyword_3_2_0; }

		//user=STRING
		public Assignment getUserAssignment_3_2_1() { return cUserAssignment_3_2_1; }

		//STRING
		public RuleCall getUserSTRINGTerminalRuleCall_3_2_1_0() { return cUserSTRINGTerminalRuleCall_3_2_1_0; }

		//("key" key=STRING)?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//"key"
		public Keyword getKeyKeyword_3_3_0() { return cKeyKeyword_3_3_0; }

		//key=STRING
		public Assignment getKeyAssignment_3_3_1() { return cKeyAssignment_3_3_1; }

		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_3_3_1_0() { return cKeySTRINGTerminalRuleCall_3_3_1_0; }

		//("storagePath" storagePath=STRING)?
		public Group getGroup_3_4() { return cGroup_3_4; }

		//"storagePath"
		public Keyword getStoragePathKeyword_3_4_0() { return cStoragePathKeyword_3_4_0; }

		//storagePath=STRING
		public Assignment getStoragePathAssignment_3_4_1() { return cStoragePathAssignment_3_4_1; }

		//STRING
		public RuleCall getStoragePathSTRINGTerminalRuleCall_3_4_1_0() { return cStoragePathSTRINGTerminalRuleCall_3_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Action cReferencedModelTypeAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Assignment cEntityAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final CrossReference cEntityModelElementCrossReference_0_0_1_0 = (CrossReference)cEntityAssignment_0_0_1.eContents().get(0);
		private final RuleCall cEntityModelElementQUALIFIED_NAMEParserRuleCall_0_0_1_0_1 = (RuleCall)cEntityModelElementCrossReference_0_0_1_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Action cSimpleTypeAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Assignment cTypeAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cTypeSimpleDataTypeEnumRuleCall_0_1_1_0 = (RuleCall)cTypeAssignment_0_1_1.eContents().get(0);
		private final Assignment cManyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cManyBRACKETSParserRuleCall_1_0 = (RuleCall)cManyAssignment_1.eContents().get(0);
		
		/// *
		// * DataType allows to refer to an already defined
		// * ModelElement or to use a SimpleDataType.
		// * / DataType:
		//	({ReferencedModelType} entity=[ModelElement|QUALIFIED_NAME] | {SimpleType} type=SimpleDataType) many?=BRACKETS?;
		@Override public ParserRule getRule() { return rule; }

		//({ReferencedModelType} entity=[ModelElement|QUALIFIED_NAME] | {SimpleType} type=SimpleDataType) many?=BRACKETS?
		public Group getGroup() { return cGroup; }

		//{ReferencedModelType} entity=[ModelElement|QUALIFIED_NAME] | {SimpleType} type=SimpleDataType
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//{ReferencedModelType} entity=[ModelElement|QUALIFIED_NAME]
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{ReferencedModelType}
		public Action getReferencedModelTypeAction_0_0_0() { return cReferencedModelTypeAction_0_0_0; }

		//entity=[ModelElement|QUALIFIED_NAME]
		public Assignment getEntityAssignment_0_0_1() { return cEntityAssignment_0_0_1; }

		//[ModelElement|QUALIFIED_NAME]
		public CrossReference getEntityModelElementCrossReference_0_0_1_0() { return cEntityModelElementCrossReference_0_0_1_0; }

		//QUALIFIED_NAME
		public RuleCall getEntityModelElementQUALIFIED_NAMEParserRuleCall_0_0_1_0_1() { return cEntityModelElementQUALIFIED_NAMEParserRuleCall_0_0_1_0_1; }

		//{SimpleType} type=SimpleDataType
		public Group getGroup_0_1() { return cGroup_0_1; }

		//{SimpleType}
		public Action getSimpleTypeAction_0_1_0() { return cSimpleTypeAction_0_1_0; }

		//type=SimpleDataType
		public Assignment getTypeAssignment_0_1_1() { return cTypeAssignment_0_1_1; }

		//SimpleDataType
		public RuleCall getTypeSimpleDataTypeEnumRuleCall_0_1_1_0() { return cTypeSimpleDataTypeEnumRuleCall_0_1_1_0; }

		//many?=BRACKETS?
		public Assignment getManyAssignment_1() { return cManyAssignment_1; }

		//BRACKETS
		public RuleCall getManyBRACKETSParserRuleCall_1_0() { return cManyBRACKETSParserRuleCall_1_0; }
	}

	public class SimpleDataTypeWrapperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleDataTypeWrapper");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeSimpleDataTypeEnumRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		/// *
		// * A SimpleDataTypeWrapper wraps a SimpleDataType.
		// * This is used to store the chosen SimpleDataType
		// * of the list of possible SimpleDataTypes.
		// * / SimpleDataTypeWrapper:
		//	type=SimpleDataType;
		@Override public ParserRule getRule() { return rule; }

		//type=SimpleDataType
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//SimpleDataType
		public RuleCall getTypeSimpleDataTypeEnumRuleCall_0() { return cTypeSimpleDataTypeEnumRuleCall_0; }
	}

	public class WhereClauseConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhereClauseCondition");
		private final RuleCall cWhereClauseOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////////////////////////////////////////////////////////////////
		//// Controller layer => ContentProvider => Filter Conditions
		////////////////////////////////////////////////////////////////
		/// *
		// * The WhereClauseCondition allows to composite criteria that
		// * have to be fulfilled by instances to be loaded.
		// * / WhereClauseCondition:
		//	WhereClauseOr;
		@Override public ParserRule getRule() { return rule; }

		//WhereClauseOr
		public RuleCall getWhereClauseOrParserRuleCall() { return cWhereClauseOrParserRuleCall; }
	}

	public class WhereClauseOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhereClauseOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWhereClauseAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cWhereClauseOrLeftExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cOP_CONDITION_ORParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionWhereClauseAndParserRuleCall_1_2_0 = (RuleCall)cRightExpressionAssignment_1_2.eContents().get(0);
		
		/// **
		// * Representation of an arbitrary number of conditional expressions connected by OR.
		// * Explicitly model precedence of AND over OR.
		// * / WhereClauseOr returns WhereClauseConditionalExpression:
		//	WhereClauseAnd ({WhereClauseOr.leftExpression=current} OP_CONDITION_OR rightExpression=WhereClauseAnd)*;
		@Override public ParserRule getRule() { return rule; }

		//WhereClauseAnd ({WhereClauseOr.leftExpression=current} OP_CONDITION_OR rightExpression=WhereClauseAnd)*
		public Group getGroup() { return cGroup; }

		//WhereClauseAnd
		public RuleCall getWhereClauseAndParserRuleCall_0() { return cWhereClauseAndParserRuleCall_0; }

		//({WhereClauseOr.leftExpression=current} OP_CONDITION_OR rightExpression=WhereClauseAnd)*
		public Group getGroup_1() { return cGroup_1; }

		//{WhereClauseOr.leftExpression=current}
		public Action getWhereClauseOrLeftExpressionAction_1_0() { return cWhereClauseOrLeftExpressionAction_1_0; }

		//OP_CONDITION_OR
		public RuleCall getOP_CONDITION_ORParserRuleCall_1_1() { return cOP_CONDITION_ORParserRuleCall_1_1; }

		//rightExpression=WhereClauseAnd
		public Assignment getRightExpressionAssignment_1_2() { return cRightExpressionAssignment_1_2; }

		//WhereClauseAnd
		public RuleCall getRightExpressionWhereClauseAndParserRuleCall_1_2_0() { return cRightExpressionWhereClauseAndParserRuleCall_1_2_0; }
	}

	public class WhereClauseAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhereClauseAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWhereClauseConditionalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cWhereClauseAndLeftExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cOP_CONDITION_ANDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionWhereClauseConditionalExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExpressionAssignment_1_2.eContents().get(0);
		
		/// **
		// * Representation of an arbitrary number of conditional expressions connected by AND.
		// * Explicitly model precedence of AND over OR.
		// * / WhereClauseAnd returns WhereClauseConditionalExpression:
		//	WhereClauseConditionalExpression ({WhereClauseAnd.leftExpression=current} OP_CONDITION_AND
		//	rightExpression=WhereClauseConditionalExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//WhereClauseConditionalExpression ({WhereClauseAnd.leftExpression=current} OP_CONDITION_AND
		//rightExpression=WhereClauseConditionalExpression)*
		public Group getGroup() { return cGroup; }

		//WhereClauseConditionalExpression
		public RuleCall getWhereClauseConditionalExpressionParserRuleCall_0() { return cWhereClauseConditionalExpressionParserRuleCall_0; }

		//({WhereClauseAnd.leftExpression=current} OP_CONDITION_AND rightExpression=WhereClauseConditionalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{WhereClauseAnd.leftExpression=current}
		public Action getWhereClauseAndLeftExpressionAction_1_0() { return cWhereClauseAndLeftExpressionAction_1_0; }

		//OP_CONDITION_AND
		public RuleCall getOP_CONDITION_ANDParserRuleCall_1_1() { return cOP_CONDITION_ANDParserRuleCall_1_1; }

		//rightExpression=WhereClauseConditionalExpression
		public Assignment getRightExpressionAssignment_1_2() { return cRightExpressionAssignment_1_2; }

		//WhereClauseConditionalExpression
		public RuleCall getRightExpressionWhereClauseConditionalExpressionParserRuleCall_1_2_0() { return cRightExpressionWhereClauseConditionalExpressionParserRuleCall_1_2_0; }
	}

	public class WhereClauseConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhereClauseConditionalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cWhereClauseOrParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cWhereClauseNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cOP_CONDITION_NOTParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionWhereClauseConditionalExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cWhereClauseCompareExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cEqLeftAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEqLeftEntityPathParserRuleCall_2_1_0 = (RuleCall)cEqLeftAssignment_2_1.eContents().get(0);
		private final Assignment cOpAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cOpOperatorEnumRuleCall_2_2_0 = (RuleCall)cOpAssignment_2_2.eContents().get(0);
		private final Assignment cEqRightAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cEqRightSimpleExpressionParserRuleCall_2_3_0 = (RuleCall)cEqRightAssignment_2_3.eContents().get(0);
		
		/// *
		// * The WhereClauseCondition summarizes all possible criteria that
		// * have to be fulfilled by instances to be loaded. It resolves to
		// * a WhereClauseCondition and is required to allow recursive definition.
		// * / WhereClauseConditionalExpression:
		//	"(" WhereClauseOr ")" | {WhereClauseNot} OP_CONDITION_NOT expression=WhereClauseConditionalExpression |
		//	{WhereClauseCompareExpression} eqLeft=EntityPath op=Operator eqRight=SimpleExpression;
		@Override public ParserRule getRule() { return rule; }

		//"(" WhereClauseOr ")" | {WhereClauseNot} OP_CONDITION_NOT expression=WhereClauseConditionalExpression |
		//{WhereClauseCompareExpression} eqLeft=EntityPath op=Operator eqRight=SimpleExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" WhereClauseOr ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//WhereClauseOr
		public RuleCall getWhereClauseOrParserRuleCall_0_1() { return cWhereClauseOrParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//{WhereClauseNot} OP_CONDITION_NOT expression=WhereClauseConditionalExpression
		public Group getGroup_1() { return cGroup_1; }

		//{WhereClauseNot}
		public Action getWhereClauseNotAction_1_0() { return cWhereClauseNotAction_1_0; }

		//OP_CONDITION_NOT
		public RuleCall getOP_CONDITION_NOTParserRuleCall_1_1() { return cOP_CONDITION_NOTParserRuleCall_1_1; }

		//expression=WhereClauseConditionalExpression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//WhereClauseConditionalExpression
		public RuleCall getExpressionWhereClauseConditionalExpressionParserRuleCall_1_2_0() { return cExpressionWhereClauseConditionalExpressionParserRuleCall_1_2_0; }

		//{WhereClauseCompareExpression} eqLeft=EntityPath op=Operator eqRight=SimpleExpression
		public Group getGroup_2() { return cGroup_2; }

		//{WhereClauseCompareExpression}
		public Action getWhereClauseCompareExpressionAction_2_0() { return cWhereClauseCompareExpressionAction_2_0; }

		//eqLeft=EntityPath
		public Assignment getEqLeftAssignment_2_1() { return cEqLeftAssignment_2_1; }

		//EntityPath
		public RuleCall getEqLeftEntityPathParserRuleCall_2_1_0() { return cEqLeftEntityPathParserRuleCall_2_1_0; }

		//op=Operator
		public Assignment getOpAssignment_2_2() { return cOpAssignment_2_2; }

		//Operator
		public RuleCall getOpOperatorEnumRuleCall_2_2_0() { return cOpOperatorEnumRuleCall_2_2_0; }

		//eqRight=SimpleExpression
		public Assignment getEqRightAssignment_2_3() { return cEqRightAssignment_2_3; }

		//SimpleExpression
		public RuleCall getEqRightSimpleExpressionParserRuleCall_2_3_0() { return cEqRightSimpleExpressionParserRuleCall_2_3_0; }
	}

	public class AbstractProviderReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractProviderReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContentProviderReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLocationProviderReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////////////////////////////////////////////////////////////////
		//// Controller layer => ContentProvider => References
		////////////////////////////////////////////////////////////////
		/// *
		// * Super class for all kind of content providers. Up to now just normal content providers
		// * and location content providers are supported.
		// * / AbstractProviderReference:
		//	ContentProviderReference | LocationProviderReference;
		@Override public ParserRule getRule() { return rule; }

		//ContentProviderReference | LocationProviderReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//ContentProviderReference
		public RuleCall getContentProviderReferenceParserRuleCall_0() { return cContentProviderReferenceParserRuleCall_0; }

		//LocationProviderReference
		public RuleCall getLocationProviderReferenceParserRuleCall_1() { return cLocationProviderReferenceParserRuleCall_1; }
	}

	public class ContentProviderReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContentProviderReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContentProviderAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContentProviderContentProviderCrossReference_1_0 = (CrossReference)cContentProviderAssignment_1.eContents().get(0);
		private final RuleCall cContentProviderContentProviderQUALIFIED_NAMEParserRuleCall_1_0_1 = (RuleCall)cContentProviderContentProviderCrossReference_1_0.eContents().get(1);
		
		/// *
		// * A reference to a normal content provider. Never, create direct cross-links to a content provider, as this
		// * rule provides the right formatting (colon in front of all content provider references)
		// * / ContentProviderReference:
		//	":" contentProvider=[ContentProvider|QUALIFIED_NAME];
		@Override public ParserRule getRule() { return rule; }

		//":" contentProvider=[ContentProvider|QUALIFIED_NAME]
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//contentProvider=[ContentProvider|QUALIFIED_NAME]
		public Assignment getContentProviderAssignment_1() { return cContentProviderAssignment_1; }

		//[ContentProvider|QUALIFIED_NAME]
		public CrossReference getContentProviderContentProviderCrossReference_1_0() { return cContentProviderContentProviderCrossReference_1_0; }

		//QUALIFIED_NAME
		public RuleCall getContentProviderContentProviderQUALIFIED_NAMEParserRuleCall_1_0_1() { return cContentProviderContentProviderQUALIFIED_NAMEParserRuleCall_1_0_1; }
	}

	public class LocationProviderReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocationProviderReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLocationProviderReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLocationKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		/// *
		// * A 'virtual' content provider that can be used as it were a normal read-only content provider with the name 'location'
		// * that provides fields such as street, country etc. The formatting highlights the location keyword as it were a cross-reference.
		// * / LocationProviderReference:
		//	{LocationProviderReference} ":" "location";
		@Override public ParserRule getRule() { return rule; }

		//{LocationProviderReference} ":" "location"
		public Group getGroup() { return cGroup; }

		//{LocationProviderReference}
		public Action getLocationProviderReferenceAction_0() { return cLocationProviderReferenceAction_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"location"
		public Keyword getLocationKeyword_2() { return cLocationKeyword_2; }
	}

	public class PathDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContentProviderPathParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityPathParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////////////////////////////////////////////////////////////////
		//// Controller layer => ContentProvider => Pathes
		////////////////////////////////////////////////////////////////
		/// *
		// * PathDefinition is used to define a common super type of all specific PathDefinitions.
		// * 
		// * The PathDefinition is not used in the language but will be used by the generators. Therefore
		// * it can be seen as a workaround to manipulate the meta model, that will be built by Xtext.
		// * / PathDefinition:
		//	ContentProviderPath | EntityPath;
		@Override public ParserRule getRule() { return rule; }

		//ContentProviderPath | EntityPath
		public Alternatives getAlternatives() { return cAlternatives; }

		//ContentProviderPath
		public RuleCall getContentProviderPathParserRuleCall_0() { return cContentProviderPathParserRuleCall_0; }

		//EntityPath
		public RuleCall getEntityPathParserRuleCall_1() { return cEntityPathParserRuleCall_1; }
	}

	public class EntityPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityPath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEntityRefEntityCrossReference_0_0 = (CrossReference)cEntityRefAssignment_0.eContents().get(0);
		private final RuleCall cEntityRefEntityIDTerminalRuleCall_0_0_1 = (RuleCall)cEntityRefEntityCrossReference_0_0.eContents().get(1);
		private final Assignment cTailAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTailPathTailParserRuleCall_1_0 = (RuleCall)cTailAssignment_1.eContents().get(0);
		
		/// *
		// * The EntityPathDefinition defines
		// * a path to an attribute of an entity.
		// * / EntityPath:
		//	entityRef=[Entity] tail=PathTail;
		@Override public ParserRule getRule() { return rule; }

		//entityRef=[Entity] tail=PathTail
		public Group getGroup() { return cGroup; }

		//entityRef=[Entity]
		public Assignment getEntityRefAssignment_0() { return cEntityRefAssignment_0; }

		//[Entity]
		public CrossReference getEntityRefEntityCrossReference_0_0() { return cEntityRefEntityCrossReference_0_0; }

		//ID
		public RuleCall getEntityRefEntityIDTerminalRuleCall_0_0_1() { return cEntityRefEntityIDTerminalRuleCall_0_0_1; }

		//tail=PathTail
		public Assignment getTailAssignment_1() { return cTailAssignment_1; }

		//PathTail
		public RuleCall getTailPathTailParserRuleCall_1_0() { return cTailPathTailParserRuleCall_1_0; }
	}

	public class AbstractContentProviderPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractContentProviderPath");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContentProviderPathParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLocationProviderPathParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * Super class for normal content providers and fake content providers such as the location content provider.
		// * / AbstractContentProviderPath:
		//	ContentProviderPath | LocationProviderPath;
		@Override public ParserRule getRule() { return rule; }

		//ContentProviderPath | LocationProviderPath
		public Alternatives getAlternatives() { return cAlternatives; }

		//ContentProviderPath
		public RuleCall getContentProviderPathParserRuleCall_0() { return cContentProviderPathParserRuleCall_0; }

		//LocationProviderPath
		public RuleCall getLocationProviderPathParserRuleCall_1() { return cLocationProviderPathParserRuleCall_1; }
	}

	public class ContentProviderPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContentProviderPath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContentProviderRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContentProviderRefContentProviderCrossReference_1_0 = (CrossReference)cContentProviderRefAssignment_1.eContents().get(0);
		private final RuleCall cContentProviderRefContentProviderIDTerminalRuleCall_1_0_1 = (RuleCall)cContentProviderRefContentProviderCrossReference_1_0.eContents().get(1);
		private final Assignment cTailAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTailPathTailParserRuleCall_2_0 = (RuleCall)cTailAssignment_2.eContents().get(0);
		
		/// *
		// * The ContentProviderPathDefinition defines a path to an attribute of
		// * an entity stored in a ContentProvider.
		// * / ContentProviderPath:
		//	":" contentProviderRef=[ContentProvider] tail=PathTail;
		@Override public ParserRule getRule() { return rule; }

		//":" contentProviderRef=[ContentProvider] tail=PathTail
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//contentProviderRef=[ContentProvider]
		public Assignment getContentProviderRefAssignment_1() { return cContentProviderRefAssignment_1; }

		//[ContentProvider]
		public CrossReference getContentProviderRefContentProviderCrossReference_1_0() { return cContentProviderRefContentProviderCrossReference_1_0; }

		//ID
		public RuleCall getContentProviderRefContentProviderIDTerminalRuleCall_1_0_1() { return cContentProviderRefContentProviderIDTerminalRuleCall_1_0_1; }

		//tail=PathTail
		public Assignment getTailAssignment_2() { return cTailAssignment_2; }

		//PathTail
		public RuleCall getTailPathTailParserRuleCall_2_0() { return cTailPathTailParserRuleCall_2_0; }
	}

	public class PathTailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathTail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAttributeRefAttributeCrossReference_1_0 = (CrossReference)cAttributeRefAssignment_1.eContents().get(0);
		private final RuleCall cAttributeRefAttributeIDTerminalRuleCall_1_0_1 = (RuleCall)cAttributeRefAttributeCrossReference_1_0.eContents().get(1);
		private final Assignment cTailAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTailPathTailParserRuleCall_2_0 = (RuleCall)cTailAssignment_2.eContents().get(0);
		
		/// *
		// * The PathTail defines a recursive list of nested Attribute references.
		// * / PathTail:
		//	"." attributeRef=[Attribute] tail=PathTail?;
		@Override public ParserRule getRule() { return rule; }

		//"." attributeRef=[Attribute] tail=PathTail?
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//attributeRef=[Attribute]
		public Assignment getAttributeRefAssignment_1() { return cAttributeRefAssignment_1; }

		//[Attribute]
		public CrossReference getAttributeRefAttributeCrossReference_1_0() { return cAttributeRefAttributeCrossReference_1_0; }

		//ID
		public RuleCall getAttributeRefAttributeIDTerminalRuleCall_1_0_1() { return cAttributeRefAttributeIDTerminalRuleCall_1_0_1; }

		//tail=PathTail?
		public Assignment getTailAssignment_2() { return cTailAssignment_2; }

		//PathTail
		public RuleCall getTailPathTailParserRuleCall_2_0() { return cTailPathTailParserRuleCall_2_0; }
	}

	public class LocationProviderPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocationProviderPath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLocationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLocationFieldAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLocationFieldLocationFieldEnumRuleCall_3_0 = (RuleCall)cLocationFieldAssignment_3.eContents().get(0);
		
		/// *
		// * The location provider is a fake content provider for location information that is read-only.
		// * Thus, it can only be mapped to read-only fields such as labels and tooltips.
		// * / LocationProviderPath:
		//	":" "location" "." locationField=LocationField;
		@Override public ParserRule getRule() { return rule; }

		//":" "location" "." locationField=LocationField
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//"location"
		public Keyword getLocationKeyword_1() { return cLocationKeyword_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//locationField=LocationField
		public Assignment getLocationFieldAssignment_3() { return cLocationFieldAssignment_3; }

		//LocationField
		public RuleCall getLocationFieldLocationFieldEnumRuleCall_3_0() { return cLocationFieldLocationFieldEnumRuleCall_3_0; }
	}

	public class ProcessChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessChain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessChainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProcessChainStepsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProcessChainStepsProcessChainStepParserRuleCall_3_0 = (RuleCall)cProcessChainStepsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///////////////////////////////////////////
		//// Controller layer => ProcessChains
		///////////////////////////////////////////
		/// *
		// * A ProcessChain is used to define several steps in which the
		// * application can currently be. It is possible to define
		// * several ProcessChains, ProcessChains can be nested and there
		// * is at most one ProcessChain active.
		// * / ProcessChain:
		//	"processChain" name=EID "{" processChainSteps+=ProcessChainStep* "}";
		@Override public ParserRule getRule() { return rule; }

		//"processChain" name=EID "{" processChainSteps+=ProcessChainStep* "}"
		public Group getGroup() { return cGroup; }

		//"processChain"
		public Keyword getProcessChainKeyword_0() { return cProcessChainKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//processChainSteps+=ProcessChainStep*
		public Assignment getProcessChainStepsAssignment_3() { return cProcessChainStepsAssignment_3; }

		//ProcessChainStep
		public RuleCall getProcessChainStepsProcessChainStepParserRuleCall_3_0() { return cProcessChainStepsProcessChainStepParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ProcessChainStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessChainStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStepKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cViewKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cViewAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cViewAbstractViewGUIElementRefParserRuleCall_3_0_1_0 = (RuleCall)cViewAssignment_3_0_1.eContents().get(0);
		private final Assignment cGotosAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final RuleCall cGotosProcessChainGoToDefinitionParserRuleCall_3_1_0 = (RuleCall)cGotosAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cMessageKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cMessageAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cMessageSimpleExpressionParserRuleCall_3_2_1_0 = (RuleCall)cMessageAssignment_3_2_1.eContents().get(0);
		
		/// *
		// * Each ProcessChainStep defines one view that is related to it
		// * and will be displayed if the ProcessChainStep becomes the
		// * current ProcessChainStep of the active ProcessChain. Additionally
		// * conditions can be defined, that restrict switching to the
		// * next or previous ProcessChainStep. Also events can be
		// * specified that trigger the change to the next or previous
		// * ProcessChainStep. Instead of the former mentioned settings,
		// * a ProcessChain can be referred to that will become active
		// * while this ProcessChainStep is the current one.
		// * / ProcessChainStep:
		//	"step" name=EID ":" ("view" view=AbstractViewGUIElementRef & gotos+=ProcessChainGoToDefinition* & ("message"
		//	message=SimpleExpression)?);
		@Override public ParserRule getRule() { return rule; }

		//"step" name=EID ":" ("view" view=AbstractViewGUIElementRef & gotos+=ProcessChainGoToDefinition* & ("message"
		//message=SimpleExpression)?)
		public Group getGroup() { return cGroup; }

		//"step"
		public Keyword getStepKeyword_0() { return cStepKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//"view" view=AbstractViewGUIElementRef & gotos+=ProcessChainGoToDefinition* & ("message" message=SimpleExpression)?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//"view" view=AbstractViewGUIElementRef
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"view"
		public Keyword getViewKeyword_3_0_0() { return cViewKeyword_3_0_0; }

		//view=AbstractViewGUIElementRef
		public Assignment getViewAssignment_3_0_1() { return cViewAssignment_3_0_1; }

		//AbstractViewGUIElementRef
		public RuleCall getViewAbstractViewGUIElementRefParserRuleCall_3_0_1_0() { return cViewAbstractViewGUIElementRefParserRuleCall_3_0_1_0; }

		//gotos+=ProcessChainGoToDefinition*
		public Assignment getGotosAssignment_3_1() { return cGotosAssignment_3_1; }

		//ProcessChainGoToDefinition
		public RuleCall getGotosProcessChainGoToDefinitionParserRuleCall_3_1_0() { return cGotosProcessChainGoToDefinitionParserRuleCall_3_1_0; }

		//("message" message=SimpleExpression)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"message"
		public Keyword getMessageKeyword_3_2_0() { return cMessageKeyword_3_2_0; }

		//message=SimpleExpression
		public Assignment getMessageAssignment_3_2_1() { return cMessageAssignment_3_2_1; }

		//SimpleExpression
		public RuleCall getMessageSimpleExpressionParserRuleCall_3_2_1_0() { return cMessageSimpleExpressionParserRuleCall_3_2_1_0; }
	}

	public class ProcessChainGoToDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessChainGoToDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGotoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGotoProcessChainGoToParserRuleCall_0_0 = (RuleCall)cGotoAssignment_0.eContents().get(0);
		private final Assignment cSpecAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpecProcessChainGoToSpecParserRuleCall_1_0 = (RuleCall)cSpecAssignment_1.eContents().get(0);
		
		//ProcessChainGoToDefinition:
		//	goto=ProcessChainGoTo spec=ProcessChainGoToSpec;
		@Override public ParserRule getRule() { return rule; }

		//goto=ProcessChainGoTo spec=ProcessChainGoToSpec
		public Group getGroup() { return cGroup; }

		//goto=ProcessChainGoTo
		public Assignment getGotoAssignment_0() { return cGotoAssignment_0; }

		//ProcessChainGoTo
		public RuleCall getGotoProcessChainGoToParserRuleCall_0_0() { return cGotoProcessChainGoToParserRuleCall_0_0; }

		//spec=ProcessChainGoToSpec
		public Assignment getSpecAssignment_1() { return cSpecAssignment_1; }

		//ProcessChainGoToSpec
		public RuleCall getSpecProcessChainGoToSpecParserRuleCall_1_0() { return cSpecProcessChainGoToSpecParserRuleCall_1_0; }
	}

	public class ProcessChainGoToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessChainGoTo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cProcessChainGoToNextAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cProceedKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cProcessChainGoToPreviousAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cReverseKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cProcessChainReturnAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cReturnKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Assignment cChangeStepAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final Keyword cChangeStepAndKeyword_2_2_0_0 = (Keyword)cChangeStepAssignment_2_2_0.eContents().get(0);
		private final Assignment cChangeDirectionAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final Alternatives cChangeDirectionAlternatives_2_2_1_0 = (Alternatives)cChangeDirectionAssignment_2_2_1.eContents().get(0);
		private final Keyword cChangeDirectionProceedKeyword_2_2_1_0_0 = (Keyword)cChangeDirectionAlternatives_2_2_1_0.eContents().get(0);
		private final Keyword cChangeDirectionReverseKeyword_2_2_1_0_1 = (Keyword)cChangeDirectionAlternatives_2_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cProcessChainGoToStepAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cGotoKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cProcessChainStepAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cProcessChainStepProcessChainStepCrossReference_3_2_0 = (CrossReference)cProcessChainStepAssignment_3_2.eContents().get(0);
		private final RuleCall cProcessChainStepProcessChainStepQUALIFIED_NAMEParserRuleCall_3_2_0_1 = (RuleCall)cProcessChainStepProcessChainStepCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Keyword cReturnToKeyword_3_3_1 = (Keyword)cGroup_3_3.eContents().get(1);
		private final Assignment cReturnToAssignment_3_3_2 = (Assignment)cGroup_3_3.eContents().get(2);
		private final CrossReference cReturnToProcessChainStepCrossReference_3_3_2_0 = (CrossReference)cReturnToAssignment_3_3_2.eContents().get(0);
		private final RuleCall cReturnToProcessChainStepQUALIFIED_NAMEParserRuleCall_3_3_2_0_1 = (RuleCall)cReturnToProcessChainStepCrossReference_3_3_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_3_3 = (Keyword)cGroup_3_3.eContents().get(3);
		
		//ProcessChainGoTo:
		//	{ProcessChainGoToNext} "proceed" | {ProcessChainGoToPrevious} "reverse" | {ProcessChainReturn} "return"
		//	(changeStep?="and" changeDirection=("proceed" | "reverse"))? | {ProcessChainGoToStep} "goto"
		//	processChainStep=[ProcessChainStep|QUALIFIED_NAME] ("(" "returnTo" returnTo=[ProcessChainStep|QUALIFIED_NAME] ")")?;
		@Override public ParserRule getRule() { return rule; }

		//{ProcessChainGoToNext} "proceed" | {ProcessChainGoToPrevious} "reverse" | {ProcessChainReturn} "return"
		//(changeStep?="and" changeDirection=("proceed" | "reverse"))? | {ProcessChainGoToStep} "goto"
		//processChainStep=[ProcessChainStep|QUALIFIED_NAME] ("(" "returnTo" returnTo=[ProcessChainStep|QUALIFIED_NAME] ")")?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ProcessChainGoToNext} "proceed"
		public Group getGroup_0() { return cGroup_0; }

		//{ProcessChainGoToNext}
		public Action getProcessChainGoToNextAction_0_0() { return cProcessChainGoToNextAction_0_0; }

		//"proceed"
		public Keyword getProceedKeyword_0_1() { return cProceedKeyword_0_1; }

		//{ProcessChainGoToPrevious} "reverse"
		public Group getGroup_1() { return cGroup_1; }

		//{ProcessChainGoToPrevious}
		public Action getProcessChainGoToPreviousAction_1_0() { return cProcessChainGoToPreviousAction_1_0; }

		//"reverse"
		public Keyword getReverseKeyword_1_1() { return cReverseKeyword_1_1; }

		//{ProcessChainReturn} "return" (changeStep?="and" changeDirection=("proceed" | "reverse"))?
		public Group getGroup_2() { return cGroup_2; }

		//{ProcessChainReturn}
		public Action getProcessChainReturnAction_2_0() { return cProcessChainReturnAction_2_0; }

		//"return"
		public Keyword getReturnKeyword_2_1() { return cReturnKeyword_2_1; }

		//(changeStep?="and" changeDirection=("proceed" | "reverse"))?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//changeStep?="and"
		public Assignment getChangeStepAssignment_2_2_0() { return cChangeStepAssignment_2_2_0; }

		//"and"
		public Keyword getChangeStepAndKeyword_2_2_0_0() { return cChangeStepAndKeyword_2_2_0_0; }

		//changeDirection=("proceed" | "reverse")
		public Assignment getChangeDirectionAssignment_2_2_1() { return cChangeDirectionAssignment_2_2_1; }

		//"proceed" | "reverse"
		public Alternatives getChangeDirectionAlternatives_2_2_1_0() { return cChangeDirectionAlternatives_2_2_1_0; }

		//"proceed"
		public Keyword getChangeDirectionProceedKeyword_2_2_1_0_0() { return cChangeDirectionProceedKeyword_2_2_1_0_0; }

		//"reverse"
		public Keyword getChangeDirectionReverseKeyword_2_2_1_0_1() { return cChangeDirectionReverseKeyword_2_2_1_0_1; }

		//{ProcessChainGoToStep} "goto" processChainStep=[ProcessChainStep|QUALIFIED_NAME] ("(" "returnTo"
		//returnTo=[ProcessChainStep|QUALIFIED_NAME] ")")?
		public Group getGroup_3() { return cGroup_3; }

		//{ProcessChainGoToStep}
		public Action getProcessChainGoToStepAction_3_0() { return cProcessChainGoToStepAction_3_0; }

		//"goto"
		public Keyword getGotoKeyword_3_1() { return cGotoKeyword_3_1; }

		//processChainStep=[ProcessChainStep|QUALIFIED_NAME]
		public Assignment getProcessChainStepAssignment_3_2() { return cProcessChainStepAssignment_3_2; }

		//[ProcessChainStep|QUALIFIED_NAME]
		public CrossReference getProcessChainStepProcessChainStepCrossReference_3_2_0() { return cProcessChainStepProcessChainStepCrossReference_3_2_0; }

		//QUALIFIED_NAME
		public RuleCall getProcessChainStepProcessChainStepQUALIFIED_NAMEParserRuleCall_3_2_0_1() { return cProcessChainStepProcessChainStepQUALIFIED_NAMEParserRuleCall_3_2_0_1; }

		//("(" "returnTo" returnTo=[ProcessChainStep|QUALIFIED_NAME] ")")?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_3_0() { return cLeftParenthesisKeyword_3_3_0; }

		//"returnTo"
		public Keyword getReturnToKeyword_3_3_1() { return cReturnToKeyword_3_3_1; }

		//returnTo=[ProcessChainStep|QUALIFIED_NAME]
		public Assignment getReturnToAssignment_3_3_2() { return cReturnToAssignment_3_3_2; }

		//[ProcessChainStep|QUALIFIED_NAME]
		public CrossReference getReturnToProcessChainStepCrossReference_3_3_2_0() { return cReturnToProcessChainStepCrossReference_3_3_2_0; }

		//QUALIFIED_NAME
		public RuleCall getReturnToProcessChainStepQUALIFIED_NAMEParserRuleCall_3_3_2_0_1() { return cReturnToProcessChainStepQUALIFIED_NAMEParserRuleCall_3_3_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3_3() { return cRightParenthesisKeyword_3_3_3; }
	}

	public class ProcessChainGoToSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessChainGoToSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cProcessChainGoToSpecShorthandAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cOnKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cEventsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cEventsEventDefParserRuleCall_0_1_1_0 = (RuleCall)cEventsAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cProcessChainGoToSpecExtendedAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_1_2 = (UnorderedGroup)cGroup_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cUnorderedGroup_1_2.eContents().get(0);
		private final Keyword cOnKeyword_1_2_0_0 = (Keyword)cGroup_1_2_0.eContents().get(0);
		private final Assignment cEventsAssignment_1_2_0_1 = (Assignment)cGroup_1_2_0.eContents().get(1);
		private final RuleCall cEventsEventDefParserRuleCall_1_2_0_1_0 = (RuleCall)cEventsAssignment_1_2_0_1.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cUnorderedGroup_1_2.eContents().get(1);
		private final Keyword cGivenKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Alternatives cAlternatives_1_2_1_1 = (Alternatives)cGroup_1_2_1.eContents().get(1);
		private final Assignment cConditionAssignment_1_2_1_1_0 = (Assignment)cAlternatives_1_2_1_1.eContents().get(0);
		private final RuleCall cConditionConditionParserRuleCall_1_2_1_1_0_0 = (RuleCall)cConditionAssignment_1_2_1_1_0.eContents().get(0);
		private final Group cGroup_1_2_1_1_1 = (Group)cAlternatives_1_2_1_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_2_1_1_1_0 = (Keyword)cGroup_1_2_1_1_1.eContents().get(0);
		private final Assignment cConditionAssignment_1_2_1_1_1_1 = (Assignment)cGroup_1_2_1_1_1.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_2_1_1_1_1_0 = (RuleCall)cConditionAssignment_1_2_1_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2_1_1_1_2 = (Keyword)cGroup_1_2_1_1_1.eContents().get(2);
		private final Group cGroup_1_2_2 = (Group)cUnorderedGroup_1_2.eContents().get(2);
		private final Keyword cThenKeyword_1_2_2_0 = (Keyword)cGroup_1_2_2.eContents().get(0);
		private final Assignment cActionAssignment_1_2_2_1 = (Assignment)cGroup_1_2_2.eContents().get(1);
		private final RuleCall cActionActionDefParserRuleCall_1_2_2_1_0 = (RuleCall)cActionAssignment_1_2_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ProcessChainGoToSpec:
		//	{ProcessChainGoToSpecShorthand} ("on" events+=EventDef+)? | {ProcessChainGoToSpecExtended} "{" (("on"
		//	events+=EventDef+)? & ("given" (condition=Condition | "{" condition=Condition "}"))? & ("then" action=ActionDef)?)
		//	"}";
		@Override public ParserRule getRule() { return rule; }

		//{ProcessChainGoToSpecShorthand} ("on" events+=EventDef+)? | {ProcessChainGoToSpecExtended} "{" (("on"
		//events+=EventDef+)? & ("given" (condition=Condition | "{" condition=Condition "}"))? & ("then" action=ActionDef)?) "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ProcessChainGoToSpecShorthand} ("on" events+=EventDef+)?
		public Group getGroup_0() { return cGroup_0; }

		//{ProcessChainGoToSpecShorthand}
		public Action getProcessChainGoToSpecShorthandAction_0_0() { return cProcessChainGoToSpecShorthandAction_0_0; }

		//("on" events+=EventDef+)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"on"
		public Keyword getOnKeyword_0_1_0() { return cOnKeyword_0_1_0; }

		//events+=EventDef+
		public Assignment getEventsAssignment_0_1_1() { return cEventsAssignment_0_1_1; }

		//EventDef
		public RuleCall getEventsEventDefParserRuleCall_0_1_1_0() { return cEventsEventDefParserRuleCall_0_1_1_0; }

		//{ProcessChainGoToSpecExtended} "{" (("on" events+=EventDef+)? & ("given" (condition=Condition | "{" condition=Condition
		//"}"))? & ("then" action=ActionDef)?) "}"
		public Group getGroup_1() { return cGroup_1; }

		//{ProcessChainGoToSpecExtended}
		public Action getProcessChainGoToSpecExtendedAction_1_0() { return cProcessChainGoToSpecExtendedAction_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }

		//("on" events+=EventDef+)? & ("given" (condition=Condition | "{" condition=Condition "}"))? & ("then" action=ActionDef)?
		public UnorderedGroup getUnorderedGroup_1_2() { return cUnorderedGroup_1_2; }

		//("on" events+=EventDef+)?
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }

		//"on"
		public Keyword getOnKeyword_1_2_0_0() { return cOnKeyword_1_2_0_0; }

		//events+=EventDef+
		public Assignment getEventsAssignment_1_2_0_1() { return cEventsAssignment_1_2_0_1; }

		//EventDef
		public RuleCall getEventsEventDefParserRuleCall_1_2_0_1_0() { return cEventsEventDefParserRuleCall_1_2_0_1_0; }

		//("given" (condition=Condition | "{" condition=Condition "}"))?
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }

		//"given"
		public Keyword getGivenKeyword_1_2_1_0() { return cGivenKeyword_1_2_1_0; }

		//condition=Condition | "{" condition=Condition "}"
		public Alternatives getAlternatives_1_2_1_1() { return cAlternatives_1_2_1_1; }

		//condition=Condition
		public Assignment getConditionAssignment_1_2_1_1_0() { return cConditionAssignment_1_2_1_1_0; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_2_1_1_0_0() { return cConditionConditionParserRuleCall_1_2_1_1_0_0; }

		//"{" condition=Condition "}"
		public Group getGroup_1_2_1_1_1() { return cGroup_1_2_1_1_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_2_1_1_1_0() { return cLeftCurlyBracketKeyword_1_2_1_1_1_0; }

		//condition=Condition
		public Assignment getConditionAssignment_1_2_1_1_1_1() { return cConditionAssignment_1_2_1_1_1_1; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_2_1_1_1_1_0() { return cConditionConditionParserRuleCall_1_2_1_1_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2_1_1_1_2() { return cRightCurlyBracketKeyword_1_2_1_1_1_2; }

		//("then" action=ActionDef)?
		public Group getGroup_1_2_2() { return cGroup_1_2_2; }

		//"then"
		public Keyword getThenKeyword_1_2_2_0() { return cThenKeyword_1_2_2_0; }

		//action=ActionDef
		public Assignment getActionAssignment_1_2_2_1() { return cActionAssignment_1_2_2_1; }

		//ActionDef
		public RuleCall getActionActionDefParserRuleCall_1_2_2_1_0() { return cActionActionDefParserRuleCall_1_2_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}

	public class InvokeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvokeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInvokeDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInvokableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAtKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPathAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPathSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cPathAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cUsingKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMethodAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMethodRESTMethodEnumRuleCall_3_1_0 = (RuleCall)cMethodAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParamsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParamsInvokeParamParserRuleCall_4_1_0 = (RuleCall)cParamsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		///////////////////////////////////////////
		//// Controller layer => InvokeDefinitions
		///////////////////////////////////////////
		//InvokeDefinition:
		//	{InvokeDefinition} "invokable" ("at" path=STRING)? ("using" method=RESTMethod)? ("{" params+=InvokeParam+ "}")?;
		@Override public ParserRule getRule() { return rule; }

		//{InvokeDefinition} "invokable" ("at" path=STRING)? ("using" method=RESTMethod)? ("{" params+=InvokeParam+ "}")?
		public Group getGroup() { return cGroup; }

		//{InvokeDefinition}
		public Action getInvokeDefinitionAction_0() { return cInvokeDefinitionAction_0; }

		//"invokable"
		public Keyword getInvokableKeyword_1() { return cInvokableKeyword_1; }

		//("at" path=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//"at"
		public Keyword getAtKeyword_2_0() { return cAtKeyword_2_0; }

		//path=STRING
		public Assignment getPathAssignment_2_1() { return cPathAssignment_2_1; }

		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_2_1_0() { return cPathSTRINGTerminalRuleCall_2_1_0; }

		//("using" method=RESTMethod)?
		public Group getGroup_3() { return cGroup_3; }

		//"using"
		public Keyword getUsingKeyword_3_0() { return cUsingKeyword_3_0; }

		//method=RESTMethod
		public Assignment getMethodAssignment_3_1() { return cMethodAssignment_3_1; }

		//RESTMethod
		public RuleCall getMethodRESTMethodEnumRuleCall_3_1_0() { return cMethodRESTMethodEnumRuleCall_3_1_0; }

		//("{" params+=InvokeParam+ "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }

		//params+=InvokeParam+
		public Assignment getParamsAssignment_4_1() { return cParamsAssignment_4_1; }

		//InvokeParam
		public RuleCall getParamsInvokeParamParserRuleCall_4_1_0() { return cParamsInvokeParamParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}

	public class InvokeParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvokeParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInvokeWSParamAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFieldAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFieldContentProviderPathParserRuleCall_0_1_0 = (RuleCall)cFieldAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cAsKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cAliasAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cAliasEIDParserRuleCall_0_2_1_0 = (RuleCall)cAliasAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cInvokeDefaultValueAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cDefaultKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFieldAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFieldContentProviderPathParserRuleCall_1_2_0 = (RuleCall)cFieldAssignment_1_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cInvokeValueAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cInvokeValueInvokeValueParserRuleCall_1_4_0 = (RuleCall)cInvokeValueAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cInvokeSetContentProviderAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cSetKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cFieldAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cFieldContentProviderPathParserRuleCall_2_2_0 = (RuleCall)cFieldAssignment_2_2.eContents().get(0);
		private final Keyword cToKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cContentProviderAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cContentProviderContentProviderReferenceParserRuleCall_2_4_0 = (RuleCall)cContentProviderAssignment_2_4.eContents().get(0);
		
		//// Only contentProviderPaths are allowed since LocationProviders are readonly
		//InvokeParam:
		//	{InvokeWSParam} field=ContentProviderPath ("as" alias=EID)? | {InvokeDefaultValue} "default"
		//	field=ContentProviderPath "=" invokeValue=InvokeValue | {InvokeSetContentProvider} "set" field=ContentProviderPath
		//	"to" contentProvider=ContentProviderReference;
		@Override public ParserRule getRule() { return rule; }

		//{InvokeWSParam} field=ContentProviderPath ("as" alias=EID)? | {InvokeDefaultValue} "default" field=ContentProviderPath
		//"=" invokeValue=InvokeValue | {InvokeSetContentProvider} "set" field=ContentProviderPath "to"
		//contentProvider=ContentProviderReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//{InvokeWSParam} field=ContentProviderPath ("as" alias=EID)?
		public Group getGroup_0() { return cGroup_0; }

		//{InvokeWSParam}
		public Action getInvokeWSParamAction_0_0() { return cInvokeWSParamAction_0_0; }

		//field=ContentProviderPath
		public Assignment getFieldAssignment_0_1() { return cFieldAssignment_0_1; }

		//ContentProviderPath
		public RuleCall getFieldContentProviderPathParserRuleCall_0_1_0() { return cFieldContentProviderPathParserRuleCall_0_1_0; }

		//("as" alias=EID)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"as"
		public Keyword getAsKeyword_0_2_0() { return cAsKeyword_0_2_0; }

		//alias=EID
		public Assignment getAliasAssignment_0_2_1() { return cAliasAssignment_0_2_1; }

		//EID
		public RuleCall getAliasEIDParserRuleCall_0_2_1_0() { return cAliasEIDParserRuleCall_0_2_1_0; }

		//{InvokeDefaultValue} "default" field=ContentProviderPath "=" invokeValue=InvokeValue
		public Group getGroup_1() { return cGroup_1; }

		//{InvokeDefaultValue}
		public Action getInvokeDefaultValueAction_1_0() { return cInvokeDefaultValueAction_1_0; }

		//"default"
		public Keyword getDefaultKeyword_1_1() { return cDefaultKeyword_1_1; }

		//field=ContentProviderPath
		public Assignment getFieldAssignment_1_2() { return cFieldAssignment_1_2; }

		//ContentProviderPath
		public RuleCall getFieldContentProviderPathParserRuleCall_1_2_0() { return cFieldContentProviderPathParserRuleCall_1_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_3() { return cEqualsSignKeyword_1_3; }

		//invokeValue=InvokeValue
		public Assignment getInvokeValueAssignment_1_4() { return cInvokeValueAssignment_1_4; }

		//InvokeValue
		public RuleCall getInvokeValueInvokeValueParserRuleCall_1_4_0() { return cInvokeValueInvokeValueParserRuleCall_1_4_0; }

		//{InvokeSetContentProvider} "set" field=ContentProviderPath "to" contentProvider=ContentProviderReference
		public Group getGroup_2() { return cGroup_2; }

		//{InvokeSetContentProvider}
		public Action getInvokeSetContentProviderAction_2_0() { return cInvokeSetContentProviderAction_2_0; }

		//"set"
		public Keyword getSetKeyword_2_1() { return cSetKeyword_2_1; }

		//field=ContentProviderPath
		public Assignment getFieldAssignment_2_2() { return cFieldAssignment_2_2; }

		//ContentProviderPath
		public RuleCall getFieldContentProviderPathParserRuleCall_2_2_0() { return cFieldContentProviderPathParserRuleCall_2_2_0; }

		//"to"
		public Keyword getToKeyword_2_3() { return cToKeyword_2_3; }

		//contentProvider=ContentProviderReference
		public Assignment getContentProviderAssignment_2_4() { return cContentProviderAssignment_2_4; }

		//ContentProviderReference
		public RuleCall getContentProviderContentProviderReferenceParserRuleCall_2_4_0() { return cContentProviderContentProviderReferenceParserRuleCall_2_4_0; }
	}

	public class InvokeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvokeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInvokeStringValueAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cInvokeIntValueAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cInvokeBooleanValueAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueBooleanEnumRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cInvokeDateValueAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueDATEParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cInvokeTimeValueAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueTIMEParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cInvokeDateTimeValueAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueDATE_TIMEParserRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cInvokeFloatValueAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cValueFLOATParserRuleCall_6_1_0 = (RuleCall)cValueAssignment_6_1.eContents().get(0);
		
		//InvokeValue:
		//	{InvokeStringValue} value=STRING | {InvokeIntValue} value=INT | {InvokeBooleanValue} value=Boolean |
		//	{InvokeDateValue} value=DATE | {InvokeTimeValue} value=TIME | {InvokeDateTimeValue} value=DATE_TIME |
		//	{InvokeFloatValue} value=FLOAT;
		@Override public ParserRule getRule() { return rule; }

		//{InvokeStringValue} value=STRING | {InvokeIntValue} value=INT | {InvokeBooleanValue} value=Boolean | {InvokeDateValue}
		//value=DATE | {InvokeTimeValue} value=TIME | {InvokeDateTimeValue} value=DATE_TIME | {InvokeFloatValue} value=FLOAT
		public Alternatives getAlternatives() { return cAlternatives; }

		//{InvokeStringValue} value=STRING
		public Group getGroup_0() { return cGroup_0; }

		//{InvokeStringValue}
		public Action getInvokeStringValueAction_0_0() { return cInvokeStringValueAction_0_0; }

		//value=STRING
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_1_0() { return cValueSTRINGTerminalRuleCall_0_1_0; }

		//{InvokeIntValue} value=INT
		public Group getGroup_1() { return cGroup_1; }

		//{InvokeIntValue}
		public Action getInvokeIntValueAction_1_0() { return cInvokeIntValueAction_1_0; }

		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }

		//{InvokeBooleanValue} value=Boolean
		public Group getGroup_2() { return cGroup_2; }

		//{InvokeBooleanValue}
		public Action getInvokeBooleanValueAction_2_0() { return cInvokeBooleanValueAction_2_0; }

		//value=Boolean
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//Boolean
		public RuleCall getValueBooleanEnumRuleCall_2_1_0() { return cValueBooleanEnumRuleCall_2_1_0; }

		//{InvokeDateValue} value=DATE
		public Group getGroup_3() { return cGroup_3; }

		//{InvokeDateValue}
		public Action getInvokeDateValueAction_3_0() { return cInvokeDateValueAction_3_0; }

		//value=DATE
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//DATE
		public RuleCall getValueDATEParserRuleCall_3_1_0() { return cValueDATEParserRuleCall_3_1_0; }

		//{InvokeTimeValue} value=TIME
		public Group getGroup_4() { return cGroup_4; }

		//{InvokeTimeValue}
		public Action getInvokeTimeValueAction_4_0() { return cInvokeTimeValueAction_4_0; }

		//value=TIME
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//TIME
		public RuleCall getValueTIMEParserRuleCall_4_1_0() { return cValueTIMEParserRuleCall_4_1_0; }

		//{InvokeDateTimeValue} value=DATE_TIME
		public Group getGroup_5() { return cGroup_5; }

		//{InvokeDateTimeValue}
		public Action getInvokeDateTimeValueAction_5_0() { return cInvokeDateTimeValueAction_5_0; }

		//value=DATE_TIME
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }

		//DATE_TIME
		public RuleCall getValueDATE_TIMEParserRuleCall_5_1_0() { return cValueDATE_TIMEParserRuleCall_5_1_0; }

		//{InvokeFloatValue} value=FLOAT
		public Group getGroup_6() { return cGroup_6; }

		//{InvokeFloatValue}
		public Action getInvokeFloatValueAction_6_0() { return cInvokeFloatValueAction_6_0; }

		//value=FLOAT
		public Assignment getValueAssignment_6_1() { return cValueAssignment_6_1; }

		//FLOAT
		public RuleCall getValueFLOATParserRuleCall_6_1_0() { return cValueFLOATParserRuleCall_6_1_0; }
	}

	public class OnConditionEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OnConditionEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOnConditionEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionConditionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///////////////////////////////////////////////
		//// Controller layer => OnConditionEvent
		///////////////////////////////////////////////
		/// *
		// * The OnConditionEvent provides the user the possibility
		// * to define own events. The OnConditionEvent specifies a
		// * Condition. If this Condition is fulfilled, the
		// * OnConditionEvent is fired.
		// * / OnConditionEvent:
		//	"event" "OnConditionEvent" name=EID "{" condition=Condition "}";
		@Override public ParserRule getRule() { return rule; }

		//"event" "OnConditionEvent" name=EID "{" condition=Condition "}"
		public Group getGroup() { return cGroup; }

		//"event"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }

		//"OnConditionEvent"
		public Keyword getOnConditionEventKeyword_1() { return cOnConditionEventKeyword_1; }

		//name=EID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EID
		public RuleCall getNameEIDParserRuleCall_2_0() { return cNameEIDParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//condition=Condition
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_4_0() { return cConditionConditionParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///////////////////////////////////////////////
		//// Controller layer => Condition
		///////////////////////////////////////////////
		/// *
		// * A Condition allows to compose ConditionalExpressions with the operators 'not', 'and' and 'or'.
		// * / Condition returns ConditionalExpression:
		//	Or;
		@Override public ParserRule getRule() { return rule; }

		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cOP_CONDITION_ORParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionAndParserRuleCall_1_2_0 = (RuleCall)cRightExpressionAssignment_1_2.eContents().get(0);
		
		/// **
		// * Representation of an arbitrary number of conditional expressions connected by OR.
		// * Explicitly model precedence of AND over OR.
		// * / Or returns ConditionalExpression:
		//	And ({Or.leftExpression=current} OP_CONDITION_OR rightExpression=And)*;
		@Override public ParserRule getRule() { return rule; }

		//And ({Or.leftExpression=current} OP_CONDITION_OR rightExpression=And)*
		public Group getGroup() { return cGroup; }

		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }

		//({Or.leftExpression=current} OP_CONDITION_OR rightExpression=And)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.leftExpression=current}
		public Action getOrLeftExpressionAction_1_0() { return cOrLeftExpressionAction_1_0; }

		//OP_CONDITION_OR
		public RuleCall getOP_CONDITION_ORParserRuleCall_1_1() { return cOP_CONDITION_ORParserRuleCall_1_1; }

		//rightExpression=And
		public Assignment getRightExpressionAssignment_1_2() { return cRightExpressionAssignment_1_2; }

		//And
		public RuleCall getRightExpressionAndParserRuleCall_1_2_0() { return cRightExpressionAndParserRuleCall_1_2_0; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditionalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cOP_CONDITION_ANDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionConditionalExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExpressionAssignment_1_2.eContents().get(0);
		
		/// **
		// * Representation of an arbitrary number of conditional expressions connected by AND.
		// * Explicitly model precedence of AND over OR.
		// * / And returns ConditionalExpression:
		//	ConditionalExpression ({And.leftExpression=current} OP_CONDITION_AND rightExpression=ConditionalExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//ConditionalExpression ({And.leftExpression=current} OP_CONDITION_AND rightExpression=ConditionalExpression)*
		public Group getGroup() { return cGroup; }

		//ConditionalExpression
		public RuleCall getConditionalExpressionParserRuleCall_0() { return cConditionalExpressionParserRuleCall_0; }

		//({And.leftExpression=current} OP_CONDITION_AND rightExpression=ConditionalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.leftExpression=current}
		public Action getAndLeftExpressionAction_1_0() { return cAndLeftExpressionAction_1_0; }

		//OP_CONDITION_AND
		public RuleCall getOP_CONDITION_ANDParserRuleCall_1_1() { return cOP_CONDITION_ANDParserRuleCall_1_1; }

		//rightExpression=ConditionalExpression
		public Assignment getRightExpressionAssignment_1_2() { return cRightExpressionAssignment_1_2; }

		//ConditionalExpression
		public RuleCall getRightExpressionConditionalExpressionParserRuleCall_1_2_0() { return cRightExpressionConditionalExpressionParserRuleCall_1_2_0; }
	}

	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cOrParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cOP_CONDITION_NOTParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionConditionalExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBooleanExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueBooleanEnumRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final RuleCall cComplexConditionalExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		/// *
		// * A ConditionalExpression defines an expression that evaluates to either true or false.
		// * It is possible to set a BooleanExpression, an EqualsExpression that compares to values,
		// * or a GuiElementStateExpression that proofs the state of a ViewGUIElement.
		// * / ConditionalExpression:
		//	"(" Or ")" | {Not} OP_CONDITION_NOT expression=ConditionalExpression | {BooleanExpression} value=Boolean | =>
		//	ComplexConditionalExpression;
		@Override public ParserRule getRule() { return rule; }

		//"(" Or ")" | {Not} OP_CONDITION_NOT expression=ConditionalExpression | {BooleanExpression} value=Boolean | =>
		//ComplexConditionalExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" Or ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Or
		public RuleCall getOrParserRuleCall_0_1() { return cOrParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//{Not} OP_CONDITION_NOT expression=ConditionalExpression
		public Group getGroup_1() { return cGroup_1; }

		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }

		//OP_CONDITION_NOT
		public RuleCall getOP_CONDITION_NOTParserRuleCall_1_1() { return cOP_CONDITION_NOTParserRuleCall_1_1; }

		//expression=ConditionalExpression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//ConditionalExpression
		public RuleCall getExpressionConditionalExpressionParserRuleCall_1_2_0() { return cExpressionConditionalExpressionParserRuleCall_1_2_0; }

		//{BooleanExpression} value=Boolean
		public Group getGroup_2() { return cGroup_2; }

		//{BooleanExpression}
		public Action getBooleanExpressionAction_2_0() { return cBooleanExpressionAction_2_0; }

		//value=Boolean
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//Boolean
		public RuleCall getValueBooleanEnumRuleCall_2_1_0() { return cValueBooleanEnumRuleCall_2_1_0; }

		//=> ComplexConditionalExpression
		public RuleCall getComplexConditionalExpressionParserRuleCall_3() { return cComplexConditionalExpressionParserRuleCall_3; }
	}

	public class ComplexConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexConditionalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Group cGroup_0_0_0 = (Group)cGroup_0_0.eContents().get(0);
		private final RuleCall cAbstractViewGUIElementRefParserRuleCall_0_0_0_0 = (RuleCall)cGroup_0_0_0.eContents().get(0);
		private final Keyword cIsKeyword_0_0_0_1 = (Keyword)cGroup_0_0_0.eContents().get(1);
		private final Action cGuiElementStateExpressionReferenceAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Assignment cIsStateAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cIsStateViewElementStateEnumRuleCall_0_2_0 = (RuleCall)cIsStateAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cSimpleExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Action cCompareExpressionEqLeftAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cOpAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOpOperatorEnumRuleCall_1_2_0 = (RuleCall)cOpAssignment_1_2.eContents().get(0);
		private final Assignment cEqRightAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cEqRightSimpleExpressionParserRuleCall_1_3_0 = (RuleCall)cEqRightAssignment_1_3.eContents().get(0);
		
		//ComplexConditionalExpression returns ConditionalExpression:
		//	=> (AbstractViewGUIElementRef "is") {GuiElementStateExpression.reference=current} isState=ViewElementState |
		//	SimpleExpression {CompareExpression.eqLeft=current} op=Operator eqRight=SimpleExpression;
		@Override public ParserRule getRule() { return rule; }

		//=> (AbstractViewGUIElementRef "is") {GuiElementStateExpression.reference=current} isState=ViewElementState |
		//SimpleExpression {CompareExpression.eqLeft=current} op=Operator eqRight=SimpleExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> (AbstractViewGUIElementRef "is") {GuiElementStateExpression.reference=current} isState=ViewElementState
		public Group getGroup_0() { return cGroup_0; }

		//=> (AbstractViewGUIElementRef "is")
		public Group getGroup_0_0() { return cGroup_0_0; }

		//AbstractViewGUIElementRef "is"
		public Group getGroup_0_0_0() { return cGroup_0_0_0; }

		//AbstractViewGUIElementRef
		public RuleCall getAbstractViewGUIElementRefParserRuleCall_0_0_0_0() { return cAbstractViewGUIElementRefParserRuleCall_0_0_0_0; }

		//"is"
		public Keyword getIsKeyword_0_0_0_1() { return cIsKeyword_0_0_0_1; }

		//{GuiElementStateExpression.reference=current}
		public Action getGuiElementStateExpressionReferenceAction_0_1() { return cGuiElementStateExpressionReferenceAction_0_1; }

		//isState=ViewElementState
		public Assignment getIsStateAssignment_0_2() { return cIsStateAssignment_0_2; }

		//ViewElementState
		public RuleCall getIsStateViewElementStateEnumRuleCall_0_2_0() { return cIsStateViewElementStateEnumRuleCall_0_2_0; }

		//SimpleExpression {CompareExpression.eqLeft=current} op=Operator eqRight=SimpleExpression
		public Group getGroup_1() { return cGroup_1; }

		//SimpleExpression
		public RuleCall getSimpleExpressionParserRuleCall_1_0() { return cSimpleExpressionParserRuleCall_1_0; }

		//{CompareExpression.eqLeft=current}
		public Action getCompareExpressionEqLeftAction_1_1() { return cCompareExpressionEqLeftAction_1_1; }

		//op=Operator
		public Assignment getOpAssignment_1_2() { return cOpAssignment_1_2; }

		//Operator
		public RuleCall getOpOperatorEnumRuleCall_1_2_0() { return cOpOperatorEnumRuleCall_1_2_0; }

		//eqRight=SimpleExpression
		public Assignment getEqRightAssignment_1_3() { return cEqRightAssignment_1_3; }

		//SimpleExpression
		public RuleCall getEqRightSimpleExpressionParserRuleCall_1_3_0() { return cEqRightSimpleExpressionParserRuleCall_1_3_0; }
	}

	public class SimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleExpression");
		private final RuleCall cConcatenatedStringParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// *
		// * A SimpleExpression contains either a simple data type value of STRING, INT,
		// * FLOAT, DATE, TIME, DATE_TIME or a reference to the value of a ViewGUIElement
		// * or a reference to an attribute of an entity that is managed by a content provider.
		// * Furthermore, it can be a mathematical expression or a string concatenation. Validators
		// * have to be implemented to ensure that all assignments match the data type of the
		// * target (input field / content provider).
		// * / SimpleExpression:
		//	ConcatenatedString;
		@Override public ParserRule getRule() { return rule; }

		//ConcatenatedString
		public RuleCall getConcatenatedStringParserRuleCall() { return cConcatenatedStringParserRuleCall; }
	}

	public class WebServiceCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WebServiceCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternalWebServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cUrlKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cUrlAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cUrlSTRINGTerminalRuleCall_3_0_1_0 = (RuleCall)cUrlAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cMethodKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cMethodAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cMethodRESTMethodEnumRuleCall_3_1_1_0 = (RuleCall)cMethodAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cQueryparamsKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Assignment cQueryparamsAssignment_3_2_2 = (Assignment)cGroup_3_2.eContents().get(2);
		private final RuleCall cQueryparamsRESTParamParserRuleCall_3_2_2_0 = (RuleCall)cQueryparamsAssignment_3_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2_3 = (Keyword)cGroup_3_2.eContents().get(3);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cBodyparamsKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_3_1 = (Keyword)cGroup_3_3.eContents().get(1);
		private final Assignment cBodyparamsAssignment_3_3_2 = (Assignment)cGroup_3_3.eContents().get(2);
		private final RuleCall cBodyparamsRESTParamParserRuleCall_3_3_2_0 = (RuleCall)cBodyparamsAssignment_3_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3_3 = (Keyword)cGroup_3_3.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///////////////////////////////////////////////
		//// Controller Layer =>  Web Services
		///////////////////////////////////////////////
		//WebServiceCall:
		//	"externalWebService" name=EID "{" ("url" url=STRING & "method" method=RESTMethod & ("queryparams" "("
		//	queryparams+=RESTParam* ")")? & ("bodyparams" "(" bodyparams+=RESTParam* ")")?) "}";
		@Override public ParserRule getRule() { return rule; }

		//"externalWebService" name=EID "{" ("url" url=STRING & "method" method=RESTMethod & ("queryparams" "("
		//queryparams+=RESTParam* ")")? & ("bodyparams" "(" bodyparams+=RESTParam* ")")?) "}"
		public Group getGroup() { return cGroup; }

		//"externalWebService"
		public Keyword getExternalWebServiceKeyword_0() { return cExternalWebServiceKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"url" url=STRING & "method" method=RESTMethod & ("queryparams" "(" queryparams+=RESTParam* ")")? & ("bodyparams" "("
		//bodyparams+=RESTParam* ")")?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//"url" url=STRING
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"url"
		public Keyword getUrlKeyword_3_0_0() { return cUrlKeyword_3_0_0; }

		//url=STRING
		public Assignment getUrlAssignment_3_0_1() { return cUrlAssignment_3_0_1; }

		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_3_0_1_0() { return cUrlSTRINGTerminalRuleCall_3_0_1_0; }

		//"method" method=RESTMethod
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"method"
		public Keyword getMethodKeyword_3_1_0() { return cMethodKeyword_3_1_0; }

		//method=RESTMethod
		public Assignment getMethodAssignment_3_1_1() { return cMethodAssignment_3_1_1; }

		//RESTMethod
		public RuleCall getMethodRESTMethodEnumRuleCall_3_1_1_0() { return cMethodRESTMethodEnumRuleCall_3_1_1_0; }

		//("queryparams" "(" queryparams+=RESTParam* ")")?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"queryparams"
		public Keyword getQueryparamsKeyword_3_2_0() { return cQueryparamsKeyword_3_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_2_1() { return cLeftParenthesisKeyword_3_2_1; }

		//queryparams+=RESTParam*
		public Assignment getQueryparamsAssignment_3_2_2() { return cQueryparamsAssignment_3_2_2; }

		//RESTParam
		public RuleCall getQueryparamsRESTParamParserRuleCall_3_2_2_0() { return cQueryparamsRESTParamParserRuleCall_3_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2_3() { return cRightParenthesisKeyword_3_2_3; }

		//("bodyparams" "(" bodyparams+=RESTParam* ")")?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//"bodyparams"
		public Keyword getBodyparamsKeyword_3_3_0() { return cBodyparamsKeyword_3_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_3_1() { return cLeftParenthesisKeyword_3_3_1; }

		//bodyparams+=RESTParam*
		public Assignment getBodyparamsAssignment_3_3_2() { return cBodyparamsAssignment_3_3_2; }

		//RESTParam
		public RuleCall getBodyparamsRESTParamParserRuleCall_3_3_2_0() { return cBodyparamsRESTParamParserRuleCall_3_3_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3_3() { return cRightParenthesisKeyword_3_3_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class RESTParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RESTParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeySTRINGTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueRESTValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//RESTParam:
		//	key=STRING ":" value=RESTValue;
		@Override public ParserRule getRule() { return rule; }

		//key=STRING ":" value=RESTValue
		public Group getGroup() { return cGroup; }

		//key=STRING
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_0_0() { return cKeySTRINGTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=RESTValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//RESTValue
		public RuleCall getValueRESTValueParserRuleCall_2_0() { return cValueRESTValueParserRuleCall_2_0; }
	}

	public class RESTValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RESTValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStringRestParamAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntegerRestParamAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBooleanRestParamAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueBooleanEnumRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cFloatRestParamAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueFLOATParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cContentProviderRestParamAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueContentProviderPathParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		
		//RESTValue:
		//	{StringRestParam} value=STRING | {IntegerRestParam} value=INT | {BooleanRestParam} value=Boolean | {FloatRestParam}
		//	value=FLOAT | {ContentProviderRestParam} value=ContentProviderPath;
		@Override public ParserRule getRule() { return rule; }

		//{StringRestParam} value=STRING | {IntegerRestParam} value=INT | {BooleanRestParam} value=Boolean | {FloatRestParam}
		//value=FLOAT | {ContentProviderRestParam} value=ContentProviderPath
		public Alternatives getAlternatives() { return cAlternatives; }

		//{StringRestParam} value=STRING
		public Group getGroup_0() { return cGroup_0; }

		//{StringRestParam}
		public Action getStringRestParamAction_0_0() { return cStringRestParamAction_0_0; }

		//value=STRING
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_1_0() { return cValueSTRINGTerminalRuleCall_0_1_0; }

		//{IntegerRestParam} value=INT
		public Group getGroup_1() { return cGroup_1; }

		//{IntegerRestParam}
		public Action getIntegerRestParamAction_1_0() { return cIntegerRestParamAction_1_0; }

		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }

		//{BooleanRestParam} value=Boolean
		public Group getGroup_2() { return cGroup_2; }

		//{BooleanRestParam}
		public Action getBooleanRestParamAction_2_0() { return cBooleanRestParamAction_2_0; }

		//value=Boolean
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//Boolean
		public RuleCall getValueBooleanEnumRuleCall_2_1_0() { return cValueBooleanEnumRuleCall_2_1_0; }

		//{FloatRestParam} value=FLOAT
		public Group getGroup_3() { return cGroup_3; }

		//{FloatRestParam}
		public Action getFloatRestParamAction_3_0() { return cFloatRestParamAction_3_0; }

		//value=FLOAT
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//FLOAT
		public RuleCall getValueFLOATParserRuleCall_3_1_0() { return cValueFLOATParserRuleCall_3_1_0; }

		//{ContentProviderRestParam} value=ContentProviderPath
		public Group getGroup_4() { return cGroup_4; }

		//{ContentProviderRestParam}
		public Action getContentProviderRestParamAction_4_0() { return cContentProviderRestParamAction_4_0; }

		//value=ContentProviderPath
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//ContentProviderPath
		public RuleCall getValueContentProviderPathParserRuleCall_4_1_0() { return cValueContentProviderPathParserRuleCall_4_1_0; }
	}

	public class ConcatenatedStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConcatenatedString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStringPartialParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConcatenatedStringLeftStringAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cOP_STRING_CONCATParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightStringAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightStringStringPartialParserRuleCall_1_2_0 = (RuleCall)cRightStringAssignment_1_2.eContents().get(0);
		
		///////////////////////////////////////////////
		//// Controller Layer => Concatenated String
		///////////////////////////////////////////////
		/// **
		// * Each Value has a string representation:
		// * <ul>
		// *   <li>INT: 1 => "1"</li>
		// *   <li>FLOAT: 1.0 => "1.0"</li>
		// *   <li>STRING: "str" => "str"</li>
		// *   <li>BOOLEAN: true => "true"</li>
		// *   <li>DATE: 2000-01-01 => "2000-01-01"</li>
		// *   <li>TIME: 00:00:00Z => "00:00:00Z"</li>
		// *   <li>DATE_TIME: 2000-01-01T00:00:00Z => "2000-01-01T00:00:00Z"</li>
		// *   <li>Entity => "Entity"</li>
		// * </ul>
		// * 
		// * TODO - consider to use a human readable format for the string representation of DATE, TIME and DATE_TIME
		// * / ConcatenatedString returns SimpleExpression:
		//	StringPartial ({ConcatenatedString.leftString=current} OP_STRING_CONCAT rightString=StringPartial)*;
		@Override public ParserRule getRule() { return rule; }

		//StringPartial ({ConcatenatedString.leftString=current} OP_STRING_CONCAT rightString=StringPartial)*
		public Group getGroup() { return cGroup; }

		//StringPartial
		public RuleCall getStringPartialParserRuleCall_0() { return cStringPartialParserRuleCall_0; }

		//({ConcatenatedString.leftString=current} OP_STRING_CONCAT rightString=StringPartial)*
		public Group getGroup_1() { return cGroup_1; }

		//{ConcatenatedString.leftString=current}
		public Action getConcatenatedStringLeftStringAction_1_0() { return cConcatenatedStringLeftStringAction_1_0; }

		//OP_STRING_CONCAT
		public RuleCall getOP_STRING_CONCATParserRuleCall_1_1() { return cOP_STRING_CONCATParserRuleCall_1_1; }

		//rightString=StringPartial
		public Assignment getRightStringAssignment_1_2() { return cRightStringAssignment_1_2; }

		//StringPartial
		public RuleCall getRightStringStringPartialParserRuleCall_1_2_0() { return cRightStringStringPartialParserRuleCall_1_2_0; }
	}

	public class StringPartialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringPartial");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMathExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cConcatenatedStringParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStringValAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBooleanValAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueBooleanEnumRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cDateValAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueDATEParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cTimeValAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueTIMEParserRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cDateTimeValAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cValueDATE_TIMEParserRuleCall_6_1_0 = (RuleCall)cValueAssignment_6_1.eContents().get(0);
		
		//StringPartial returns SimpleExpression:
		//	MathExpression | "(" ConcatenatedString ")" | {StringVal} value=STRING | {BooleanVal} value=Boolean | {DateVal}
		//	value=DATE | {TimeVal} value=TIME | {DateTimeVal} value=DATE_TIME;
		@Override public ParserRule getRule() { return rule; }

		//=> MathExpression | "(" ConcatenatedString ")" | {StringVal} value=STRING | {BooleanVal} value=Boolean | {DateVal}
		//value=DATE | {TimeVal} value=TIME | {DateTimeVal} value=DATE_TIME
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> MathExpression
		public RuleCall getMathExpressionParserRuleCall_0() { return cMathExpressionParserRuleCall_0; }

		//"(" ConcatenatedString ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//ConcatenatedString
		public RuleCall getConcatenatedStringParserRuleCall_1_1() { return cConcatenatedStringParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//{StringVal} value=STRING
		public Group getGroup_2() { return cGroup_2; }

		//{StringVal}
		public Action getStringValAction_2_0() { return cStringValAction_2_0; }

		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }

		//{BooleanVal} value=Boolean
		public Group getGroup_3() { return cGroup_3; }

		//{BooleanVal}
		public Action getBooleanValAction_3_0() { return cBooleanValAction_3_0; }

		//value=Boolean
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//Boolean
		public RuleCall getValueBooleanEnumRuleCall_3_1_0() { return cValueBooleanEnumRuleCall_3_1_0; }

		//{DateVal} value=DATE
		public Group getGroup_4() { return cGroup_4; }

		//{DateVal}
		public Action getDateValAction_4_0() { return cDateValAction_4_0; }

		//value=DATE
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//DATE
		public RuleCall getValueDATEParserRuleCall_4_1_0() { return cValueDATEParserRuleCall_4_1_0; }

		//{TimeVal} value=TIME
		public Group getGroup_5() { return cGroup_5; }

		//{TimeVal}
		public Action getTimeValAction_5_0() { return cTimeValAction_5_0; }

		//value=TIME
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }

		//TIME
		public RuleCall getValueTIMEParserRuleCall_5_1_0() { return cValueTIMEParserRuleCall_5_1_0; }

		//{DateTimeVal} value=DATE_TIME
		public Group getGroup_6() { return cGroup_6; }

		//{DateTimeVal}
		public Action getDateTimeValAction_6_0() { return cDateTimeValAction_6_0; }

		//value=DATE_TIME
		public Assignment getValueAssignment_6_1() { return cValueAssignment_6_1; }

		//DATE_TIME
		public RuleCall getValueDATE_TIMEParserRuleCall_6_1_0() { return cValueDATE_TIMEParserRuleCall_6_1_0; }
	}

	public class MathLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MathLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractContentProviderPathParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractProviderReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAbstractViewGUIElementRefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cIntValAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cFloatValAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueFLOATParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		
		///////////////////////////////////////////////
		//// Controller Layer => Math Expressions
		///////////////////////////////////////////////
		//MathLiteral returns SimpleExpression:
		//	AbstractContentProviderPath | AbstractProviderReference | AbstractViewGUIElementRef | {IntVal} value=INT | {FloatVal}
		//	value=FLOAT;
		@Override public ParserRule getRule() { return rule; }

		//=> AbstractContentProviderPath | AbstractProviderReference | AbstractViewGUIElementRef | {IntVal} value=INT | {FloatVal}
		//value=FLOAT
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> AbstractContentProviderPath
		public RuleCall getAbstractContentProviderPathParserRuleCall_0() { return cAbstractContentProviderPathParserRuleCall_0; }

		//AbstractProviderReference
		public RuleCall getAbstractProviderReferenceParserRuleCall_1() { return cAbstractProviderReferenceParserRuleCall_1; }

		//AbstractViewGUIElementRef
		public RuleCall getAbstractViewGUIElementRefParserRuleCall_2() { return cAbstractViewGUIElementRefParserRuleCall_2; }

		//{IntVal} value=INT
		public Group getGroup_3() { return cGroup_3; }

		//{IntVal}
		public Action getIntValAction_3_0() { return cIntValAction_3_0; }

		//value=INT
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_3_1_0() { return cValueINTTerminalRuleCall_3_1_0; }

		//{FloatVal} value=FLOAT
		public Group getGroup_4() { return cGroup_4; }

		//{FloatVal}
		public Action getFloatValAction_4_0() { return cFloatValAction_4_0; }

		//value=FLOAT
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//FLOAT
		public RuleCall getValueFLOATParserRuleCall_4_1_0() { return cValueFLOATParserRuleCall_4_1_0; }
	}

	public class AdditionSubtractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditionSubtraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationDivisionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cOP_MATH_PLUSParserRuleCall_1_0_0_1 = (RuleCall)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftOperandAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cOP_MATH_MINUSParserRuleCall_1_0_1_1 = (RuleCall)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandMultiplicationDivisionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//AdditionSubtraction returns SimpleExpression:
		//	MultiplicationDivision (({Plus.leftOperand=current} OP_MATH_PLUS | {Minus.leftOperand=current} OP_MATH_MINUS)
		//	rightOperand=MultiplicationDivision)*;
		@Override public ParserRule getRule() { return rule; }

		//MultiplicationDivision (({Plus.leftOperand=current} OP_MATH_PLUS | {Minus.leftOperand=current} OP_MATH_MINUS)
		//rightOperand=MultiplicationDivision)*
		public Group getGroup() { return cGroup; }

		//MultiplicationDivision
		public RuleCall getMultiplicationDivisionParserRuleCall_0() { return cMultiplicationDivisionParserRuleCall_0; }

		//(({Plus.leftOperand=current} OP_MATH_PLUS | {Minus.leftOperand=current} OP_MATH_MINUS)
		//rightOperand=MultiplicationDivision)*
		public Group getGroup_1() { return cGroup_1; }

		//{Plus.leftOperand=current} OP_MATH_PLUS | {Minus.leftOperand=current} OP_MATH_MINUS
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Plus.leftOperand=current} OP_MATH_PLUS
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Plus.leftOperand=current}
		public Action getPlusLeftOperandAction_1_0_0_0() { return cPlusLeftOperandAction_1_0_0_0; }

		//OP_MATH_PLUS
		public RuleCall getOP_MATH_PLUSParserRuleCall_1_0_0_1() { return cOP_MATH_PLUSParserRuleCall_1_0_0_1; }

		//{Minus.leftOperand=current} OP_MATH_MINUS
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Minus.leftOperand=current}
		public Action getMinusLeftOperandAction_1_0_1_0() { return cMinusLeftOperandAction_1_0_1_0; }

		//OP_MATH_MINUS
		public RuleCall getOP_MATH_MINUSParserRuleCall_1_0_1_1() { return cOP_MATH_MINUSParserRuleCall_1_0_1_1; }

		//rightOperand=MultiplicationDivision
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//MultiplicationDivision
		public RuleCall getRightOperandMultiplicationDivisionParserRuleCall_1_1_0() { return cRightOperandMultiplicationDivisionParserRuleCall_1_1_0; }
	}

	public class MultiplicationDivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicationDivision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMathSubExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cOP_MATH_MULTParserRuleCall_1_0_0_1 = (RuleCall)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftOperandAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cOP_MATH_DIVParserRuleCall_1_0_1_1 = (RuleCall)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandMathSubExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//MultiplicationDivision returns SimpleExpression:
		//	MathSubExpression (({Mult.leftOperand=current} OP_MATH_MULT | {Div.leftOperand=current} OP_MATH_DIV)
		//	rightOperand=MathSubExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//MathSubExpression (({Mult.leftOperand=current} OP_MATH_MULT | {Div.leftOperand=current} OP_MATH_DIV)
		//rightOperand=MathSubExpression)*
		public Group getGroup() { return cGroup; }

		//MathSubExpression
		public RuleCall getMathSubExpressionParserRuleCall_0() { return cMathSubExpressionParserRuleCall_0; }

		//(({Mult.leftOperand=current} OP_MATH_MULT | {Div.leftOperand=current} OP_MATH_DIV) rightOperand=MathSubExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{Mult.leftOperand=current} OP_MATH_MULT | {Div.leftOperand=current} OP_MATH_DIV
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Mult.leftOperand=current} OP_MATH_MULT
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Mult.leftOperand=current}
		public Action getMultLeftOperandAction_1_0_0_0() { return cMultLeftOperandAction_1_0_0_0; }

		//OP_MATH_MULT
		public RuleCall getOP_MATH_MULTParserRuleCall_1_0_0_1() { return cOP_MATH_MULTParserRuleCall_1_0_0_1; }

		//{Div.leftOperand=current} OP_MATH_DIV
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Div.leftOperand=current}
		public Action getDivLeftOperandAction_1_0_1_0() { return cDivLeftOperandAction_1_0_1_0; }

		//OP_MATH_DIV
		public RuleCall getOP_MATH_DIVParserRuleCall_1_0_1_1() { return cOP_MATH_DIVParserRuleCall_1_0_1_1; }

		//rightOperand=MathSubExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//MathSubExpression
		public RuleCall getRightOperandMathSubExpressionParserRuleCall_1_1_0() { return cRightOperandMathSubExpressionParserRuleCall_1_1_0; }
	}

	public class MathSubExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MathSubExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMathLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cAdditionSubtractionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//MathSubExpression returns SimpleExpression:
		//	MathLiteral | "(" AdditionSubtraction ")";
		@Override public ParserRule getRule() { return rule; }

		//MathLiteral | "(" AdditionSubtraction ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//MathLiteral
		public RuleCall getMathLiteralParserRuleCall_0() { return cMathLiteralParserRuleCall_0; }

		//"(" AdditionSubtraction ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//AdditionSubtraction
		public RuleCall getAdditionSubtractionParserRuleCall_1_1() { return cAdditionSubtractionParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class MathExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MathExpression");
		private final RuleCall cAdditionSubtractionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MathExpression returns SimpleExpression:
		//	AdditionSubtraction;
		@Override public ParserRule getRule() { return rule; }

		//AdditionSubtraction
		public RuleCall getAdditionSubtractionParserRuleCall() { return cAdditionSubtractionParserRuleCall; }
	}

	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cModelElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cModelElementsModelElementParserRuleCall_0 = (RuleCall)cModelElementsAssignment.eContents().get(0);
		
		///////////////////////////////////////
		///////////////////////////////////////
		//// Model layer
		///////////////////////////////////////
		///////////////////////////////////////
		/// *
		// * The root Model element that contains all ModelElements.
		// * / Model:
		//	modelElements+=ModelElement+;
		@Override public ParserRule getRule() { return rule; }

		//modelElements+=ModelElement+
		public Assignment getModelElementsAssignment() { return cModelElementsAssignment; }

		//ModelElement
		public RuleCall getModelElementsModelElementParserRuleCall_0() { return cModelElementsModelElementParserRuleCall_0; }
	}

	public class ModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * The ModelElement is the super type of all possible ModelElements.
		// * / ModelElement:
		//	Entity | Enum;
		@Override public ParserRule getRule() { return rule; }

		//Entity | Enum
		public Alternatives getAlternatives() { return cAlternatives; }

		//Entity
		public RuleCall getEntityParserRuleCall_0() { return cEntityParserRuleCall_0; }

		//Enum
		public RuleCall getEnumParserRuleCall_1() { return cEnumParserRuleCall_1; }
	}

	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEnumBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEnumBodyEnumBodyParserRuleCall_3_0 = (RuleCall)cEnumBodyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * An Enum allows the user to define a list of STRING values, stored
		// * in the enumBody.
		// * / Enum:
		//	"enum" name=EID "{" enumBody=EnumBody? "}";
		@Override public ParserRule getRule() { return rule; }

		//"enum" name=EID "{" enumBody=EnumBody? "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//enumBody=EnumBody?
		public Assignment getEnumBodyAssignment_3() { return cEnumBodyAssignment_3; }

		//EnumBody
		public RuleCall getEnumBodyEnumBodyParserRuleCall_3_0() { return cEnumBodyEnumBodyParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EnumBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsSTRINGTerminalRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		/// *
		// * An EnumBody allows the user to define a list of STRING values.
		// * / EnumBody:
		//	elements+=STRING ("," elements+=STRING)*;
		@Override public ParserRule getRule() { return rule; }

		//elements+=STRING ("," elements+=STRING)*
		public Group getGroup() { return cGroup; }

		//elements+=STRING
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }

		//STRING
		public RuleCall getElementsSTRINGTerminalRuleCall_0_0() { return cElementsSTRINGTerminalRuleCall_0_0; }

		//("," elements+=STRING)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//elements+=STRING
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }

		//STRING
		public RuleCall getElementsSTRINGTerminalRuleCall_1_1_0() { return cElementsSTRINGTerminalRuleCall_1_1_0; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * An Entity allows the user to define a type,
		// * that will be used as data transfer object.
		// * The user can provide a list of Attributes.
		// * / Entity:
		//	"entity" name=EID "{" attributes+=Attribute* "}";
		@Override public ParserRule getRule() { return rule; }

		//"entity" name=EID "{" attributes+=Attribute* "}"
		public Group getGroup() { return cGroup; }

		//"entity"
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }

		//name=EID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_1_0() { return cNameEIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeAttributeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cNameKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cExtendedNameAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cExtendedNameSTRINGTerminalRuleCall_3_1_1_0 = (RuleCall)cExtendedNameAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cDescriptionKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_2_1_0 = (RuleCall)cDescriptionAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		/// *
		// * Each Attribute has a name and an AttributeType.
		// * Additionally the user can provide further
		// * information to an Attribute, namely an
		// * extendedName and a description. These further
		// * information will be used by the
		// * AutoGeneratedContentElement to generate a
		// * label and a tooltip.
		// * / Attribute:
		//	name=EID ":" type=AttributeType ("{" ("name" extendedName=STRING)? ("description" description=STRING)? "}")?;
		@Override public ParserRule getRule() { return rule; }

		//name=EID ":" type=AttributeType ("{" ("name" extendedName=STRING)? ("description" description=STRING)? "}")?
		public Group getGroup() { return cGroup; }

		//name=EID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//EID
		public RuleCall getNameEIDParserRuleCall_0_0() { return cNameEIDParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=AttributeType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//AttributeType
		public RuleCall getTypeAttributeTypeParserRuleCall_2_0() { return cTypeAttributeTypeParserRuleCall_2_0; }

		//("{" ("name" extendedName=STRING)? ("description" description=STRING)? "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//("name" extendedName=STRING)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"name"
		public Keyword getNameKeyword_3_1_0() { return cNameKeyword_3_1_0; }

		//extendedName=STRING
		public Assignment getExtendedNameAssignment_3_1_1() { return cExtendedNameAssignment_3_1_1; }

		//STRING
		public RuleCall getExtendedNameSTRINGTerminalRuleCall_3_1_1_0() { return cExtendedNameSTRINGTerminalRuleCall_3_1_1_0; }

		//("description" description=STRING)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"description"
		public Keyword getDescriptionKeyword_3_2_0() { return cDescriptionKeyword_3_2_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_3_2_1() { return cDescriptionAssignment_3_2_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_2_1_0() { return cDescriptionSTRINGTerminalRuleCall_3_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}

	public class AttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cReferencedTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cElementAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cElementModelElementCrossReference_0_1_0 = (CrossReference)cElementAssignment_0_1.eContents().get(0);
		private final RuleCall cElementModelElementQUALIFIED_NAMEParserRuleCall_0_1_0_1 = (RuleCall)cElementModelElementCrossReference_0_1_0.eContents().get(1);
		private final Assignment cManyAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cManyBRACKETSParserRuleCall_0_2_0 = (RuleCall)cManyAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Group cGroup_0_3_1 = (Group)cGroup_0_3.eContents().get(1);
		private final Assignment cParamsAssignment_0_3_1_0 = (Assignment)cGroup_0_3_1.eContents().get(0);
		private final RuleCall cParamsReferencedTypeParamParserRuleCall_0_3_1_0_0 = (RuleCall)cParamsAssignment_0_3_1_0.eContents().get(0);
		private final Group cGroup_0_3_1_1 = (Group)cGroup_0_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_0_3_1_1_0 = (Keyword)cGroup_0_3_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_0_3_1_1_1 = (Assignment)cGroup_0_3_1_1.eContents().get(1);
		private final RuleCall cParamsReferencedTypeParamParserRuleCall_0_3_1_1_1_0 = (RuleCall)cParamsAssignment_0_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3_2 = (Keyword)cGroup_0_3.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntegerTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cIntegerKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cManyAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cManyBRACKETSParserRuleCall_1_2_0 = (RuleCall)cManyAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cGroup_1_3.eContents().get(1);
		private final Assignment cParamsAssignment_1_3_1_0 = (Assignment)cGroup_1_3_1.eContents().get(0);
		private final RuleCall cParamsIntegerTypeParamParserRuleCall_1_3_1_0_0 = (RuleCall)cParamsAssignment_1_3_1_0.eContents().get(0);
		private final Group cGroup_1_3_1_1 = (Group)cGroup_1_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_3_1_1_0 = (Keyword)cGroup_1_3_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_3_1_1_1 = (Assignment)cGroup_1_3_1_1.eContents().get(1);
		private final RuleCall cParamsIntegerTypeParamParserRuleCall_1_3_1_1_1_0 = (RuleCall)cParamsAssignment_1_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cFloatTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cFloatKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cManyAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cManyBRACKETSParserRuleCall_2_2_0 = (RuleCall)cManyAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Group cGroup_2_3_1 = (Group)cGroup_2_3.eContents().get(1);
		private final Assignment cParamsAssignment_2_3_1_0 = (Assignment)cGroup_2_3_1.eContents().get(0);
		private final RuleCall cParamsFloatTypeParamParserRuleCall_2_3_1_0_0 = (RuleCall)cParamsAssignment_2_3_1_0.eContents().get(0);
		private final Group cGroup_2_3_1_1 = (Group)cGroup_2_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_3_1_1_0 = (Keyword)cGroup_2_3_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_3_1_1_1 = (Assignment)cGroup_2_3_1_1.eContents().get(1);
		private final RuleCall cParamsFloatTypeParamParserRuleCall_2_3_1_1_1_0 = (RuleCall)cParamsAssignment_2_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3_2 = (Keyword)cGroup_2_3.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStringTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cStringKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cManyAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cManyBRACKETSParserRuleCall_3_2_0 = (RuleCall)cManyAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Group cGroup_3_3_1 = (Group)cGroup_3_3.eContents().get(1);
		private final Assignment cParamsAssignment_3_3_1_0 = (Assignment)cGroup_3_3_1.eContents().get(0);
		private final RuleCall cParamsStringTypeParamParserRuleCall_3_3_1_0_0 = (RuleCall)cParamsAssignment_3_3_1_0.eContents().get(0);
		private final Group cGroup_3_3_1_1 = (Group)cGroup_3_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_3_1_1_0 = (Keyword)cGroup_3_3_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_3_1_1_1 = (Assignment)cGroup_3_3_1_1.eContents().get(1);
		private final RuleCall cParamsStringTypeParamParserRuleCall_3_3_1_1_1_0 = (RuleCall)cParamsAssignment_3_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3_2 = (Keyword)cGroup_3_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cBooleanTypeAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cBooleanKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cManyAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cManyBRACKETSParserRuleCall_4_2_0 = (RuleCall)cManyAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Group cGroup_4_3_1 = (Group)cGroup_4_3.eContents().get(1);
		private final Assignment cParamsAssignment_4_3_1_0 = (Assignment)cGroup_4_3_1.eContents().get(0);
		private final RuleCall cParamsBooleanTypeParamParserRuleCall_4_3_1_0_0 = (RuleCall)cParamsAssignment_4_3_1_0.eContents().get(0);
		private final Group cGroup_4_3_1_1 = (Group)cGroup_4_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_3_1_1_0 = (Keyword)cGroup_4_3_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_3_1_1_1 = (Assignment)cGroup_4_3_1_1.eContents().get(1);
		private final RuleCall cParamsBooleanTypeParamParserRuleCall_4_3_1_1_1_0 = (RuleCall)cParamsAssignment_4_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3_2 = (Keyword)cGroup_4_3.eContents().get(2);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cDateTypeAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cDateKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cManyAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cManyBRACKETSParserRuleCall_5_2_0 = (RuleCall)cManyAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Group cGroup_5_3_1 = (Group)cGroup_5_3.eContents().get(1);
		private final Assignment cParamsAssignment_5_3_1_0 = (Assignment)cGroup_5_3_1.eContents().get(0);
		private final RuleCall cParamsDateTypeParamParserRuleCall_5_3_1_0_0 = (RuleCall)cParamsAssignment_5_3_1_0.eContents().get(0);
		private final Group cGroup_5_3_1_1 = (Group)cGroup_5_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_5_3_1_1_0 = (Keyword)cGroup_5_3_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_5_3_1_1_1 = (Assignment)cGroup_5_3_1_1.eContents().get(1);
		private final RuleCall cParamsDateTypeParamParserRuleCall_5_3_1_1_1_0 = (RuleCall)cParamsAssignment_5_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3_2 = (Keyword)cGroup_5_3.eContents().get(2);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cTimeTypeAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cTimeKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cManyAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cManyBRACKETSParserRuleCall_6_2_0 = (RuleCall)cManyAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Group cGroup_6_3_1 = (Group)cGroup_6_3.eContents().get(1);
		private final Assignment cParamsAssignment_6_3_1_0 = (Assignment)cGroup_6_3_1.eContents().get(0);
		private final RuleCall cParamsTimeTypeParamParserRuleCall_6_3_1_0_0 = (RuleCall)cParamsAssignment_6_3_1_0.eContents().get(0);
		private final Group cGroup_6_3_1_1 = (Group)cGroup_6_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_6_3_1_1_0 = (Keyword)cGroup_6_3_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_6_3_1_1_1 = (Assignment)cGroup_6_3_1_1.eContents().get(1);
		private final RuleCall cParamsTimeTypeParamParserRuleCall_6_3_1_1_1_0 = (RuleCall)cParamsAssignment_6_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_3_2 = (Keyword)cGroup_6_3.eContents().get(2);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cDateTimeTypeAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cDatetimeKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cManyAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cManyBRACKETSParserRuleCall_7_2_0 = (RuleCall)cManyAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Group cGroup_7_3_1 = (Group)cGroup_7_3.eContents().get(1);
		private final Assignment cParamsAssignment_7_3_1_0 = (Assignment)cGroup_7_3_1.eContents().get(0);
		private final RuleCall cParamsDateTimeTypeParamParserRuleCall_7_3_1_0_0 = (RuleCall)cParamsAssignment_7_3_1_0.eContents().get(0);
		private final Group cGroup_7_3_1_1 = (Group)cGroup_7_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_7_3_1_1_0 = (Keyword)cGroup_7_3_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_7_3_1_1_1 = (Assignment)cGroup_7_3_1_1.eContents().get(1);
		private final RuleCall cParamsDateTimeTypeParamParserRuleCall_7_3_1_1_1_0 = (RuleCall)cParamsAssignment_7_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_3_2 = (Keyword)cGroup_7_3.eContents().get(2);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cFileTypeAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cFileKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cManyAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cManyBRACKETSParserRuleCall_8_2_0 = (RuleCall)cManyAssignment_8_2.eContents().get(0);
		private final Group cGroup_8_3 = (Group)cGroup_8.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_8_3_0 = (Keyword)cGroup_8_3.eContents().get(0);
		private final Group cGroup_8_3_1 = (Group)cGroup_8_3.eContents().get(1);
		private final Assignment cParamsAssignment_8_3_1_0 = (Assignment)cGroup_8_3_1.eContents().get(0);
		private final RuleCall cParamsFileTypeParamParserRuleCall_8_3_1_0_0 = (RuleCall)cParamsAssignment_8_3_1_0.eContents().get(0);
		private final Group cGroup_8_3_1_1 = (Group)cGroup_8_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_8_3_1_1_0 = (Keyword)cGroup_8_3_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_8_3_1_1_1 = (Assignment)cGroup_8_3_1_1.eContents().get(1);
		private final RuleCall cParamsFileTypeParamParserRuleCall_8_3_1_1_1_0 = (RuleCall)cParamsAssignment_8_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_3_2 = (Keyword)cGroup_8_3.eContents().get(2);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cEnumTypeAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cEnumBodyAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cEnumBodyEnumBodyParserRuleCall_9_2_0 = (RuleCall)cEnumBodyAssignment_9_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Assignment cManyAssignment_9_4 = (Assignment)cGroup_9.eContents().get(4);
		private final RuleCall cManyBRACKETSParserRuleCall_9_4_0 = (RuleCall)cManyAssignment_9_4.eContents().get(0);
		private final Group cGroup_9_5 = (Group)cGroup_9.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_9_5_0 = (Keyword)cGroup_9_5.eContents().get(0);
		private final Group cGroup_9_5_1 = (Group)cGroup_9_5.eContents().get(1);
		private final Assignment cParamsAssignment_9_5_1_0 = (Assignment)cGroup_9_5_1.eContents().get(0);
		private final RuleCall cParamsEnumTypeParamParserRuleCall_9_5_1_0_0 = (RuleCall)cParamsAssignment_9_5_1_0.eContents().get(0);
		private final Group cGroup_9_5_1_1 = (Group)cGroup_9_5_1.eContents().get(1);
		private final Keyword cCommaKeyword_9_5_1_1_0 = (Keyword)cGroup_9_5_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_9_5_1_1_1 = (Assignment)cGroup_9_5_1_1.eContents().get(1);
		private final RuleCall cParamsEnumTypeParamParserRuleCall_9_5_1_1_1_0 = (RuleCall)cParamsAssignment_9_5_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_5_2 = (Keyword)cGroup_9_5.eContents().get(2);
		
		/// *
		// * AttributeType is the super type of all possible AttributeTypes.
		// * These can be besides SimpleDataTypes a references to an already
		// * defined ModelElement or an implicit Enum declaration.
		// * / AttributeType:
		//	{ReferencedType} element=[ModelElement|QUALIFIED_NAME] many?=BRACKETS? ("(" (params+=ReferencedTypeParam (","
		//	params+=ReferencedTypeParam)*)? ")")? | {IntegerType} "integer" many?=BRACKETS? ("(" (params+=IntegerTypeParam (","
		//	params+=IntegerTypeParam)*)? ")")? | {FloatType} "float" many?=BRACKETS? ("(" (params+=FloatTypeParam (","
		//	params+=FloatTypeParam)*)? ")")? | {StringType} "string" many?=BRACKETS? ("(" (params+=StringTypeParam (","
		//	params+=StringTypeParam)*)? ")")? | {BooleanType} "boolean" many?=BRACKETS? ("(" (params+=BooleanTypeParam (","
		//	params+=BooleanTypeParam)*)? ")")? | {DateType} "date" many?=BRACKETS? ("(" (params+=DateTypeParam (","
		//	params+=DateTypeParam)*)? ")")? | {TimeType} "time" many?=BRACKETS? ("(" (params+=TimeTypeParam (","
		//	params+=TimeTypeParam)*)? ")")? | {DateTimeType} "datetime" many?=BRACKETS? ("(" (params+=DateTimeTypeParam (","
		//	params+=DateTimeTypeParam)*)? ")")? | {FileType} "file" many?=BRACKETS? ("(" (params+=FileTypeParam (","
		//	params+=FileTypeParam)*)? ")")? | // EnumType => Transformed to explicit Enum (=> ReferencedType) after preprocessing
		//	{EnumType} "{" enumBody=EnumBody? "}" many?=BRACKETS? ("(" (params+=EnumTypeParam ("," params+=EnumTypeParam)*)? ")")?;
		@Override public ParserRule getRule() { return rule; }

		//{ReferencedType} element=[ModelElement|QUALIFIED_NAME] many?=BRACKETS? ("(" (params+=ReferencedTypeParam (","
		//params+=ReferencedTypeParam)*)? ")")? | {IntegerType} "integer" many?=BRACKETS? ("(" (params+=IntegerTypeParam (","
		//params+=IntegerTypeParam)*)? ")")? | {FloatType} "float" many?=BRACKETS? ("(" (params+=FloatTypeParam (","
		//params+=FloatTypeParam)*)? ")")? | {StringType} "string" many?=BRACKETS? ("(" (params+=StringTypeParam (","
		//params+=StringTypeParam)*)? ")")? | {BooleanType} "boolean" many?=BRACKETS? ("(" (params+=BooleanTypeParam (","
		//params+=BooleanTypeParam)*)? ")")? | {DateType} "date" many?=BRACKETS? ("(" (params+=DateTypeParam (","
		//params+=DateTypeParam)*)? ")")? | {TimeType} "time" many?=BRACKETS? ("(" (params+=TimeTypeParam (","
		//params+=TimeTypeParam)*)? ")")? | {DateTimeType} "datetime" many?=BRACKETS? ("(" (params+=DateTimeTypeParam (","
		//params+=DateTimeTypeParam)*)? ")")? | {FileType} "file" many?=BRACKETS? ("(" (params+=FileTypeParam (","
		//params+=FileTypeParam)*)? ")")? | // EnumType => Transformed to explicit Enum (=> ReferencedType) after preprocessing
		//{EnumType} "{" enumBody=EnumBody? "}" many?=BRACKETS? ("(" (params+=EnumTypeParam ("," params+=EnumTypeParam)*)? ")")?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ReferencedType} element=[ModelElement|QUALIFIED_NAME] many?=BRACKETS? ("(" (params+=ReferencedTypeParam (","
		//params+=ReferencedTypeParam)*)? ")")?
		public Group getGroup_0() { return cGroup_0; }

		//{ReferencedType}
		public Action getReferencedTypeAction_0_0() { return cReferencedTypeAction_0_0; }

		//element=[ModelElement|QUALIFIED_NAME]
		public Assignment getElementAssignment_0_1() { return cElementAssignment_0_1; }

		//[ModelElement|QUALIFIED_NAME]
		public CrossReference getElementModelElementCrossReference_0_1_0() { return cElementModelElementCrossReference_0_1_0; }

		//QUALIFIED_NAME
		public RuleCall getElementModelElementQUALIFIED_NAMEParserRuleCall_0_1_0_1() { return cElementModelElementQUALIFIED_NAMEParserRuleCall_0_1_0_1; }

		//many?=BRACKETS?
		public Assignment getManyAssignment_0_2() { return cManyAssignment_0_2; }

		//BRACKETS
		public RuleCall getManyBRACKETSParserRuleCall_0_2_0() { return cManyBRACKETSParserRuleCall_0_2_0; }

		//("(" (params+=ReferencedTypeParam ("," params+=ReferencedTypeParam)*)? ")")?
		public Group getGroup_0_3() { return cGroup_0_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_3_0() { return cLeftParenthesisKeyword_0_3_0; }

		//(params+=ReferencedTypeParam ("," params+=ReferencedTypeParam)*)?
		public Group getGroup_0_3_1() { return cGroup_0_3_1; }

		//params+=ReferencedTypeParam
		public Assignment getParamsAssignment_0_3_1_0() { return cParamsAssignment_0_3_1_0; }

		//ReferencedTypeParam
		public RuleCall getParamsReferencedTypeParamParserRuleCall_0_3_1_0_0() { return cParamsReferencedTypeParamParserRuleCall_0_3_1_0_0; }

		//("," params+=ReferencedTypeParam)*
		public Group getGroup_0_3_1_1() { return cGroup_0_3_1_1; }

		//","
		public Keyword getCommaKeyword_0_3_1_1_0() { return cCommaKeyword_0_3_1_1_0; }

		//params+=ReferencedTypeParam
		public Assignment getParamsAssignment_0_3_1_1_1() { return cParamsAssignment_0_3_1_1_1; }

		//ReferencedTypeParam
		public RuleCall getParamsReferencedTypeParamParserRuleCall_0_3_1_1_1_0() { return cParamsReferencedTypeParamParserRuleCall_0_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3_2() { return cRightParenthesisKeyword_0_3_2; }

		//{IntegerType} "integer" many?=BRACKETS? ("(" (params+=IntegerTypeParam ("," params+=IntegerTypeParam)*)? ")")?
		public Group getGroup_1() { return cGroup_1; }

		//{IntegerType}
		public Action getIntegerTypeAction_1_0() { return cIntegerTypeAction_1_0; }

		//"integer"
		public Keyword getIntegerKeyword_1_1() { return cIntegerKeyword_1_1; }

		//many?=BRACKETS?
		public Assignment getManyAssignment_1_2() { return cManyAssignment_1_2; }

		//BRACKETS
		public RuleCall getManyBRACKETSParserRuleCall_1_2_0() { return cManyBRACKETSParserRuleCall_1_2_0; }

		//("(" (params+=IntegerTypeParam ("," params+=IntegerTypeParam)*)? ")")?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_3_0() { return cLeftParenthesisKeyword_1_3_0; }

		//(params+=IntegerTypeParam ("," params+=IntegerTypeParam)*)?
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }

		//params+=IntegerTypeParam
		public Assignment getParamsAssignment_1_3_1_0() { return cParamsAssignment_1_3_1_0; }

		//IntegerTypeParam
		public RuleCall getParamsIntegerTypeParamParserRuleCall_1_3_1_0_0() { return cParamsIntegerTypeParamParserRuleCall_1_3_1_0_0; }

		//("," params+=IntegerTypeParam)*
		public Group getGroup_1_3_1_1() { return cGroup_1_3_1_1; }

		//","
		public Keyword getCommaKeyword_1_3_1_1_0() { return cCommaKeyword_1_3_1_1_0; }

		//params+=IntegerTypeParam
		public Assignment getParamsAssignment_1_3_1_1_1() { return cParamsAssignment_1_3_1_1_1; }

		//IntegerTypeParam
		public RuleCall getParamsIntegerTypeParamParserRuleCall_1_3_1_1_1_0() { return cParamsIntegerTypeParamParserRuleCall_1_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3_2() { return cRightParenthesisKeyword_1_3_2; }

		//{FloatType} "float" many?=BRACKETS? ("(" (params+=FloatTypeParam ("," params+=FloatTypeParam)*)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//{FloatType}
		public Action getFloatTypeAction_2_0() { return cFloatTypeAction_2_0; }

		//"float"
		public Keyword getFloatKeyword_2_1() { return cFloatKeyword_2_1; }

		//many?=BRACKETS?
		public Assignment getManyAssignment_2_2() { return cManyAssignment_2_2; }

		//BRACKETS
		public RuleCall getManyBRACKETSParserRuleCall_2_2_0() { return cManyBRACKETSParserRuleCall_2_2_0; }

		//("(" (params+=FloatTypeParam ("," params+=FloatTypeParam)*)? ")")?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_3_0() { return cLeftParenthesisKeyword_2_3_0; }

		//(params+=FloatTypeParam ("," params+=FloatTypeParam)*)?
		public Group getGroup_2_3_1() { return cGroup_2_3_1; }

		//params+=FloatTypeParam
		public Assignment getParamsAssignment_2_3_1_0() { return cParamsAssignment_2_3_1_0; }

		//FloatTypeParam
		public RuleCall getParamsFloatTypeParamParserRuleCall_2_3_1_0_0() { return cParamsFloatTypeParamParserRuleCall_2_3_1_0_0; }

		//("," params+=FloatTypeParam)*
		public Group getGroup_2_3_1_1() { return cGroup_2_3_1_1; }

		//","
		public Keyword getCommaKeyword_2_3_1_1_0() { return cCommaKeyword_2_3_1_1_0; }

		//params+=FloatTypeParam
		public Assignment getParamsAssignment_2_3_1_1_1() { return cParamsAssignment_2_3_1_1_1; }

		//FloatTypeParam
		public RuleCall getParamsFloatTypeParamParserRuleCall_2_3_1_1_1_0() { return cParamsFloatTypeParamParserRuleCall_2_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3_2() { return cRightParenthesisKeyword_2_3_2; }

		//{StringType} "string" many?=BRACKETS? ("(" (params+=StringTypeParam ("," params+=StringTypeParam)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//{StringType}
		public Action getStringTypeAction_3_0() { return cStringTypeAction_3_0; }

		//"string"
		public Keyword getStringKeyword_3_1() { return cStringKeyword_3_1; }

		//many?=BRACKETS?
		public Assignment getManyAssignment_3_2() { return cManyAssignment_3_2; }

		//BRACKETS
		public RuleCall getManyBRACKETSParserRuleCall_3_2_0() { return cManyBRACKETSParserRuleCall_3_2_0; }

		//("(" (params+=StringTypeParam ("," params+=StringTypeParam)*)? ")")?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_3_0() { return cLeftParenthesisKeyword_3_3_0; }

		//(params+=StringTypeParam ("," params+=StringTypeParam)*)?
		public Group getGroup_3_3_1() { return cGroup_3_3_1; }

		//params+=StringTypeParam
		public Assignment getParamsAssignment_3_3_1_0() { return cParamsAssignment_3_3_1_0; }

		//StringTypeParam
		public RuleCall getParamsStringTypeParamParserRuleCall_3_3_1_0_0() { return cParamsStringTypeParamParserRuleCall_3_3_1_0_0; }

		//("," params+=StringTypeParam)*
		public Group getGroup_3_3_1_1() { return cGroup_3_3_1_1; }

		//","
		public Keyword getCommaKeyword_3_3_1_1_0() { return cCommaKeyword_3_3_1_1_0; }

		//params+=StringTypeParam
		public Assignment getParamsAssignment_3_3_1_1_1() { return cParamsAssignment_3_3_1_1_1; }

		//StringTypeParam
		public RuleCall getParamsStringTypeParamParserRuleCall_3_3_1_1_1_0() { return cParamsStringTypeParamParserRuleCall_3_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3_2() { return cRightParenthesisKeyword_3_3_2; }

		//{BooleanType} "boolean" many?=BRACKETS? ("(" (params+=BooleanTypeParam ("," params+=BooleanTypeParam)*)? ")")?
		public Group getGroup_4() { return cGroup_4; }

		//{BooleanType}
		public Action getBooleanTypeAction_4_0() { return cBooleanTypeAction_4_0; }

		//"boolean"
		public Keyword getBooleanKeyword_4_1() { return cBooleanKeyword_4_1; }

		//many?=BRACKETS?
		public Assignment getManyAssignment_4_2() { return cManyAssignment_4_2; }

		//BRACKETS
		public RuleCall getManyBRACKETSParserRuleCall_4_2_0() { return cManyBRACKETSParserRuleCall_4_2_0; }

		//("(" (params+=BooleanTypeParam ("," params+=BooleanTypeParam)*)? ")")?
		public Group getGroup_4_3() { return cGroup_4_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_3_0() { return cLeftParenthesisKeyword_4_3_0; }

		//(params+=BooleanTypeParam ("," params+=BooleanTypeParam)*)?
		public Group getGroup_4_3_1() { return cGroup_4_3_1; }

		//params+=BooleanTypeParam
		public Assignment getParamsAssignment_4_3_1_0() { return cParamsAssignment_4_3_1_0; }

		//BooleanTypeParam
		public RuleCall getParamsBooleanTypeParamParserRuleCall_4_3_1_0_0() { return cParamsBooleanTypeParamParserRuleCall_4_3_1_0_0; }

		//("," params+=BooleanTypeParam)*
		public Group getGroup_4_3_1_1() { return cGroup_4_3_1_1; }

		//","
		public Keyword getCommaKeyword_4_3_1_1_0() { return cCommaKeyword_4_3_1_1_0; }

		//params+=BooleanTypeParam
		public Assignment getParamsAssignment_4_3_1_1_1() { return cParamsAssignment_4_3_1_1_1; }

		//BooleanTypeParam
		public RuleCall getParamsBooleanTypeParamParserRuleCall_4_3_1_1_1_0() { return cParamsBooleanTypeParamParserRuleCall_4_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_3_2() { return cRightParenthesisKeyword_4_3_2; }

		//{DateType} "date" many?=BRACKETS? ("(" (params+=DateTypeParam ("," params+=DateTypeParam)*)? ")")?
		public Group getGroup_5() { return cGroup_5; }

		//{DateType}
		public Action getDateTypeAction_5_0() { return cDateTypeAction_5_0; }

		//"date"
		public Keyword getDateKeyword_5_1() { return cDateKeyword_5_1; }

		//many?=BRACKETS?
		public Assignment getManyAssignment_5_2() { return cManyAssignment_5_2; }

		//BRACKETS
		public RuleCall getManyBRACKETSParserRuleCall_5_2_0() { return cManyBRACKETSParserRuleCall_5_2_0; }

		//("(" (params+=DateTypeParam ("," params+=DateTypeParam)*)? ")")?
		public Group getGroup_5_3() { return cGroup_5_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_3_0() { return cLeftParenthesisKeyword_5_3_0; }

		//(params+=DateTypeParam ("," params+=DateTypeParam)*)?
		public Group getGroup_5_3_1() { return cGroup_5_3_1; }

		//params+=DateTypeParam
		public Assignment getParamsAssignment_5_3_1_0() { return cParamsAssignment_5_3_1_0; }

		//DateTypeParam
		public RuleCall getParamsDateTypeParamParserRuleCall_5_3_1_0_0() { return cParamsDateTypeParamParserRuleCall_5_3_1_0_0; }

		//("," params+=DateTypeParam)*
		public Group getGroup_5_3_1_1() { return cGroup_5_3_1_1; }

		//","
		public Keyword getCommaKeyword_5_3_1_1_0() { return cCommaKeyword_5_3_1_1_0; }

		//params+=DateTypeParam
		public Assignment getParamsAssignment_5_3_1_1_1() { return cParamsAssignment_5_3_1_1_1; }

		//DateTypeParam
		public RuleCall getParamsDateTypeParamParserRuleCall_5_3_1_1_1_0() { return cParamsDateTypeParamParserRuleCall_5_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_3_2() { return cRightParenthesisKeyword_5_3_2; }

		//{TimeType} "time" many?=BRACKETS? ("(" (params+=TimeTypeParam ("," params+=TimeTypeParam)*)? ")")?
		public Group getGroup_6() { return cGroup_6; }

		//{TimeType}
		public Action getTimeTypeAction_6_0() { return cTimeTypeAction_6_0; }

		//"time"
		public Keyword getTimeKeyword_6_1() { return cTimeKeyword_6_1; }

		//many?=BRACKETS?
		public Assignment getManyAssignment_6_2() { return cManyAssignment_6_2; }

		//BRACKETS
		public RuleCall getManyBRACKETSParserRuleCall_6_2_0() { return cManyBRACKETSParserRuleCall_6_2_0; }

		//("(" (params+=TimeTypeParam ("," params+=TimeTypeParam)*)? ")")?
		public Group getGroup_6_3() { return cGroup_6_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_3_0() { return cLeftParenthesisKeyword_6_3_0; }

		//(params+=TimeTypeParam ("," params+=TimeTypeParam)*)?
		public Group getGroup_6_3_1() { return cGroup_6_3_1; }

		//params+=TimeTypeParam
		public Assignment getParamsAssignment_6_3_1_0() { return cParamsAssignment_6_3_1_0; }

		//TimeTypeParam
		public RuleCall getParamsTimeTypeParamParserRuleCall_6_3_1_0_0() { return cParamsTimeTypeParamParserRuleCall_6_3_1_0_0; }

		//("," params+=TimeTypeParam)*
		public Group getGroup_6_3_1_1() { return cGroup_6_3_1_1; }

		//","
		public Keyword getCommaKeyword_6_3_1_1_0() { return cCommaKeyword_6_3_1_1_0; }

		//params+=TimeTypeParam
		public Assignment getParamsAssignment_6_3_1_1_1() { return cParamsAssignment_6_3_1_1_1; }

		//TimeTypeParam
		public RuleCall getParamsTimeTypeParamParserRuleCall_6_3_1_1_1_0() { return cParamsTimeTypeParamParserRuleCall_6_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_3_2() { return cRightParenthesisKeyword_6_3_2; }

		//{DateTimeType} "datetime" many?=BRACKETS? ("(" (params+=DateTimeTypeParam ("," params+=DateTimeTypeParam)*)? ")")?
		public Group getGroup_7() { return cGroup_7; }

		//{DateTimeType}
		public Action getDateTimeTypeAction_7_0() { return cDateTimeTypeAction_7_0; }

		//"datetime"
		public Keyword getDatetimeKeyword_7_1() { return cDatetimeKeyword_7_1; }

		//many?=BRACKETS?
		public Assignment getManyAssignment_7_2() { return cManyAssignment_7_2; }

		//BRACKETS
		public RuleCall getManyBRACKETSParserRuleCall_7_2_0() { return cManyBRACKETSParserRuleCall_7_2_0; }

		//("(" (params+=DateTimeTypeParam ("," params+=DateTimeTypeParam)*)? ")")?
		public Group getGroup_7_3() { return cGroup_7_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_7_3_0() { return cLeftParenthesisKeyword_7_3_0; }

		//(params+=DateTimeTypeParam ("," params+=DateTimeTypeParam)*)?
		public Group getGroup_7_3_1() { return cGroup_7_3_1; }

		//params+=DateTimeTypeParam
		public Assignment getParamsAssignment_7_3_1_0() { return cParamsAssignment_7_3_1_0; }

		//DateTimeTypeParam
		public RuleCall getParamsDateTimeTypeParamParserRuleCall_7_3_1_0_0() { return cParamsDateTimeTypeParamParserRuleCall_7_3_1_0_0; }

		//("," params+=DateTimeTypeParam)*
		public Group getGroup_7_3_1_1() { return cGroup_7_3_1_1; }

		//","
		public Keyword getCommaKeyword_7_3_1_1_0() { return cCommaKeyword_7_3_1_1_0; }

		//params+=DateTimeTypeParam
		public Assignment getParamsAssignment_7_3_1_1_1() { return cParamsAssignment_7_3_1_1_1; }

		//DateTimeTypeParam
		public RuleCall getParamsDateTimeTypeParamParserRuleCall_7_3_1_1_1_0() { return cParamsDateTimeTypeParamParserRuleCall_7_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7_3_2() { return cRightParenthesisKeyword_7_3_2; }

		//{FileType} "file" many?=BRACKETS? ("(" (params+=FileTypeParam ("," params+=FileTypeParam)*)? ")")?
		public Group getGroup_8() { return cGroup_8; }

		//{FileType}
		public Action getFileTypeAction_8_0() { return cFileTypeAction_8_0; }

		//"file"
		public Keyword getFileKeyword_8_1() { return cFileKeyword_8_1; }

		//many?=BRACKETS?
		public Assignment getManyAssignment_8_2() { return cManyAssignment_8_2; }

		//BRACKETS
		public RuleCall getManyBRACKETSParserRuleCall_8_2_0() { return cManyBRACKETSParserRuleCall_8_2_0; }

		//("(" (params+=FileTypeParam ("," params+=FileTypeParam)*)? ")")?
		public Group getGroup_8_3() { return cGroup_8_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_8_3_0() { return cLeftParenthesisKeyword_8_3_0; }

		//(params+=FileTypeParam ("," params+=FileTypeParam)*)?
		public Group getGroup_8_3_1() { return cGroup_8_3_1; }

		//params+=FileTypeParam
		public Assignment getParamsAssignment_8_3_1_0() { return cParamsAssignment_8_3_1_0; }

		//FileTypeParam
		public RuleCall getParamsFileTypeParamParserRuleCall_8_3_1_0_0() { return cParamsFileTypeParamParserRuleCall_8_3_1_0_0; }

		//("," params+=FileTypeParam)*
		public Group getGroup_8_3_1_1() { return cGroup_8_3_1_1; }

		//","
		public Keyword getCommaKeyword_8_3_1_1_0() { return cCommaKeyword_8_3_1_1_0; }

		//params+=FileTypeParam
		public Assignment getParamsAssignment_8_3_1_1_1() { return cParamsAssignment_8_3_1_1_1; }

		//FileTypeParam
		public RuleCall getParamsFileTypeParamParserRuleCall_8_3_1_1_1_0() { return cParamsFileTypeParamParserRuleCall_8_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8_3_2() { return cRightParenthesisKeyword_8_3_2; }

		//// EnumType => Transformed to explicit Enum (=> ReferencedType) after preprocessing
		//{EnumType} "{" enumBody=EnumBody? "}" many?=BRACKETS? ("(" (params+=EnumTypeParam ("," params+=EnumTypeParam)*)? ")")?
		public Group getGroup_9() { return cGroup_9; }

		//// EnumType => Transformed to explicit Enum (=> ReferencedType) after preprocessing
		//{EnumType}
		public Action getEnumTypeAction_9_0() { return cEnumTypeAction_9_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_9_1() { return cLeftCurlyBracketKeyword_9_1; }

		//enumBody=EnumBody?
		public Assignment getEnumBodyAssignment_9_2() { return cEnumBodyAssignment_9_2; }

		//EnumBody
		public RuleCall getEnumBodyEnumBodyParserRuleCall_9_2_0() { return cEnumBodyEnumBodyParserRuleCall_9_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9_3() { return cRightCurlyBracketKeyword_9_3; }

		//many?=BRACKETS?
		public Assignment getManyAssignment_9_4() { return cManyAssignment_9_4; }

		//BRACKETS
		public RuleCall getManyBRACKETSParserRuleCall_9_4_0() { return cManyBRACKETSParserRuleCall_9_4_0; }

		//("(" (params+=EnumTypeParam ("," params+=EnumTypeParam)*)? ")")?
		public Group getGroup_9_5() { return cGroup_9_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_9_5_0() { return cLeftParenthesisKeyword_9_5_0; }

		//(params+=EnumTypeParam ("," params+=EnumTypeParam)*)?
		public Group getGroup_9_5_1() { return cGroup_9_5_1; }

		//params+=EnumTypeParam
		public Assignment getParamsAssignment_9_5_1_0() { return cParamsAssignment_9_5_1_0; }

		//EnumTypeParam
		public RuleCall getParamsEnumTypeParamParserRuleCall_9_5_1_0_0() { return cParamsEnumTypeParamParserRuleCall_9_5_1_0_0; }

		//("," params+=EnumTypeParam)*
		public Group getGroup_9_5_1_1() { return cGroup_9_5_1_1; }

		//","
		public Keyword getCommaKeyword_9_5_1_1_0() { return cCommaKeyword_9_5_1_1_0; }

		//params+=EnumTypeParam
		public Assignment getParamsAssignment_9_5_1_1_1() { return cParamsAssignment_9_5_1_1_1; }

		//EnumTypeParam
		public RuleCall getParamsEnumTypeParamParserRuleCall_9_5_1_1_1_0() { return cParamsEnumTypeParamParserRuleCall_9_5_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9_5_2() { return cRightParenthesisKeyword_9_5_2; }
	}

	public class BRACKETSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BRACKETS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		/// *
		// * The parser rule BRACKETS defines how square brackets look like.
		// * BRACKETS can be annotated to an AttributeType to declare the
		// * Attribute to have a one to many relation.
		// * / BRACKETS:
		//	"[" "]";
		@Override public ParserRule getRule() { return rule; }

		//"[" "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1() { return cRightSquareBracketKeyword_1; }
	}

	public class AttributeTypeParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeTypeParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReferencedTypeParamParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerTypeParamParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFloatTypeParamParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringTypeParamParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBooleanTypeParamParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDateTypeParamParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTimeTypeParamParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDateTimeTypeParamParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cEnumTypeParamParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cFileTypeParamParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		///////////////////////////////////////
		//// Attribute parameter definitions
		///////////////////////////////////////
		/// *
		// * AttributeTypeParam is used to define a common super type of all specific AttributeTypeParams.
		// * 
		// * The AttributeTypeParam is not used in the language but will be used by the generators. Therefore
		// * it can be seen as a workaround to manipulate the meta model, that will be built by Xtext.
		// * / AttributeTypeParam:
		//	ReferencedTypeParam | IntegerTypeParam | FloatTypeParam | StringTypeParam | BooleanTypeParam | DateTypeParam |
		//	TimeTypeParam | DateTimeTypeParam | EnumTypeParam | FileTypeParam;
		@Override public ParserRule getRule() { return rule; }

		//ReferencedTypeParam | IntegerTypeParam | FloatTypeParam | StringTypeParam | BooleanTypeParam | DateTypeParam |
		//TimeTypeParam | DateTimeTypeParam | EnumTypeParam | FileTypeParam
		public Alternatives getAlternatives() { return cAlternatives; }

		//ReferencedTypeParam
		public RuleCall getReferencedTypeParamParserRuleCall_0() { return cReferencedTypeParamParserRuleCall_0; }

		//IntegerTypeParam
		public RuleCall getIntegerTypeParamParserRuleCall_1() { return cIntegerTypeParamParserRuleCall_1; }

		//FloatTypeParam
		public RuleCall getFloatTypeParamParserRuleCall_2() { return cFloatTypeParamParserRuleCall_2; }

		//StringTypeParam
		public RuleCall getStringTypeParamParserRuleCall_3() { return cStringTypeParamParserRuleCall_3; }

		//BooleanTypeParam
		public RuleCall getBooleanTypeParamParserRuleCall_4() { return cBooleanTypeParamParserRuleCall_4; }

		//DateTypeParam
		public RuleCall getDateTypeParamParserRuleCall_5() { return cDateTypeParamParserRuleCall_5; }

		//TimeTypeParam
		public RuleCall getTimeTypeParamParserRuleCall_6() { return cTimeTypeParamParserRuleCall_6; }

		//DateTimeTypeParam
		public RuleCall getDateTimeTypeParamParserRuleCall_7() { return cDateTimeTypeParamParserRuleCall_7; }

		//EnumTypeParam
		public RuleCall getEnumTypeParamParserRuleCall_8() { return cEnumTypeParamParserRuleCall_8; }

		//FileTypeParam
		public RuleCall getFileTypeParamParserRuleCall_9() { return cFileTypeParamParserRuleCall_9; }
	}

	public class ReferencedTypeParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferencedTypeParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAttrIsOptionalAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOptionalAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOptionalOptionalKeyword_0_1_0 = (Keyword)cOptionalAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAttrEnumDefaultAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cDefaultKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		
		/// *
		// * ReferencedTypeParam is a super type of all possible parameters of referenced Attributes.
		// * The value being optional is the only parameter. This parameter will be used to generate a validator.
		// * 
		// * The parser cannot distinguish cross-references to different parsing rules.
		// * Thus, it is necessary to link the common super type ModelElement. Validators have to assure that
		// * enum specific parameters cannot be assigned to referenced entities and vice versa.
		// * / ReferencedTypeParam:
		//	{AttrIsOptional} optional?="optional" | {AttrEnumDefault} "default" value= // enum specific
		//	STRING;
		@Override public ParserRule getRule() { return rule; }

		//{AttrIsOptional} optional?="optional" | {AttrEnumDefault} "default" value= // enum specific
		//STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AttrIsOptional} optional?="optional"
		public Group getGroup_0() { return cGroup_0; }

		//{AttrIsOptional}
		public Action getAttrIsOptionalAction_0_0() { return cAttrIsOptionalAction_0_0; }

		//optional?="optional"
		public Assignment getOptionalAssignment_0_1() { return cOptionalAssignment_0_1; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_0_1_0() { return cOptionalOptionalKeyword_0_1_0; }

		//{AttrEnumDefault} "default" value= // enum specific
		//STRING
		public Group getGroup_1() { return cGroup_1; }

		//{AttrEnumDefault}
		public Action getAttrEnumDefaultAction_1_0() { return cAttrEnumDefaultAction_1_0; }

		//"default"
		public Keyword getDefaultKeyword_1_1() { return cDefaultKeyword_1_1; }

		//value= // enum specific
		//STRING
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }

		//// enum specific
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_2_0() { return cValueSTRINGTerminalRuleCall_1_2_0; }
	}

	public class IntegerTypeParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerTypeParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAttrIsOptionalAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOptionalAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOptionalOptionalKeyword_0_1_0 = (Keyword)cOptionalAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAttrIdentifierAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cIdentifierAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cIdentifierIdentifierKeyword_1_1_0 = (Keyword)cIdentifierAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cAttrIntDefaultAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cDefaultKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cValueAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_2_0 = (RuleCall)cValueAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cAttrIntMaxAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cMaxKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cMaxAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cMaxINTTerminalRuleCall_3_2_0 = (RuleCall)cMaxAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cAttrIntMinAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cMinKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cMinAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cMinINTTerminalRuleCall_4_2_0 = (RuleCall)cMinAssignment_4_2.eContents().get(0);
		
		/// *
		// * IntegerTypeParam is a super type of all
		// * possible parameters of integer Attributes.
		// * Besides the value being optional, it is
		// * possible to mark it as the identifier of
		// * the entity and to provide a minimum and
		// * a maximum value. These parameters will
		// * be used to generate validators.
		// * / IntegerTypeParam:
		//	{AttrIsOptional} optional?="optional" | {AttrIdentifier} identifier?="identifier" | {AttrIntDefault} "default"
		//	value=INT | {AttrIntMax} "max" max=INT | {AttrIntMin} "min" min=INT;
		@Override public ParserRule getRule() { return rule; }

		//{AttrIsOptional} optional?="optional" | {AttrIdentifier} identifier?="identifier" | {AttrIntDefault} "default" value=INT
		//| {AttrIntMax} "max" max=INT | {AttrIntMin} "min" min=INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AttrIsOptional} optional?="optional"
		public Group getGroup_0() { return cGroup_0; }

		//{AttrIsOptional}
		public Action getAttrIsOptionalAction_0_0() { return cAttrIsOptionalAction_0_0; }

		//optional?="optional"
		public Assignment getOptionalAssignment_0_1() { return cOptionalAssignment_0_1; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_0_1_0() { return cOptionalOptionalKeyword_0_1_0; }

		//{AttrIdentifier} identifier?="identifier"
		public Group getGroup_1() { return cGroup_1; }

		//{AttrIdentifier}
		public Action getAttrIdentifierAction_1_0() { return cAttrIdentifierAction_1_0; }

		//identifier?="identifier"
		public Assignment getIdentifierAssignment_1_1() { return cIdentifierAssignment_1_1; }

		//"identifier"
		public Keyword getIdentifierIdentifierKeyword_1_1_0() { return cIdentifierIdentifierKeyword_1_1_0; }

		//{AttrIntDefault} "default" value=INT
		public Group getGroup_2() { return cGroup_2; }

		//{AttrIntDefault}
		public Action getAttrIntDefaultAction_2_0() { return cAttrIntDefaultAction_2_0; }

		//"default"
		public Keyword getDefaultKeyword_2_1() { return cDefaultKeyword_2_1; }

		//value=INT
		public Assignment getValueAssignment_2_2() { return cValueAssignment_2_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_2_0() { return cValueINTTerminalRuleCall_2_2_0; }

		//{AttrIntMax} "max" max=INT
		public Group getGroup_3() { return cGroup_3; }

		//{AttrIntMax}
		public Action getAttrIntMaxAction_3_0() { return cAttrIntMaxAction_3_0; }

		//"max"
		public Keyword getMaxKeyword_3_1() { return cMaxKeyword_3_1; }

		//max=INT
		public Assignment getMaxAssignment_3_2() { return cMaxAssignment_3_2; }

		//INT
		public RuleCall getMaxINTTerminalRuleCall_3_2_0() { return cMaxINTTerminalRuleCall_3_2_0; }

		//{AttrIntMin} "min" min=INT
		public Group getGroup_4() { return cGroup_4; }

		//{AttrIntMin}
		public Action getAttrIntMinAction_4_0() { return cAttrIntMinAction_4_0; }

		//"min"
		public Keyword getMinKeyword_4_1() { return cMinKeyword_4_1; }

		//min=INT
		public Assignment getMinAssignment_4_2() { return cMinAssignment_4_2; }

		//INT
		public RuleCall getMinINTTerminalRuleCall_4_2_0() { return cMinINTTerminalRuleCall_4_2_0; }
	}

	public class FloatTypeParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatTypeParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAttrIsOptionalAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOptionalAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOptionalOptionalKeyword_0_1_0 = (Keyword)cOptionalAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAttrFloatDefaultAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cDefaultKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueFLOATParserRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cAttrFloatMaxAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cMaxKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cMaxAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cMaxFLOATParserRuleCall_2_2_0 = (RuleCall)cMaxAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cAttrFloatMinAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cMinKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cMinAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cMinFLOATParserRuleCall_3_2_0 = (RuleCall)cMinAssignment_3_2.eContents().get(0);
		
		/// *
		// * FloatTypeParam is a super type of all possible
		// * parameters of float Attributes. Besides
		// * the value being optional, it is possible
		// * to provide a minimum and a maximum value.
		// * These parameters will be used to generate validators.
		// * / FloatTypeParam:
		//	{AttrIsOptional} optional?="optional" | {AttrFloatDefault} "default" value=FLOAT | {AttrFloatMax} "max" max=FLOAT |
		//	{AttrFloatMin} "min" min=FLOAT;
		@Override public ParserRule getRule() { return rule; }

		//{AttrIsOptional} optional?="optional" | {AttrFloatDefault} "default" value=FLOAT | {AttrFloatMax} "max" max=FLOAT |
		//{AttrFloatMin} "min" min=FLOAT
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AttrIsOptional} optional?="optional"
		public Group getGroup_0() { return cGroup_0; }

		//{AttrIsOptional}
		public Action getAttrIsOptionalAction_0_0() { return cAttrIsOptionalAction_0_0; }

		//optional?="optional"
		public Assignment getOptionalAssignment_0_1() { return cOptionalAssignment_0_1; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_0_1_0() { return cOptionalOptionalKeyword_0_1_0; }

		//{AttrFloatDefault} "default" value=FLOAT
		public Group getGroup_1() { return cGroup_1; }

		//{AttrFloatDefault}
		public Action getAttrFloatDefaultAction_1_0() { return cAttrFloatDefaultAction_1_0; }

		//"default"
		public Keyword getDefaultKeyword_1_1() { return cDefaultKeyword_1_1; }

		//value=FLOAT
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }

		//FLOAT
		public RuleCall getValueFLOATParserRuleCall_1_2_0() { return cValueFLOATParserRuleCall_1_2_0; }

		//{AttrFloatMax} "max" max=FLOAT
		public Group getGroup_2() { return cGroup_2; }

		//{AttrFloatMax}
		public Action getAttrFloatMaxAction_2_0() { return cAttrFloatMaxAction_2_0; }

		//"max"
		public Keyword getMaxKeyword_2_1() { return cMaxKeyword_2_1; }

		//max=FLOAT
		public Assignment getMaxAssignment_2_2() { return cMaxAssignment_2_2; }

		//FLOAT
		public RuleCall getMaxFLOATParserRuleCall_2_2_0() { return cMaxFLOATParserRuleCall_2_2_0; }

		//{AttrFloatMin} "min" min=FLOAT
		public Group getGroup_3() { return cGroup_3; }

		//{AttrFloatMin}
		public Action getAttrFloatMinAction_3_0() { return cAttrFloatMinAction_3_0; }

		//"min"
		public Keyword getMinKeyword_3_1() { return cMinKeyword_3_1; }

		//min=FLOAT
		public Assignment getMinAssignment_3_2() { return cMinAssignment_3_2; }

		//FLOAT
		public RuleCall getMinFLOATParserRuleCall_3_2_0() { return cMinFLOATParserRuleCall_3_2_0; }
	}

	public class StringTypeParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringTypeParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAttrIsOptionalAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOptionalAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOptionalOptionalKeyword_0_1_0 = (Keyword)cOptionalAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAttrIdentifierAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cIdentifierAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cIdentifierIdentifierKeyword_1_1_0 = (Keyword)cIdentifierAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cAttrStringDefaultAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cDefaultKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cValueAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_2_0 = (RuleCall)cValueAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cAttrStringMaxAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cMaxLengthKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cMaxAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cMaxINTTerminalRuleCall_3_2_0 = (RuleCall)cMaxAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cAttrStringMinAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cMinLengthKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cMinAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cMinINTTerminalRuleCall_4_2_0 = (RuleCall)cMinAssignment_4_2.eContents().get(0);
		
		/// *
		// * StringTypeParam is a super type of all possible
		// * parameters of string Attributes. Besides the
		// * value being optional, it is possible to mark
		// * it as the identifier of the entity and to
		// * provide a minimum and a maximum string length.
		// * These parameters will be used to generate validators.
		// * / StringTypeParam:
		//	{AttrIsOptional} optional?="optional" | {AttrIdentifier} identifier?="identifier" | {AttrStringDefault} "default"
		//	value=STRING | {AttrStringMax} "maxLength" max=INT | {AttrStringMin} "minLength" min=INT;
		@Override public ParserRule getRule() { return rule; }

		//{AttrIsOptional} optional?="optional" | {AttrIdentifier} identifier?="identifier" | {AttrStringDefault} "default"
		//value=STRING | {AttrStringMax} "maxLength" max=INT | {AttrStringMin} "minLength" min=INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AttrIsOptional} optional?="optional"
		public Group getGroup_0() { return cGroup_0; }

		//{AttrIsOptional}
		public Action getAttrIsOptionalAction_0_0() { return cAttrIsOptionalAction_0_0; }

		//optional?="optional"
		public Assignment getOptionalAssignment_0_1() { return cOptionalAssignment_0_1; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_0_1_0() { return cOptionalOptionalKeyword_0_1_0; }

		//{AttrIdentifier} identifier?="identifier"
		public Group getGroup_1() { return cGroup_1; }

		//{AttrIdentifier}
		public Action getAttrIdentifierAction_1_0() { return cAttrIdentifierAction_1_0; }

		//identifier?="identifier"
		public Assignment getIdentifierAssignment_1_1() { return cIdentifierAssignment_1_1; }

		//"identifier"
		public Keyword getIdentifierIdentifierKeyword_1_1_0() { return cIdentifierIdentifierKeyword_1_1_0; }

		//{AttrStringDefault} "default" value=STRING
		public Group getGroup_2() { return cGroup_2; }

		//{AttrStringDefault}
		public Action getAttrStringDefaultAction_2_0() { return cAttrStringDefaultAction_2_0; }

		//"default"
		public Keyword getDefaultKeyword_2_1() { return cDefaultKeyword_2_1; }

		//value=STRING
		public Assignment getValueAssignment_2_2() { return cValueAssignment_2_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_2_0() { return cValueSTRINGTerminalRuleCall_2_2_0; }

		//{AttrStringMax} "maxLength" max=INT
		public Group getGroup_3() { return cGroup_3; }

		//{AttrStringMax}
		public Action getAttrStringMaxAction_3_0() { return cAttrStringMaxAction_3_0; }

		//"maxLength"
		public Keyword getMaxLengthKeyword_3_1() { return cMaxLengthKeyword_3_1; }

		//max=INT
		public Assignment getMaxAssignment_3_2() { return cMaxAssignment_3_2; }

		//INT
		public RuleCall getMaxINTTerminalRuleCall_3_2_0() { return cMaxINTTerminalRuleCall_3_2_0; }

		//{AttrStringMin} "minLength" min=INT
		public Group getGroup_4() { return cGroup_4; }

		//{AttrStringMin}
		public Action getAttrStringMinAction_4_0() { return cAttrStringMinAction_4_0; }

		//"minLength"
		public Keyword getMinLengthKeyword_4_1() { return cMinLengthKeyword_4_1; }

		//min=INT
		public Assignment getMinAssignment_4_2() { return cMinAssignment_4_2; }

		//INT
		public RuleCall getMinINTTerminalRuleCall_4_2_0() { return cMinINTTerminalRuleCall_4_2_0; }
	}

	public class BooleanTypeParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanTypeParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAttrIsOptionalAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOptionalAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOptionalOptionalKeyword_0_1_0 = (Keyword)cOptionalAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAttrBooleanDefaultAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cDefaultKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueBooleanEnumRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		
		/// *
		// * BooleanTypeParam is a super type of all
		// * possible parameters of boolean Attributes.
		// * The value being optional is the only
		// * parameter. This parameter will be used
		// * to generate a validator.
		// * / BooleanTypeParam:
		//	{AttrIsOptional} optional?="optional" | {AttrBooleanDefault} "default" value=Boolean;
		@Override public ParserRule getRule() { return rule; }

		//{AttrIsOptional} optional?="optional" | {AttrBooleanDefault} "default" value=Boolean
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AttrIsOptional} optional?="optional"
		public Group getGroup_0() { return cGroup_0; }

		//{AttrIsOptional}
		public Action getAttrIsOptionalAction_0_0() { return cAttrIsOptionalAction_0_0; }

		//optional?="optional"
		public Assignment getOptionalAssignment_0_1() { return cOptionalAssignment_0_1; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_0_1_0() { return cOptionalOptionalKeyword_0_1_0; }

		//{AttrBooleanDefault} "default" value=Boolean
		public Group getGroup_1() { return cGroup_1; }

		//{AttrBooleanDefault}
		public Action getAttrBooleanDefaultAction_1_0() { return cAttrBooleanDefaultAction_1_0; }

		//"default"
		public Keyword getDefaultKeyword_1_1() { return cDefaultKeyword_1_1; }

		//value=Boolean
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }

		//Boolean
		public RuleCall getValueBooleanEnumRuleCall_1_2_0() { return cValueBooleanEnumRuleCall_1_2_0; }
	}

	public class FileTypeParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FileTypeParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttrIsOptionalAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOptionalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOptionalOptionalKeyword_1_0 = (Keyword)cOptionalAssignment_1.eContents().get(0);
		
		/// *
		// * FileTypeParam is a super type of all
		// * possible parameters of file Attributes.
		// * The value being optional is the only
		// * parameter.
		// * / FileTypeParam:
		//	{AttrIsOptional} optional?="optional";
		@Override public ParserRule getRule() { return rule; }

		//{AttrIsOptional} optional?="optional"
		public Group getGroup() { return cGroup; }

		//{AttrIsOptional}
		public Action getAttrIsOptionalAction_0() { return cAttrIsOptionalAction_0; }

		//optional?="optional"
		public Assignment getOptionalAssignment_1() { return cOptionalAssignment_1; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_1_0() { return cOptionalOptionalKeyword_1_0; }
	}

	public class DateTypeParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateTypeParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAttrIsOptionalAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOptionalAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOptionalOptionalKeyword_0_1_0 = (Keyword)cOptionalAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAttrDateDefaultAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cDefaultKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueDATEParserRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cAttrDateMaxAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cMaxKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cMaxAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cMaxDATEParserRuleCall_2_2_0 = (RuleCall)cMaxAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cAttrDateMinAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cMinKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cMinAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cMinDATEParserRuleCall_3_2_0 = (RuleCall)cMinAssignment_3_2.eContents().get(0);
		
		/// *
		// * DateTypeParam is a super type of all
		// * possible parameters of date Attributes.
		// * Besides the value being optional, it
		// * is possible to provide a minimum and a
		// * maximum value. These parameters will
		// * be used to generate validators.
		// * / DateTypeParam:
		//	{AttrIsOptional} optional?="optional" | {AttrDateDefault} "default" value=DATE | {AttrDateMax} "max" max=DATE |
		//	{AttrDateMin} "min" min=DATE;
		@Override public ParserRule getRule() { return rule; }

		//{AttrIsOptional} optional?="optional" | {AttrDateDefault} "default" value=DATE | {AttrDateMax} "max" max=DATE |
		//{AttrDateMin} "min" min=DATE
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AttrIsOptional} optional?="optional"
		public Group getGroup_0() { return cGroup_0; }

		//{AttrIsOptional}
		public Action getAttrIsOptionalAction_0_0() { return cAttrIsOptionalAction_0_0; }

		//optional?="optional"
		public Assignment getOptionalAssignment_0_1() { return cOptionalAssignment_0_1; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_0_1_0() { return cOptionalOptionalKeyword_0_1_0; }

		//{AttrDateDefault} "default" value=DATE
		public Group getGroup_1() { return cGroup_1; }

		//{AttrDateDefault}
		public Action getAttrDateDefaultAction_1_0() { return cAttrDateDefaultAction_1_0; }

		//"default"
		public Keyword getDefaultKeyword_1_1() { return cDefaultKeyword_1_1; }

		//value=DATE
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }

		//DATE
		public RuleCall getValueDATEParserRuleCall_1_2_0() { return cValueDATEParserRuleCall_1_2_0; }

		//{AttrDateMax} "max" max=DATE
		public Group getGroup_2() { return cGroup_2; }

		//{AttrDateMax}
		public Action getAttrDateMaxAction_2_0() { return cAttrDateMaxAction_2_0; }

		//"max"
		public Keyword getMaxKeyword_2_1() { return cMaxKeyword_2_1; }

		//max=DATE
		public Assignment getMaxAssignment_2_2() { return cMaxAssignment_2_2; }

		//DATE
		public RuleCall getMaxDATEParserRuleCall_2_2_0() { return cMaxDATEParserRuleCall_2_2_0; }

		//{AttrDateMin} "min" min=DATE
		public Group getGroup_3() { return cGroup_3; }

		//{AttrDateMin}
		public Action getAttrDateMinAction_3_0() { return cAttrDateMinAction_3_0; }

		//"min"
		public Keyword getMinKeyword_3_1() { return cMinKeyword_3_1; }

		//min=DATE
		public Assignment getMinAssignment_3_2() { return cMinAssignment_3_2; }

		//DATE
		public RuleCall getMinDATEParserRuleCall_3_2_0() { return cMinDATEParserRuleCall_3_2_0; }
	}

	public class TimeTypeParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeTypeParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAttrIsOptionalAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOptionalAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOptionalOptionalKeyword_0_1_0 = (Keyword)cOptionalAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAttrTimeDefaultAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cDefaultKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueTIMEParserRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cAttrTimeMaxAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cMaxKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cMaxAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cMaxTIMEParserRuleCall_2_2_0 = (RuleCall)cMaxAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cAttrTimeMinAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cMinKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cMinAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cMinTIMEParserRuleCall_3_2_0 = (RuleCall)cMinAssignment_3_2.eContents().get(0);
		
		/// *
		// * TimeTypeParam is a super type of all
		// * possible parameters of time Attributes.
		// * Besides the value being optional, it
		// * is possible to provide a minimum and a
		// * maximum value. These parameters will
		// * be used to generate validators.
		// * / TimeTypeParam:
		//	{AttrIsOptional} optional?="optional" | {AttrTimeDefault} "default" value=TIME | {AttrTimeMax} "max" max=TIME |
		//	{AttrTimeMin} "min" min=TIME;
		@Override public ParserRule getRule() { return rule; }

		//{AttrIsOptional} optional?="optional" | {AttrTimeDefault} "default" value=TIME | {AttrTimeMax} "max" max=TIME |
		//{AttrTimeMin} "min" min=TIME
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AttrIsOptional} optional?="optional"
		public Group getGroup_0() { return cGroup_0; }

		//{AttrIsOptional}
		public Action getAttrIsOptionalAction_0_0() { return cAttrIsOptionalAction_0_0; }

		//optional?="optional"
		public Assignment getOptionalAssignment_0_1() { return cOptionalAssignment_0_1; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_0_1_0() { return cOptionalOptionalKeyword_0_1_0; }

		//{AttrTimeDefault} "default" value=TIME
		public Group getGroup_1() { return cGroup_1; }

		//{AttrTimeDefault}
		public Action getAttrTimeDefaultAction_1_0() { return cAttrTimeDefaultAction_1_0; }

		//"default"
		public Keyword getDefaultKeyword_1_1() { return cDefaultKeyword_1_1; }

		//value=TIME
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }

		//TIME
		public RuleCall getValueTIMEParserRuleCall_1_2_0() { return cValueTIMEParserRuleCall_1_2_0; }

		//{AttrTimeMax} "max" max=TIME
		public Group getGroup_2() { return cGroup_2; }

		//{AttrTimeMax}
		public Action getAttrTimeMaxAction_2_0() { return cAttrTimeMaxAction_2_0; }

		//"max"
		public Keyword getMaxKeyword_2_1() { return cMaxKeyword_2_1; }

		//max=TIME
		public Assignment getMaxAssignment_2_2() { return cMaxAssignment_2_2; }

		//TIME
		public RuleCall getMaxTIMEParserRuleCall_2_2_0() { return cMaxTIMEParserRuleCall_2_2_0; }

		//{AttrTimeMin} "min" min=TIME
		public Group getGroup_3() { return cGroup_3; }

		//{AttrTimeMin}
		public Action getAttrTimeMinAction_3_0() { return cAttrTimeMinAction_3_0; }

		//"min"
		public Keyword getMinKeyword_3_1() { return cMinKeyword_3_1; }

		//min=TIME
		public Assignment getMinAssignment_3_2() { return cMinAssignment_3_2; }

		//TIME
		public RuleCall getMinTIMEParserRuleCall_3_2_0() { return cMinTIMEParserRuleCall_3_2_0; }
	}

	public class DateTimeTypeParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateTimeTypeParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAttrIsOptionalAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOptionalAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOptionalOptionalKeyword_0_1_0 = (Keyword)cOptionalAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAttrDateTimeDefaultAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cDefaultKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueDATE_TIMEParserRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cAttrDateTimeMaxAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cMaxKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cMaxAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cMaxDATE_TIMEParserRuleCall_2_2_0 = (RuleCall)cMaxAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cAttrDateTimeMinAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cMinKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cMinAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cMinDATE_TIMEParserRuleCall_3_2_0 = (RuleCall)cMinAssignment_3_2.eContents().get(0);
		
		/// *
		// * DateTimeTypeParam is a super type of
		// * all possible parameters of datetime
		// * Attributes. Besides the value being
		// * optional, it is possible to provide
		// * a minimum and a maximum value. These
		// * parameters will be used to generate
		// * validators.
		// * / DateTimeTypeParam:
		//	{AttrIsOptional} optional?="optional" | {AttrDateTimeDefault} "default" value=DATE_TIME | {AttrDateTimeMax} "max"
		//	max=DATE_TIME | {AttrDateTimeMin} "min" min=DATE_TIME;
		@Override public ParserRule getRule() { return rule; }

		//{AttrIsOptional} optional?="optional" | {AttrDateTimeDefault} "default" value=DATE_TIME | {AttrDateTimeMax} "max"
		//max=DATE_TIME | {AttrDateTimeMin} "min" min=DATE_TIME
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AttrIsOptional} optional?="optional"
		public Group getGroup_0() { return cGroup_0; }

		//{AttrIsOptional}
		public Action getAttrIsOptionalAction_0_0() { return cAttrIsOptionalAction_0_0; }

		//optional?="optional"
		public Assignment getOptionalAssignment_0_1() { return cOptionalAssignment_0_1; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_0_1_0() { return cOptionalOptionalKeyword_0_1_0; }

		//{AttrDateTimeDefault} "default" value=DATE_TIME
		public Group getGroup_1() { return cGroup_1; }

		//{AttrDateTimeDefault}
		public Action getAttrDateTimeDefaultAction_1_0() { return cAttrDateTimeDefaultAction_1_0; }

		//"default"
		public Keyword getDefaultKeyword_1_1() { return cDefaultKeyword_1_1; }

		//value=DATE_TIME
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }

		//DATE_TIME
		public RuleCall getValueDATE_TIMEParserRuleCall_1_2_0() { return cValueDATE_TIMEParserRuleCall_1_2_0; }

		//{AttrDateTimeMax} "max" max=DATE_TIME
		public Group getGroup_2() { return cGroup_2; }

		//{AttrDateTimeMax}
		public Action getAttrDateTimeMaxAction_2_0() { return cAttrDateTimeMaxAction_2_0; }

		//"max"
		public Keyword getMaxKeyword_2_1() { return cMaxKeyword_2_1; }

		//max=DATE_TIME
		public Assignment getMaxAssignment_2_2() { return cMaxAssignment_2_2; }

		//DATE_TIME
		public RuleCall getMaxDATE_TIMEParserRuleCall_2_2_0() { return cMaxDATE_TIMEParserRuleCall_2_2_0; }

		//{AttrDateTimeMin} "min" min=DATE_TIME
		public Group getGroup_3() { return cGroup_3; }

		//{AttrDateTimeMin}
		public Action getAttrDateTimeMinAction_3_0() { return cAttrDateTimeMinAction_3_0; }

		//"min"
		public Keyword getMinKeyword_3_1() { return cMinKeyword_3_1; }

		//min=DATE_TIME
		public Assignment getMinAssignment_3_2() { return cMinAssignment_3_2; }

		//DATE_TIME
		public RuleCall getMinDATE_TIMEParserRuleCall_3_2_0() { return cMinDATE_TIMEParserRuleCall_3_2_0; }
	}

	public class EnumTypeParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumTypeParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAttrIsOptionalAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOptionalAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOptionalOptionalKeyword_0_1_0 = (Keyword)cOptionalAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAttrEnumDefaultAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cDefaultKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		
		/// *
		// * ReferencedTypeParam is a super type of all possible parameters of referenced
		// * Attributes. The value being optional is the only parameter. This parameter
		// * will be used to generate a validator.
		// * / EnumTypeParam:
		//	{AttrIsOptional} optional?="optional" | {AttrEnumDefault} "default" value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//{AttrIsOptional} optional?="optional" | {AttrEnumDefault} "default" value=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AttrIsOptional} optional?="optional"
		public Group getGroup_0() { return cGroup_0; }

		//{AttrIsOptional}
		public Action getAttrIsOptionalAction_0_0() { return cAttrIsOptionalAction_0_0; }

		//optional?="optional"
		public Assignment getOptionalAssignment_0_1() { return cOptionalAssignment_0_1; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_0_1_0() { return cOptionalOptionalKeyword_0_1_0; }

		//{AttrEnumDefault} "default" value=STRING
		public Group getGroup_1() { return cGroup_1; }

		//{AttrEnumDefault}
		public Action getAttrEnumDefaultAction_1_0() { return cAttrEnumDefaultAction_1_0; }

		//"default"
		public Keyword getDefaultKeyword_1_1() { return cDefaultKeyword_1_1; }

		//value=STRING
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_2_0() { return cValueSTRINGTerminalRuleCall_1_2_0; }
	}

	public class WorkflowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Workflow");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cWorkflowElementEntriesAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cWorkflowElementEntriesWorkflowElementEntryParserRuleCall_0_0 = (RuleCall)cWorkflowElementEntriesAssignment_0.eContents().get(0);
		private final Assignment cAppsAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cAppsAppParserRuleCall_1_0 = (RuleCall)cAppsAssignment_1.eContents().get(0);
		
		///////////////////////////////////////
		///////////////////////////////////////
		//// New Workflow Concept
		///////////////////////////////////////
		///////////////////////////////////////
		/// *
		// * A workflow allows to construct multiple applications based on WorkflowElements and to specify apps that
		// * consist of these workflowelements.
		// * / Workflow:
		//	workflowElementEntries+=WorkflowElementEntry+ & apps+=App+;
		@Override public ParserRule getRule() { return rule; }

		//workflowElementEntries+=WorkflowElementEntry+ & apps+=App+
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//workflowElementEntries+=WorkflowElementEntry+
		public Assignment getWorkflowElementEntriesAssignment_0() { return cWorkflowElementEntriesAssignment_0; }

		//WorkflowElementEntry
		public RuleCall getWorkflowElementEntriesWorkflowElementEntryParserRuleCall_0_0() { return cWorkflowElementEntriesWorkflowElementEntryParserRuleCall_0_0; }

		//apps+=App+
		public Assignment getAppsAssignment_1() { return cAppsAssignment_1; }

		//App
		public RuleCall getAppsAppParserRuleCall_1_0() { return cAppsAppParserRuleCall_1_0; }
	}

	public class WorkflowElementEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkflowElementEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkflowElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWorkflowElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cWorkflowElementWorkflowElementCrossReference_1_0 = (CrossReference)cWorkflowElementAssignment_1.eContents().get(0);
		private final RuleCall cWorkflowElementWorkflowElementIDTerminalRuleCall_1_0_1 = (RuleCall)cWorkflowElementWorkflowElementCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInvokableAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cInvokableInvokableKeyword_2_1_0 = (Keyword)cInvokableAssignment_2_1.eContents().get(0);
		private final Assignment cEventDescAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cEventDescSTRINGTerminalRuleCall_2_2_0 = (RuleCall)cEventDescAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cFiredEventsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFiredEventsFireEventEntryParserRuleCall_3_0 = (RuleCall)cFiredEventsAssignment_3.eContents().get(0);
		
		/// *
		// * WorkflowElements provide reusable functionality across applications.
		// * They allow the construction of a directed graph via events. For every event,
		// * 0 to n Workflowelements can be started
		// * / WorkflowElementEntry:
		//	"WorkflowElement" workflowElement=[WorkflowElement] ("(" invokable?="invokable" eventDesc=STRING? ")")?
		//	firedEvents+=FireEventEntry+;
		@Override public ParserRule getRule() { return rule; }

		//"WorkflowElement" workflowElement=[WorkflowElement] ("(" invokable?="invokable" eventDesc=STRING? ")")?
		//firedEvents+=FireEventEntry+
		public Group getGroup() { return cGroup; }

		//"WorkflowElement"
		public Keyword getWorkflowElementKeyword_0() { return cWorkflowElementKeyword_0; }

		//workflowElement=[WorkflowElement]
		public Assignment getWorkflowElementAssignment_1() { return cWorkflowElementAssignment_1; }

		//[WorkflowElement]
		public CrossReference getWorkflowElementWorkflowElementCrossReference_1_0() { return cWorkflowElementWorkflowElementCrossReference_1_0; }

		//ID
		public RuleCall getWorkflowElementWorkflowElementIDTerminalRuleCall_1_0_1() { return cWorkflowElementWorkflowElementIDTerminalRuleCall_1_0_1; }

		//("(" invokable?="invokable" eventDesc=STRING? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//invokable?="invokable"
		public Assignment getInvokableAssignment_2_1() { return cInvokableAssignment_2_1; }

		//"invokable"
		public Keyword getInvokableInvokableKeyword_2_1_0() { return cInvokableInvokableKeyword_2_1_0; }

		//eventDesc=STRING?
		public Assignment getEventDescAssignment_2_2() { return cEventDescAssignment_2_2; }

		//STRING
		public RuleCall getEventDescSTRINGTerminalRuleCall_2_2_0() { return cEventDescSTRINGTerminalRuleCall_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//firedEvents+=FireEventEntry+
		public Assignment getFiredEventsAssignment_3() { return cFiredEventsAssignment_3; }

		//FireEventEntry
		public RuleCall getFiredEventsFireEventEntryParserRuleCall_3_0() { return cFiredEventsFireEventEntryParserRuleCall_3_0; }
	}

	public class FireEventEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FireEventEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFiresKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEventWorkflowEventCrossReference_1_0 = (CrossReference)cEventAssignment_1.eContents().get(0);
		private final RuleCall cEventWorkflowEventIDTerminalRuleCall_1_0_1 = (RuleCall)cEventWorkflowEventCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cStartKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cStartedWorkflowElementAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final CrossReference cStartedWorkflowElementWorkflowElementCrossReference_3_0_1_0 = (CrossReference)cStartedWorkflowElementAssignment_3_0_1.eContents().get(0);
		private final RuleCall cStartedWorkflowElementWorkflowElementIDTerminalRuleCall_3_0_1_0_1 = (RuleCall)cStartedWorkflowElementWorkflowElementCrossReference_3_0_1_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cEndKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cEndWorkflowAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final Keyword cEndWorkflowWorkflowKeyword_3_1_1_0 = (Keyword)cEndWorkflowAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FireEventEntry:
		//	"fires" event=[WorkflowEvent] "{" ("start" startedWorkflowElement=[WorkflowElement] | "end" endWorkflow?="workflow")
		//	"}";
		@Override public ParserRule getRule() { return rule; }

		//"fires" event=[WorkflowEvent] "{" ("start" startedWorkflowElement=[WorkflowElement] | "end" endWorkflow?="workflow") "}"
		public Group getGroup() { return cGroup; }

		//"fires"
		public Keyword getFiresKeyword_0() { return cFiresKeyword_0; }

		//event=[WorkflowEvent]
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }

		//[WorkflowEvent]
		public CrossReference getEventWorkflowEventCrossReference_1_0() { return cEventWorkflowEventCrossReference_1_0; }

		//ID
		public RuleCall getEventWorkflowEventIDTerminalRuleCall_1_0_1() { return cEventWorkflowEventIDTerminalRuleCall_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"start" startedWorkflowElement=[WorkflowElement] | "end" endWorkflow?="workflow"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"start" startedWorkflowElement=[WorkflowElement]
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"start"
		public Keyword getStartKeyword_3_0_0() { return cStartKeyword_3_0_0; }

		//startedWorkflowElement=[WorkflowElement]
		public Assignment getStartedWorkflowElementAssignment_3_0_1() { return cStartedWorkflowElementAssignment_3_0_1; }

		//[WorkflowElement]
		public CrossReference getStartedWorkflowElementWorkflowElementCrossReference_3_0_1_0() { return cStartedWorkflowElementWorkflowElementCrossReference_3_0_1_0; }

		//ID
		public RuleCall getStartedWorkflowElementWorkflowElementIDTerminalRuleCall_3_0_1_0_1() { return cStartedWorkflowElementWorkflowElementIDTerminalRuleCall_3_0_1_0_1; }

		//"end" endWorkflow?="workflow"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"end"
		public Keyword getEndKeyword_3_1_0() { return cEndKeyword_3_1_0; }

		//endWorkflow?="workflow"
		public Assignment getEndWorkflowAssignment_3_1_1() { return cEndWorkflowAssignment_3_1_1; }

		//"workflow"
		public Keyword getEndWorkflowWorkflowKeyword_3_1_1_0() { return cEndWorkflowWorkflowKeyword_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class WorkflowEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkflowEvent");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		/// *
		// *  Workflowevents are used for the navigation in the graph of workflowelements
		// * / WorkflowEvent:
		//	name=EID;
		@Override public ParserRule getRule() { return rule; }

		//name=EID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//EID
		public RuleCall getNameEIDParserRuleCall_0() { return cNameEIDParserRuleCall_0; }
	}

	public class AppElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "App");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cAppKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameEIDParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cWorkflowElementsKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_3_1 = (Keyword)cGroup_0_3.eContents().get(1);
		private final Assignment cWorkflowElementsAssignment_0_3_2 = (Assignment)cGroup_0_3.eContents().get(2);
		private final RuleCall cWorkflowElementsWorkflowElementReferenceParserRuleCall_0_3_2_0 = (RuleCall)cWorkflowElementsAssignment_0_3_2.eContents().get(0);
		private final Group cGroup_0_3_3 = (Group)cGroup_0_3.eContents().get(3);
		private final Keyword cCommaKeyword_0_3_3_0 = (Keyword)cGroup_0_3_3.eContents().get(0);
		private final Assignment cWorkflowElementsAssignment_0_3_3_1 = (Assignment)cGroup_0_3_3.eContents().get(1);
		private final RuleCall cWorkflowElementsWorkflowElementReferenceParserRuleCall_0_3_3_1_0 = (RuleCall)cWorkflowElementsAssignment_0_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_3_4 = (Keyword)cGroup_0_3.eContents().get(4);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cAppNameKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAppNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAppNameSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cAppNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cDefaultConnectionKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cDefaultConnectionAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final CrossReference cDefaultConnectionRemoteConnectionCrossReference_2_0_1_0 = (CrossReference)cDefaultConnectionAssignment_2_0_1.eContents().get(0);
		private final RuleCall cDefaultConnectionRemoteConnectionIDTerminalRuleCall_2_0_1_0_1 = (RuleCall)cDefaultConnectionRemoteConnectionCrossReference_2_0_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		/// *
		// * The application bundles multiple workflow elements and describes general app information.
		// * / App:
		//	"App" name=EID "{" ("WorkflowElements" "{" workflowElements+=WorkflowElementReference (","
		//	workflowElements+=WorkflowElementReference)* "}") & "appName" appName=STRING & ("defaultConnection"
		//	defaultConnection=[RemoteConnection])? "}";
		@Override public ParserRule getRule() { return rule; }

		//"App" name=EID "{" ("WorkflowElements" "{" workflowElements+=WorkflowElementReference (","
		//workflowElements+=WorkflowElementReference)* "}") & "appName" appName=STRING & ("defaultConnection"
		//defaultConnection=[RemoteConnection])? "}"
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"App" name=EID "{" ("WorkflowElements" "{" workflowElements+=WorkflowElementReference (","
		//workflowElements+=WorkflowElementReference)* "}")
		public Group getGroup_0() { return cGroup_0; }

		//"App"
		public Keyword getAppKeyword_0_0() { return cAppKeyword_0_0; }

		//name=EID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//EID
		public RuleCall getNameEIDParserRuleCall_0_1_0() { return cNameEIDParserRuleCall_0_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }

		//"WorkflowElements" "{" workflowElements+=WorkflowElementReference ("," workflowElements+=WorkflowElementReference)* "}"
		public Group getGroup_0_3() { return cGroup_0_3; }

		//"WorkflowElements"
		public Keyword getWorkflowElementsKeyword_0_3_0() { return cWorkflowElementsKeyword_0_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_3_1() { return cLeftCurlyBracketKeyword_0_3_1; }

		//workflowElements+=WorkflowElementReference
		public Assignment getWorkflowElementsAssignment_0_3_2() { return cWorkflowElementsAssignment_0_3_2; }

		//WorkflowElementReference
		public RuleCall getWorkflowElementsWorkflowElementReferenceParserRuleCall_0_3_2_0() { return cWorkflowElementsWorkflowElementReferenceParserRuleCall_0_3_2_0; }

		//("," workflowElements+=WorkflowElementReference)*
		public Group getGroup_0_3_3() { return cGroup_0_3_3; }

		//","
		public Keyword getCommaKeyword_0_3_3_0() { return cCommaKeyword_0_3_3_0; }

		//workflowElements+=WorkflowElementReference
		public Assignment getWorkflowElementsAssignment_0_3_3_1() { return cWorkflowElementsAssignment_0_3_3_1; }

		//WorkflowElementReference
		public RuleCall getWorkflowElementsWorkflowElementReferenceParserRuleCall_0_3_3_1_0() { return cWorkflowElementsWorkflowElementReferenceParserRuleCall_0_3_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_3_4() { return cRightCurlyBracketKeyword_0_3_4; }

		//"appName" appName=STRING
		public Group getGroup_1() { return cGroup_1; }

		//"appName"
		public Keyword getAppNameKeyword_1_0() { return cAppNameKeyword_1_0; }

		//appName=STRING
		public Assignment getAppNameAssignment_1_1() { return cAppNameAssignment_1_1; }

		//STRING
		public RuleCall getAppNameSTRINGTerminalRuleCall_1_1_0() { return cAppNameSTRINGTerminalRuleCall_1_1_0; }

		//("defaultConnection" defaultConnection=[RemoteConnection])? "}"
		public Group getGroup_2() { return cGroup_2; }

		//("defaultConnection" defaultConnection=[RemoteConnection])?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"defaultConnection"
		public Keyword getDefaultConnectionKeyword_2_0_0() { return cDefaultConnectionKeyword_2_0_0; }

		//defaultConnection=[RemoteConnection]
		public Assignment getDefaultConnectionAssignment_2_0_1() { return cDefaultConnectionAssignment_2_0_1; }

		//[RemoteConnection]
		public CrossReference getDefaultConnectionRemoteConnectionCrossReference_2_0_1_0() { return cDefaultConnectionRemoteConnectionCrossReference_2_0_1_0; }

		//ID
		public RuleCall getDefaultConnectionRemoteConnectionIDTerminalRuleCall_2_0_1_0_1() { return cDefaultConnectionRemoteConnectionIDTerminalRuleCall_2_0_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1() { return cRightCurlyBracketKeyword_2_1; }
	}

	public class WorkflowElementReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkflowElementReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWorkflowElementReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cWorkflowElementReferenceWorkflowElementCrossReference_0_0 = (CrossReference)cWorkflowElementReferenceAssignment_0.eContents().get(0);
		private final RuleCall cWorkflowElementReferenceWorkflowElementIDTerminalRuleCall_0_0_1 = (RuleCall)cWorkflowElementReferenceWorkflowElementCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStartableAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cStartableStartableKeyword_1_1_0 = (Keyword)cStartableAssignment_1_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAliasSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cAliasAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		/// *
		// * When referenced in an App, WorkflowElements can be specified as startable from the application's start screen.
		// * The alias determines the corresponding button label.
		// * / WorkflowElementReference:
		//	workflowElementReference=[WorkflowElement] ("(" startable?="startable:" alias=STRING ")")?;
		@Override public ParserRule getRule() { return rule; }

		//workflowElementReference=[WorkflowElement] ("(" startable?="startable:" alias=STRING ")")?
		public Group getGroup() { return cGroup; }

		//workflowElementReference=[WorkflowElement]
		public Assignment getWorkflowElementReferenceAssignment_0() { return cWorkflowElementReferenceAssignment_0; }

		//[WorkflowElement]
		public CrossReference getWorkflowElementReferenceWorkflowElementCrossReference_0_0() { return cWorkflowElementReferenceWorkflowElementCrossReference_0_0; }

		//ID
		public RuleCall getWorkflowElementReferenceWorkflowElementIDTerminalRuleCall_0_0_1() { return cWorkflowElementReferenceWorkflowElementIDTerminalRuleCall_0_0_1; }

		//("(" startable?="startable:" alias=STRING ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//startable?="startable:"
		public Assignment getStartableAssignment_1_1() { return cStartableAssignment_1_1; }

		//"startable:"
		public Keyword getStartableStartableKeyword_1_1_0() { return cStartableStartableKeyword_1_1_0; }

		//alias=STRING
		public Assignment getAliasAssignment_1_2() { return cAliasAssignment_1_2; }

		//STRING
		public RuleCall getAliasSTRINGTerminalRuleCall_1_2_0() { return cAliasSTRINGTerminalRuleCall_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class DATEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DATE");
		private final RuleCall cDATE_FORMATTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		///////////////////////////////////////
		///////////////////////////////////////
		//// Terminal and data type rules
		///////////////////////////////////////
		///////////////////////////////////////
		/// **
		// * Definition of a date. A string that conforms of the following format is expected:
		// * YYYY-MM-DD
		// * / DATE returns ecore::EDate:
		//	DATE_FORMAT;
		@Override public ParserRule getRule() { return rule; }

		//DATE_FORMAT
		public RuleCall getDATE_FORMATTerminalRuleCall() { return cDATE_FORMATTerminalRuleCall; }
	}

	public class TIMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TIME");
		private final RuleCall cTIME_FORMATTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// **
		// * Definition of the time. A string that conforms of the following format is expected:
		// * hh:mm:ss[(+|-)hh[:mm]] or hh:mm:ss[Z]
		// * / TIME returns ecore::EDate:
		//	TIME_FORMAT;
		@Override public ParserRule getRule() { return rule; }

		//TIME_FORMAT
		public RuleCall getTIME_FORMATTerminalRuleCall() { return cTIME_FORMATTerminalRuleCall; }
	}

	public class DATE_TIMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DATE_TIME");
		private final RuleCall cDATE_TIME_FORMATTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// **
		// * Definition of date and time. A string that conforms ISO 8601 is expected.
		// * YYYY-MM-DDThh:mm:ss[(+|-)hh[:mm]] or
		// * YYYY-MM-DDThh:mm:ss[Z]
		// * / DATE_TIME returns ecore::EDate:
		//	DATE_TIME_FORMAT;
		@Override public ParserRule getRule() { return rule; }

		//DATE_TIME_FORMAT
		public RuleCall getDATE_TIME_FORMATTerminalRuleCall() { return cDATE_TIME_FORMATTerminalRuleCall; }
	}

	public class FLOATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		/// **
		// * Float #.#
		// * / FLOAT returns ecore::EDouble:
		//	INT "." INT;
		@Override public ParserRule getRule() { return rule; }

		//INT "." INT
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class PERCENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PERCENT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cPercentSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		/// **
		// * Percent #%
		// * / PERCENT returns ecore::EInt:
		//	INT "%";
		@Override public ParserRule getRule() { return rule; }

		//INT "%"
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"%"
		public Keyword getPercentSignKeyword_1() { return cPercentSignKeyword_1; }
	}

	public class EIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLatitudeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLongitudeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAltitudeKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCityKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cStreetKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cNumberKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cPostalCodeKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cCountryKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cProvinceKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cBoldKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cItalicKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cNormalKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cAquaKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cBlackKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cBlueKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cGrayKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cGreenKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cLimeKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cMaroonKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cNavyKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cOliveKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cPurpleKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cRedKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cSilverKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cWhiteKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cYellowKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cLocationKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final RuleCall cIDTerminalRuleCall_27 = (RuleCall)cAlternatives.eContents().get(27);
		
		/// *
		// * Extended, keyword insensitive ID. Using the EID allows to use a known keyword as an ID.
		// * 
		// * TODO Find all keywords that do not break the grammar
		// * / //'action' | 'actions' |
		////'silent' | 'event' | 'valid' | 'empty' | 'filled' | 'enum' | 'entity' | 'name' |
		////'description' | 'optional' | 'tabTitle' | 'tabIcon' | 
		////'displayAll' | 'fontSize' | 'color' | 'textStyle' | 
		////	'only' | 'style' | 'text' | 'height' | 'width' |
		////	'src' | 'columns' | 'rows' | 'horizontal' | 'vertical' |
		////	'onRightSwipe' | 'onWrongValidation' | 'onConnectionLost' | 'validator' |
		////	'connection' | 'model' | 'attributes' | 'message' | 'format' | 'regEx' | 'max' | 'min' |
		////	'maxLength' | 'minLength' | 'main' | 'appName' | 'appVersion' | 'defaultConnection' | 'startView' | 'modelVersion' |
		////	'uri' | 'password' | 'user' | 'key' |
		////	'cache' | 'providerType' | 'local' | 'filter' | 'where' | 'allowedOperations' | 'first' | 
		////	'save' | 'load' | 'remove' | 'processChain' | 'step' |
		////	'forwardMessage' | 'backwardMessage' | 'validator' | 'validators' | 
		////	'unbind' | 'map' | 'unmap' | 'all' | 'call' | 'onTouch' | 'onLeftSwipe' | 'use' | 'for' | 'to' | 'bind' | 'on' | 'from'
		////	'forwardCondition' | 'forwardOnEvent' | 'backwardCondition' | 'backwardOnEvent' |'view' | 'onInitialized' | 'defaultProcessChain' | 
		////	'integer' | 'float' | 'string' | 'boolean' | 'date' | 'time' | 'timestamp' | 'remoteConnection' |  'contentProvider' |
		//EID: //location content provider fields
		//	"latitude" | "longitude" | "altitude" | "city" | "street" | "number" | "postalCode" | "country" | "province" | // font styles
		//	"bold" | "italic" | "normal" | // colors
		//	"aqua" | "black" | "blue" | "gray" | "green" | "lime" | "maroon" | "navy" | "olive" | "purple" | "red" | "silver" |
		//	"white" | "yellow" | // other keywords
		//	"Location" | // arbitrary ID
		//	ID;
		@Override public ParserRule getRule() { return rule; }

		////location content provider fields
		//"latitude" | "longitude" | "altitude" | "city" | "street" | "number" | "postalCode" | "country" | "province" | // font styles
		//"bold" | "italic" | "normal" | // colors
		//"aqua" | "black" | "blue" | "gray" | "green" | "lime" | "maroon" | "navy" | "olive" | "purple" | "red" | "silver" |
		//"white" | "yellow" | // other keywords
		//"Location" | // arbitrary ID
		//ID
		public Alternatives getAlternatives() { return cAlternatives; }

		////location content provider fields
		//"latitude"
		public Keyword getLatitudeKeyword_0() { return cLatitudeKeyword_0; }

		//"longitude"
		public Keyword getLongitudeKeyword_1() { return cLongitudeKeyword_1; }

		//"altitude"
		public Keyword getAltitudeKeyword_2() { return cAltitudeKeyword_2; }

		//"city"
		public Keyword getCityKeyword_3() { return cCityKeyword_3; }

		//"street"
		public Keyword getStreetKeyword_4() { return cStreetKeyword_4; }

		//"number"
		public Keyword getNumberKeyword_5() { return cNumberKeyword_5; }

		//"postalCode"
		public Keyword getPostalCodeKeyword_6() { return cPostalCodeKeyword_6; }

		//"country"
		public Keyword getCountryKeyword_7() { return cCountryKeyword_7; }

		//"province"
		public Keyword getProvinceKeyword_8() { return cProvinceKeyword_8; }

		//// font styles
		//"bold"
		public Keyword getBoldKeyword_9() { return cBoldKeyword_9; }

		//"italic"
		public Keyword getItalicKeyword_10() { return cItalicKeyword_10; }

		//"normal"
		public Keyword getNormalKeyword_11() { return cNormalKeyword_11; }

		//// colors
		//"aqua"
		public Keyword getAquaKeyword_12() { return cAquaKeyword_12; }

		//"black"
		public Keyword getBlackKeyword_13() { return cBlackKeyword_13; }

		//"blue"
		public Keyword getBlueKeyword_14() { return cBlueKeyword_14; }

		//"gray"
		public Keyword getGrayKeyword_15() { return cGrayKeyword_15; }

		//"green"
		public Keyword getGreenKeyword_16() { return cGreenKeyword_16; }

		//"lime"
		public Keyword getLimeKeyword_17() { return cLimeKeyword_17; }

		//"maroon"
		public Keyword getMaroonKeyword_18() { return cMaroonKeyword_18; }

		//"navy"
		public Keyword getNavyKeyword_19() { return cNavyKeyword_19; }

		//"olive"
		public Keyword getOliveKeyword_20() { return cOliveKeyword_20; }

		//"purple"
		public Keyword getPurpleKeyword_21() { return cPurpleKeyword_21; }

		//"red"
		public Keyword getRedKeyword_22() { return cRedKeyword_22; }

		//"silver"
		public Keyword getSilverKeyword_23() { return cSilverKeyword_23; }

		//"white"
		public Keyword getWhiteKeyword_24() { return cWhiteKeyword_24; }

		//"yellow"
		public Keyword getYellowKeyword_25() { return cYellowKeyword_25; }

		//// other keywords
		//"Location"
		public Keyword getLocationKeyword_26() { return cLocationKeyword_26; }

		//// arbitrary ID
		//ID
		public RuleCall getIDTerminalRuleCall_27() { return cIDTerminalRuleCall_27; }
	}

	public class QUALIFIED_NAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QUALIFIED_NAME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cEIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		/// **
		// * Qualified names of the form
		// * <code>ID (.ID)*</code>
		// * / QUALIFIED_NAME:
		//	EID ("." EID)*;
		@Override public ParserRule getRule() { return rule; }

		//EID ("." EID)*
		public Group getGroup() { return cGroup; }

		//EID
		public RuleCall getEIDParserRuleCall_0() { return cEIDParserRuleCall_0; }

		//("." EID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//EID
		public RuleCall getEIDParserRuleCall_1_1() { return cEIDParserRuleCall_1_1; }
	}

	public class OP_MATH_PLUSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OP_MATH_PLUS");
		private final Keyword cPlusSignKeyword = (Keyword)rule.eContents().get(1);
		
		////////////////////////////////////////////////////////////
		//// Operators
		////////////////////////////////////////////////////////////
		//OP_MATH_PLUS:
		//	"+";
		@Override public ParserRule getRule() { return rule; }

		//"+"
		public Keyword getPlusSignKeyword() { return cPlusSignKeyword; }
	}

	public class OP_MATH_MINUSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OP_MATH_MINUS");
		private final Keyword cHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//OP_MATH_MINUS:
		//	"-";
		@Override public ParserRule getRule() { return rule; }

		//"-"
		public Keyword getHyphenMinusKeyword() { return cHyphenMinusKeyword; }
	}

	public class OP_MATH_MULTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OP_MATH_MULT");
		private final Keyword cAsteriskKeyword = (Keyword)rule.eContents().get(1);
		
		//OP_MATH_MULT:
		//	"*";
		@Override public ParserRule getRule() { return rule; }

		//"*"
		public Keyword getAsteriskKeyword() { return cAsteriskKeyword; }
	}

	public class OP_MATH_DIVElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OP_MATH_DIV");
		private final Keyword cSolidusKeyword = (Keyword)rule.eContents().get(1);
		
		//OP_MATH_DIV:
		//	"/";
		@Override public ParserRule getRule() { return rule; }

		//"/"
		public Keyword getSolidusKeyword() { return cSolidusKeyword; }
	}

	public class OP_STRING_CONCATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OP_STRING_CONCAT");
		private final Keyword cAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//OP_STRING_CONCAT:
		//	"&";
		@Override public ParserRule getRule() { return rule; }

		//"&"
		public Keyword getAmpersandKeyword() { return cAmpersandKeyword; }
	}

	public class OP_CONDITION_ANDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OP_CONDITION_AND");
		private final Keyword cAndKeyword = (Keyword)rule.eContents().get(1);
		
		//OP_CONDITION_AND:
		//	"and";
		@Override public ParserRule getRule() { return rule; }

		//"and"
		public Keyword getAndKeyword() { return cAndKeyword; }
	}

	public class OP_CONDITION_ORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OP_CONDITION_OR");
		private final Keyword cOrKeyword = (Keyword)rule.eContents().get(1);
		
		//OP_CONDITION_OR:
		//	"or";
		@Override public ParserRule getRule() { return rule; }

		//"or"
		public Keyword getOrKeyword() { return cOrKeyword; }
	}

	public class OP_CONDITION_NOTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OP_CONDITION_NOT");
		private final Keyword cNotKeyword = (Keyword)rule.eContents().get(1);
		
		//OP_CONDITION_NOT:
		//	"not";
		@Override public ParserRule getRule() { return rule; }

		//"not"
		public Keyword getNotKeyword() { return cNotKeyword; }
	}
	
	
	public class TextInputTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TextInputType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDEFAULTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDEFAULTDefaultKeyword_0_0 = (Keyword)cDEFAULTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINPUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINPUTInputKeyword_1_0 = (Keyword)cINPUTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTEXTAREAEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTEXTAREATextareaKeyword_2_0 = (Keyword)cTEXTAREAEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPASSWORDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPASSWORDPasswordKeyword_3_0 = (Keyword)cPASSWORDEnumLiteralDeclaration_3.eContents().get(0);
		
		/// *
		// * This enumeration contains all possible input types of TextInputs.
		// * / enum TextInputType:
		//	DEFAULT="default" | INPUT="input" | TEXTAREA="textarea" | PASSWORD="password";
		public EnumRule getRule() { return rule; }

		//DEFAULT="default" | INPUT="input" | TEXTAREA="textarea" | PASSWORD="password"
		public Alternatives getAlternatives() { return cAlternatives; }

		//DEFAULT="default"
		public EnumLiteralDeclaration getDEFAULTEnumLiteralDeclaration_0() { return cDEFAULTEnumLiteralDeclaration_0; }

		//"default"
		public Keyword getDEFAULTDefaultKeyword_0_0() { return cDEFAULTDefaultKeyword_0_0; }

		//INPUT="input"
		public EnumLiteralDeclaration getINPUTEnumLiteralDeclaration_1() { return cINPUTEnumLiteralDeclaration_1; }

		//"input"
		public Keyword getINPUTInputKeyword_1_0() { return cINPUTInputKeyword_1_0; }

		//TEXTAREA="textarea"
		public EnumLiteralDeclaration getTEXTAREAEnumLiteralDeclaration_2() { return cTEXTAREAEnumLiteralDeclaration_2; }

		//"textarea"
		public Keyword getTEXTAREATextareaKeyword_2_0() { return cTEXTAREATextareaKeyword_2_0; }

		//PASSWORD="password"
		public EnumLiteralDeclaration getPASSWORDEnumLiteralDeclaration_3() { return cPASSWORDEnumLiteralDeclaration_3; }

		//"password"
		public Keyword getPASSWORDPasswordKeyword_3_0() { return cPASSWORDPasswordKeyword_3_0; }
	}

	public class BooleanInputTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanInputType");
		private final EnumLiteralDeclaration cDEFAULTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cDEFAULTDefaultKeyword_0 = (Keyword)cDEFAULTEnumLiteralDeclaration.eContents().get(0);
		
		/// *
		// * This enumeration contains all possible input types of BooleanInputs.
		// * By now only default is supported as the representation of actual boolean
		// * inputs is highly platform dependent and MD2 seeks not to violate the design
		// * guidelines of the different platforms.
		// * / enum BooleanInputType:
		//	DEFAULT="default";
		public EnumRule getRule() { return rule; }

		//DEFAULT="default"
		public EnumLiteralDeclaration getDEFAULTEnumLiteralDeclaration() { return cDEFAULTEnumLiteralDeclaration; }

		//"default"
		public Keyword getDEFAULTDefaultKeyword_0() { return cDEFAULTDefaultKeyword_0; }
	}

	public class IntegerInputTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerInputType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDEFAULTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDEFAULTDefaultKeyword_0_0 = (Keyword)cDEFAULTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINPUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINPUTInputKeyword_1_0 = (Keyword)cINPUTEnumLiteralDeclaration_1.eContents().get(0);
		
		/// *
		// * This enumeration contains all possible input types of IntegerInputs.
		// * If default is set, the input is dependent on the platform. It might be
		// * a simple text input that validates that only numbers are entered; a number
		// * spinner etc. A text input can be enforced as it is assumed to be supported
		// * on all platforms.
		// * / enum IntegerInputType:
		//	DEFAULT="default" | INPUT="input";
		public EnumRule getRule() { return rule; }

		//DEFAULT="default" | INPUT="input"
		public Alternatives getAlternatives() { return cAlternatives; }

		//DEFAULT="default"
		public EnumLiteralDeclaration getDEFAULTEnumLiteralDeclaration_0() { return cDEFAULTEnumLiteralDeclaration_0; }

		//"default"
		public Keyword getDEFAULTDefaultKeyword_0_0() { return cDEFAULTDefaultKeyword_0_0; }

		//INPUT="input"
		public EnumLiteralDeclaration getINPUTEnumLiteralDeclaration_1() { return cINPUTEnumLiteralDeclaration_1; }

		//"input"
		public Keyword getINPUTInputKeyword_1_0() { return cINPUTInputKeyword_1_0; }
	}

	public class NumberInputTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "NumberInputType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDEFAULTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDEFAULTDefaultKeyword_0_0 = (Keyword)cDEFAULTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINPUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINPUTInputKeyword_1_0 = (Keyword)cINPUTEnumLiteralDeclaration_1.eContents().get(0);
		
		/// *
		// * This enumeration contains all possible input types of NumberInputs.
		// * If default is set, the input is dependent on the platform. It might be
		// * a simple text input that validates that only numbers are entered. A
		// * text input can be enforced as it is assumed to be supported
		// * on all platforms.
		// * / enum NumberInputType:
		//	DEFAULT="default" | INPUT="input";
		public EnumRule getRule() { return rule; }

		//DEFAULT="default" | INPUT="input"
		public Alternatives getAlternatives() { return cAlternatives; }

		//DEFAULT="default"
		public EnumLiteralDeclaration getDEFAULTEnumLiteralDeclaration_0() { return cDEFAULTEnumLiteralDeclaration_0; }

		//"default"
		public Keyword getDEFAULTDefaultKeyword_0_0() { return cDEFAULTDefaultKeyword_0_0; }

		//INPUT="input"
		public EnumLiteralDeclaration getINPUTEnumLiteralDeclaration_1() { return cINPUTEnumLiteralDeclaration_1; }

		//"input"
		public Keyword getINPUTInputKeyword_1_0() { return cINPUTInputKeyword_1_0; }
	}

	public class DateInputTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DateInputType");
		private final EnumLiteralDeclaration cDEFAULTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cDEFAULTDefaultKeyword_0 = (Keyword)cDEFAULTEnumLiteralDeclaration.eContents().get(0);
		
		/// *
		// * This enumeration contains all possible input types of DateInputs.
		// * By now only default is supported as the representation of actual date
		// * inputs is highly platform dependent and MD2 seeks not to violate the design
		// * guidelines of the different platforms.
		// * / enum DateInputType:
		//	DEFAULT="default";
		public EnumRule getRule() { return rule; }

		//DEFAULT="default"
		public EnumLiteralDeclaration getDEFAULTEnumLiteralDeclaration() { return cDEFAULTEnumLiteralDeclaration; }

		//"default"
		public Keyword getDEFAULTDefaultKeyword_0() { return cDEFAULTDefaultKeyword_0; }
	}

	public class TimeInputTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TimeInputType");
		private final EnumLiteralDeclaration cDEFAULTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cDEFAULTDefaultKeyword_0 = (Keyword)cDEFAULTEnumLiteralDeclaration.eContents().get(0);
		
		/// *
		// * This enumeration contains all possible input types of TimeInputs.
		// * By now only default is supported as the representation of actual time
		// * inputs is highly platform dependent and MD2 seeks not to violate the design
		// * guidelines of the different platforms.
		// * / enum TimeInputType:
		//	DEFAULT="default";
		public EnumRule getRule() { return rule; }

		//DEFAULT="default"
		public EnumLiteralDeclaration getDEFAULTEnumLiteralDeclaration() { return cDEFAULTEnumLiteralDeclaration; }

		//"default"
		public Keyword getDEFAULTDefaultKeyword_0() { return cDEFAULTDefaultKeyword_0; }
	}

	public class DateTimeInputTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DateTimeInputType");
		private final EnumLiteralDeclaration cDEFAULTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cDEFAULTDefaultKeyword_0 = (Keyword)cDEFAULTEnumLiteralDeclaration.eContents().get(0);
		
		/// *
		// * This enumeration contains all possible input types of DateTimeInputs.
		// * By now only default is supported as the representation of actual
		// * input is highly platform dependent and MD2 seeks to not violate the design
		// * guidelines of the different platforms.
		// * / enum DateTimeInputType:
		//	DEFAULT="default";
		public EnumRule getRule() { return rule; }

		//DEFAULT="default"
		public EnumLiteralDeclaration getDEFAULTEnumLiteralDeclaration() { return cDEFAULTEnumLiteralDeclaration; }

		//"default"
		public Keyword getDEFAULTDefaultKeyword_0() { return cDEFAULTDefaultKeyword_0; }
	}

	public class OptionInputTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OptionInputType");
		private final EnumLiteralDeclaration cDEFAULTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cDEFAULTDefaultKeyword_0 = (Keyword)cDEFAULTEnumLiteralDeclaration.eContents().get(0);
		
		/// *
		// * Possible option input types.
		// * / enum OptionInputType:
		//	DEFAULT="default";
		public EnumRule getRule() { return rule; }

		//DEFAULT="default"
		public EnumLiteralDeclaration getDEFAULTEnumLiteralDeclaration() { return cDEFAULTEnumLiteralDeclaration; }

		//"default"
		public Keyword getDEFAULTDefaultKeyword_0() { return cDEFAULTDefaultKeyword_0; }
	}

	public class FlowDirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FlowDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHORIZONTALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHORIZONTALHorizontalKeyword_0_0 = (Keyword)cHORIZONTALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVERTICALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVERTICALVerticalKeyword_1_0 = (Keyword)cVERTICALEnumLiteralDeclaration_1.eContents().get(0);
		
		/// *
		// * The FlowDirection lists all possible orientations that can be used
		// * to define the flow of elements contained in a FlowLayoutPane
		// * / enum FlowDirection:
		//	HORIZONTAL="horizontal" | VERTICAL="vertical";
		public EnumRule getRule() { return rule; }

		//HORIZONTAL="horizontal" | VERTICAL="vertical"
		public Alternatives getAlternatives() { return cAlternatives; }

		//HORIZONTAL="horizontal"
		public EnumLiteralDeclaration getHORIZONTALEnumLiteralDeclaration_0() { return cHORIZONTALEnumLiteralDeclaration_0; }

		//"horizontal"
		public Keyword getHORIZONTALHorizontalKeyword_0_0() { return cHORIZONTALHorizontalKeyword_0_0; }

		//VERTICAL="vertical"
		public EnumLiteralDeclaration getVERTICALEnumLiteralDeclaration_1() { return cVERTICALEnumLiteralDeclaration_1; }

		//"vertical"
		public Keyword getVERTICALVerticalKeyword_1_0() { return cVERTICALVerticalKeyword_1_0; }
	}

	public class NamedColorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "NamedColor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAQUAEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAQUAAquaKeyword_0_0 = (Keyword)cAQUAEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBLACKEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBLACKBlackKeyword_1_0 = (Keyword)cBLACKEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBLUEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBLUEBlueKeyword_2_0 = (Keyword)cBLUEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFUCHSIAEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFUCHSIAFuchsiaKeyword_3_0 = (Keyword)cFUCHSIAEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGRAYEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGRAYGrayKeyword_4_0 = (Keyword)cGRAYEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGREENEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGREENGreenKeyword_5_0 = (Keyword)cGREENEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLIMEEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLIMELimeKeyword_6_0 = (Keyword)cLIMEEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cMAROONEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cMAROONMaroonKeyword_7_0 = (Keyword)cMAROONEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cNAVYEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cNAVYNavyKeyword_8_0 = (Keyword)cNAVYEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cOLIVEEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cOLIVEOliveKeyword_9_0 = (Keyword)cOLIVEEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cPURPLEEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cPURPLEPurpleKeyword_10_0 = (Keyword)cPURPLEEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cREDEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cREDRedKeyword_11_0 = (Keyword)cREDEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cSILVEREnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cSILVERSilverKeyword_12_0 = (Keyword)cSILVEREnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cTEALEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cTEALTealKeyword_13_0 = (Keyword)cTEALEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cWHITEEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cWHITEWhiteKeyword_14_0 = (Keyword)cWHITEEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cYELLOWEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cYELLOWYellowKeyword_15_0 = (Keyword)cYELLOWEnumLiteralDeclaration_15.eContents().get(0);
		
		/// **
		// * NamedColor contains the set of the 16 named web colors as specified in HTML 4.01.
		// * / enum NamedColor:
		//	AQUA="aqua" | BLACK="black" | BLUE="blue" | FUCHSIA="fuchsia" | GRAY="gray" | GREEN="green" | LIME="lime" |
		//	MAROON="maroon" | NAVY="navy" | OLIVE="olive" | PURPLE="purple" | RED="red" | SILVER="silver" | TEAL="teal" |
		//	WHITE="white" | YELLOW="yellow";
		public EnumRule getRule() { return rule; }

		//AQUA="aqua" | BLACK="black" | BLUE="blue" | FUCHSIA="fuchsia" | GRAY="gray" | GREEN="green" | LIME="lime" |
		//MAROON="maroon" | NAVY="navy" | OLIVE="olive" | PURPLE="purple" | RED="red" | SILVER="silver" | TEAL="teal" |
		//WHITE="white" | YELLOW="yellow"
		public Alternatives getAlternatives() { return cAlternatives; }

		//AQUA="aqua"
		public EnumLiteralDeclaration getAQUAEnumLiteralDeclaration_0() { return cAQUAEnumLiteralDeclaration_0; }

		//"aqua"
		public Keyword getAQUAAquaKeyword_0_0() { return cAQUAAquaKeyword_0_0; }

		//BLACK="black"
		public EnumLiteralDeclaration getBLACKEnumLiteralDeclaration_1() { return cBLACKEnumLiteralDeclaration_1; }

		//"black"
		public Keyword getBLACKBlackKeyword_1_0() { return cBLACKBlackKeyword_1_0; }

		//BLUE="blue"
		public EnumLiteralDeclaration getBLUEEnumLiteralDeclaration_2() { return cBLUEEnumLiteralDeclaration_2; }

		//"blue"
		public Keyword getBLUEBlueKeyword_2_0() { return cBLUEBlueKeyword_2_0; }

		//FUCHSIA="fuchsia"
		public EnumLiteralDeclaration getFUCHSIAEnumLiteralDeclaration_3() { return cFUCHSIAEnumLiteralDeclaration_3; }

		//"fuchsia"
		public Keyword getFUCHSIAFuchsiaKeyword_3_0() { return cFUCHSIAFuchsiaKeyword_3_0; }

		//GRAY="gray"
		public EnumLiteralDeclaration getGRAYEnumLiteralDeclaration_4() { return cGRAYEnumLiteralDeclaration_4; }

		//"gray"
		public Keyword getGRAYGrayKeyword_4_0() { return cGRAYGrayKeyword_4_0; }

		//GREEN="green"
		public EnumLiteralDeclaration getGREENEnumLiteralDeclaration_5() { return cGREENEnumLiteralDeclaration_5; }

		//"green"
		public Keyword getGREENGreenKeyword_5_0() { return cGREENGreenKeyword_5_0; }

		//LIME="lime"
		public EnumLiteralDeclaration getLIMEEnumLiteralDeclaration_6() { return cLIMEEnumLiteralDeclaration_6; }

		//"lime"
		public Keyword getLIMELimeKeyword_6_0() { return cLIMELimeKeyword_6_0; }

		//MAROON="maroon"
		public EnumLiteralDeclaration getMAROONEnumLiteralDeclaration_7() { return cMAROONEnumLiteralDeclaration_7; }

		//"maroon"
		public Keyword getMAROONMaroonKeyword_7_0() { return cMAROONMaroonKeyword_7_0; }

		//NAVY="navy"
		public EnumLiteralDeclaration getNAVYEnumLiteralDeclaration_8() { return cNAVYEnumLiteralDeclaration_8; }

		//"navy"
		public Keyword getNAVYNavyKeyword_8_0() { return cNAVYNavyKeyword_8_0; }

		//OLIVE="olive"
		public EnumLiteralDeclaration getOLIVEEnumLiteralDeclaration_9() { return cOLIVEEnumLiteralDeclaration_9; }

		//"olive"
		public Keyword getOLIVEOliveKeyword_9_0() { return cOLIVEOliveKeyword_9_0; }

		//PURPLE="purple"
		public EnumLiteralDeclaration getPURPLEEnumLiteralDeclaration_10() { return cPURPLEEnumLiteralDeclaration_10; }

		//"purple"
		public Keyword getPURPLEPurpleKeyword_10_0() { return cPURPLEPurpleKeyword_10_0; }

		//RED="red"
		public EnumLiteralDeclaration getREDEnumLiteralDeclaration_11() { return cREDEnumLiteralDeclaration_11; }

		//"red"
		public Keyword getREDRedKeyword_11_0() { return cREDRedKeyword_11_0; }

		//SILVER="silver"
		public EnumLiteralDeclaration getSILVEREnumLiteralDeclaration_12() { return cSILVEREnumLiteralDeclaration_12; }

		//"silver"
		public Keyword getSILVERSilverKeyword_12_0() { return cSILVERSilverKeyword_12_0; }

		//TEAL="teal"
		public EnumLiteralDeclaration getTEALEnumLiteralDeclaration_13() { return cTEALEnumLiteralDeclaration_13; }

		//"teal"
		public Keyword getTEALTealKeyword_13_0() { return cTEALTealKeyword_13_0; }

		//WHITE="white"
		public EnumLiteralDeclaration getWHITEEnumLiteralDeclaration_14() { return cWHITEEnumLiteralDeclaration_14; }

		//"white"
		public Keyword getWHITEWhiteKeyword_14_0() { return cWHITEWhiteKeyword_14_0; }

		//YELLOW="yellow"
		public EnumLiteralDeclaration getYELLOWEnumLiteralDeclaration_15() { return cYELLOWEnumLiteralDeclaration_15; }

		//"yellow"
		public Keyword getYELLOWYellowKeyword_15_0() { return cYELLOWYellowKeyword_15_0; }
	}

	public class ElementEventTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ElementEventType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cON_CLICKEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cON_CLICKOnClickKeyword_0_0 = (Keyword)cON_CLICKEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cON_CHANGEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cON_CHANGEOnChangeKeyword_1_0 = (Keyword)cON_CHANGEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cON_LEFT_SWIPEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cON_LEFT_SWIPEOnLeftSwipeKeyword_2_0 = (Keyword)cON_LEFT_SWIPEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cON_RIGHT_SWIPEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cON_RIGHT_SWIPEOnRightSwipeKeyword_3_0 = (Keyword)cON_RIGHT_SWIPEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cON_WRONG_VALIDATIONEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cON_WRONG_VALIDATIONOnWrongValidationKeyword_4_0 = (Keyword)cON_WRONG_VALIDATIONEnumLiteralDeclaration_4.eContents().get(0);
		
		/// *
		// * ElementEventType lists all possible events that are supported by ViewGUIElements.
		// * / enum ElementEventType:
		//	ON_CLICK="onClick" | ON_CHANGE="onChange" | ON_LEFT_SWIPE="onLeftSwipe" | ON_RIGHT_SWIPE="onRightSwipe" |
		//	ON_WRONG_VALIDATION="onWrongValidation";
		public EnumRule getRule() { return rule; }

		//ON_CLICK="onClick" | ON_CHANGE="onChange" | ON_LEFT_SWIPE="onLeftSwipe" | ON_RIGHT_SWIPE="onRightSwipe" |
		//ON_WRONG_VALIDATION="onWrongValidation"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ON_CLICK="onClick"
		public EnumLiteralDeclaration getON_CLICKEnumLiteralDeclaration_0() { return cON_CLICKEnumLiteralDeclaration_0; }

		//"onClick"
		public Keyword getON_CLICKOnClickKeyword_0_0() { return cON_CLICKOnClickKeyword_0_0; }

		//ON_CHANGE="onChange"
		public EnumLiteralDeclaration getON_CHANGEEnumLiteralDeclaration_1() { return cON_CHANGEEnumLiteralDeclaration_1; }

		//"onChange"
		public Keyword getON_CHANGEOnChangeKeyword_1_0() { return cON_CHANGEOnChangeKeyword_1_0; }

		//ON_LEFT_SWIPE="onLeftSwipe"
		public EnumLiteralDeclaration getON_LEFT_SWIPEEnumLiteralDeclaration_2() { return cON_LEFT_SWIPEEnumLiteralDeclaration_2; }

		//"onLeftSwipe"
		public Keyword getON_LEFT_SWIPEOnLeftSwipeKeyword_2_0() { return cON_LEFT_SWIPEOnLeftSwipeKeyword_2_0; }

		//ON_RIGHT_SWIPE="onRightSwipe"
		public EnumLiteralDeclaration getON_RIGHT_SWIPEEnumLiteralDeclaration_3() { return cON_RIGHT_SWIPEEnumLiteralDeclaration_3; }

		//"onRightSwipe"
		public Keyword getON_RIGHT_SWIPEOnRightSwipeKeyword_3_0() { return cON_RIGHT_SWIPEOnRightSwipeKeyword_3_0; }

		//ON_WRONG_VALIDATION="onWrongValidation"
		public EnumLiteralDeclaration getON_WRONG_VALIDATIONEnumLiteralDeclaration_4() { return cON_WRONG_VALIDATIONEnumLiteralDeclaration_4; }

		//"onWrongValidation"
		public Keyword getON_WRONG_VALIDATIONOnWrongValidationKeyword_4_0() { return cON_WRONG_VALIDATIONOnWrongValidationKeyword_4_0; }
	}

	public class ContentProviderEventTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ContentProviderEventType");
		private final EnumLiteralDeclaration cON_CHANGEEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cON_CHANGEOnChangeKeyword_0 = (Keyword)cON_CHANGEEnumLiteralDeclaration.eContents().get(0);
		
		/// *
		// * ContentProviderEventType lists all possible
		// * events supported by ContentProviders
		// * / enum ContentProviderEventType:
		//	ON_CHANGE="onChange";
		public EnumRule getRule() { return rule; }

		//ON_CHANGE="onChange"
		public EnumLiteralDeclaration getON_CHANGEEnumLiteralDeclaration() { return cON_CHANGEEnumLiteralDeclaration; }

		//"onChange"
		public Keyword getON_CHANGEOnChangeKeyword_0() { return cON_CHANGEOnChangeKeyword_0; }
	}

	public class GlobalEventTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalEventType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cON_CONNECTION_LOSTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cON_CONNECTION_LOSTOnConnectionLostKeyword_0_0 = (Keyword)cON_CONNECTION_LOSTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cON_CONNECTION_REGAINEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cON_CONNECTION_REGAINEDOnConnectionRegainedKeyword_1_0 = (Keyword)cON_CONNECTION_REGAINEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cON_LOCATION_UPDATEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cON_LOCATION_UPDATEOnLocationUpdateKeyword_2_0 = (Keyword)cON_LOCATION_UPDATEEnumLiteralDeclaration_2.eContents().get(0);
		
		/// *
		// * GlobalEventType lists all possible app wide events.
		// * / enum GlobalEventType:
		//	ON_CONNECTION_LOST="onConnectionLost" | ON_CONNECTION_REGAINED="onConnectionRegained" |
		//	ON_LOCATION_UPDATE="onLocationUpdate";
		public EnumRule getRule() { return rule; }

		//ON_CONNECTION_LOST="onConnectionLost" | ON_CONNECTION_REGAINED="onConnectionRegained" |
		//ON_LOCATION_UPDATE="onLocationUpdate"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ON_CONNECTION_LOST="onConnectionLost"
		public EnumLiteralDeclaration getON_CONNECTION_LOSTEnumLiteralDeclaration_0() { return cON_CONNECTION_LOSTEnumLiteralDeclaration_0; }

		//"onConnectionLost"
		public Keyword getON_CONNECTION_LOSTOnConnectionLostKeyword_0_0() { return cON_CONNECTION_LOSTOnConnectionLostKeyword_0_0; }

		//ON_CONNECTION_REGAINED="onConnectionRegained"
		public EnumLiteralDeclaration getON_CONNECTION_REGAINEDEnumLiteralDeclaration_1() { return cON_CONNECTION_REGAINEDEnumLiteralDeclaration_1; }

		//"onConnectionRegained"
		public Keyword getON_CONNECTION_REGAINEDOnConnectionRegainedKeyword_1_0() { return cON_CONNECTION_REGAINEDOnConnectionRegainedKeyword_1_0; }

		//ON_LOCATION_UPDATE="onLocationUpdate"
		public EnumLiteralDeclaration getON_LOCATION_UPDATEEnumLiteralDeclaration_2() { return cON_LOCATION_UPDATEEnumLiteralDeclaration_2; }

		//"onLocationUpdate"
		public Keyword getON_LOCATION_UPDATEOnLocationUpdateKeyword_2_0() { return cON_LOCATION_UPDATEOnLocationUpdateKeyword_2_0; }
	}

	public class SimpleDataTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleDataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINTEGEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINTEGERIntegerKeyword_0_0 = (Keyword)cINTEGEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFLOATFloatKeyword_1_0 = (Keyword)cFLOATEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSTRINGStringKeyword_2_0 = (Keyword)cSTRINGEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBOOLEANBooleanKeyword_3_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDATEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDATEDateKeyword_4_0 = (Keyword)cDATEEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cTIMEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cTIMETimeKeyword_5_0 = (Keyword)cTIMEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDATE_TIMEEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDATE_TIMEDatetimeKeyword_6_0 = (Keyword)cDATE_TIMEEnumLiteralDeclaration_6.eContents().get(0);
		
		/// *
		// * SimpleDataType lists all possible SimpleDataTypes.
		// * / enum SimpleDataType:
		//	INTEGER="integer" | FLOAT="float" | STRING="string" | BOOLEAN="boolean" | DATE="date" | TIME="time" |
		//	DATE_TIME="datetime";
		public EnumRule getRule() { return rule; }

		//INTEGER="integer" | FLOAT="float" | STRING="string" | BOOLEAN="boolean" | DATE="date" | TIME="time" |
		//DATE_TIME="datetime"
		public Alternatives getAlternatives() { return cAlternatives; }

		//INTEGER="integer"
		public EnumLiteralDeclaration getINTEGEREnumLiteralDeclaration_0() { return cINTEGEREnumLiteralDeclaration_0; }

		//"integer"
		public Keyword getINTEGERIntegerKeyword_0_0() { return cINTEGERIntegerKeyword_0_0; }

		//FLOAT="float"
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_1() { return cFLOATEnumLiteralDeclaration_1; }

		//"float"
		public Keyword getFLOATFloatKeyword_1_0() { return cFLOATFloatKeyword_1_0; }

		//STRING="string"
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_2() { return cSTRINGEnumLiteralDeclaration_2; }

		//"string"
		public Keyword getSTRINGStringKeyword_2_0() { return cSTRINGStringKeyword_2_0; }

		//BOOLEAN="boolean"
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_3() { return cBOOLEANEnumLiteralDeclaration_3; }

		//"boolean"
		public Keyword getBOOLEANBooleanKeyword_3_0() { return cBOOLEANBooleanKeyword_3_0; }

		//DATE="date"
		public EnumLiteralDeclaration getDATEEnumLiteralDeclaration_4() { return cDATEEnumLiteralDeclaration_4; }

		//"date"
		public Keyword getDATEDateKeyword_4_0() { return cDATEDateKeyword_4_0; }

		//TIME="time"
		public EnumLiteralDeclaration getTIMEEnumLiteralDeclaration_5() { return cTIMEEnumLiteralDeclaration_5; }

		//"time"
		public Keyword getTIMETimeKeyword_5_0() { return cTIMETimeKeyword_5_0; }

		//DATE_TIME="datetime"
		public EnumLiteralDeclaration getDATE_TIMEEnumLiteralDeclaration_6() { return cDATE_TIMEEnumLiteralDeclaration_6; }

		//"datetime"
		public Keyword getDATE_TIMEDatetimeKeyword_6_0() { return cDATE_TIMEDatetimeKeyword_6_0; }
	}

	public class AllowedOperationElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AllowedOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCREATE_OR_UPDATEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCREATE_OR_UPDATESaveKeyword_0_0 = (Keyword)cCREATE_OR_UPDATEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cREADEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cREADLoadKeyword_1_0 = (Keyword)cREADEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDELETEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDELETERemoveKeyword_2_0 = (Keyword)cDELETEEnumLiteralDeclaration_2.eContents().get(0);
		
		/// *
		// * AllowedOperation lists all possible AllowedOperations.
		// * / enum AllowedOperation:
		//	CREATE_OR_UPDATE="save" | READ="load" | DELETE="remove";
		public EnumRule getRule() { return rule; }

		//CREATE_OR_UPDATE="save" | READ="load" | DELETE="remove"
		public Alternatives getAlternatives() { return cAlternatives; }

		//CREATE_OR_UPDATE="save"
		public EnumLiteralDeclaration getCREATE_OR_UPDATEEnumLiteralDeclaration_0() { return cCREATE_OR_UPDATEEnumLiteralDeclaration_0; }

		//"save"
		public Keyword getCREATE_OR_UPDATESaveKeyword_0_0() { return cCREATE_OR_UPDATESaveKeyword_0_0; }

		//READ="load"
		public EnumLiteralDeclaration getREADEnumLiteralDeclaration_1() { return cREADEnumLiteralDeclaration_1; }

		//"load"
		public Keyword getREADLoadKeyword_1_0() { return cREADLoadKeyword_1_0; }

		//DELETE="remove"
		public EnumLiteralDeclaration getDELETEEnumLiteralDeclaration_2() { return cDELETEEnumLiteralDeclaration_2; }

		//"remove"
		public Keyword getDELETERemoveKeyword_2_0() { return cDELETERemoveKeyword_2_0; }
	}

	public class FilterTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FilterType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cALLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cALLAllKeyword_0_0 = (Keyword)cALLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFIRSTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFIRSTFirstKeyword_1_0 = (Keyword)cFIRSTEnumLiteralDeclaration_1.eContents().get(0);
		
		/// *
		// * The FilterType lists all possible types of filters.
		// * / enum FilterType:
		//	ALL="all" | FIRST="first";
		public EnumRule getRule() { return rule; }

		//ALL="all" | FIRST="first"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ALL="all"
		public EnumLiteralDeclaration getALLEnumLiteralDeclaration_0() { return cALLEnumLiteralDeclaration_0; }

		//"all"
		public Keyword getALLAllKeyword_0_0() { return cALLAllKeyword_0_0; }

		//FIRST="first"
		public EnumLiteralDeclaration getFIRSTEnumLiteralDeclaration_1() { return cFIRSTEnumLiteralDeclaration_1; }

		//"first"
		public Keyword getFIRSTFirstKeyword_1_0() { return cFIRSTFirstKeyword_1_0; }
	}

	public class LocationFieldElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "LocationField");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLATITUDEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLATITUDELatitudeKeyword_0_0 = (Keyword)cLATITUDEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLONGITUDEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLONGITUDELongitudeKeyword_1_0 = (Keyword)cLONGITUDEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cALTITUDEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cALTITUDEAltitudeKeyword_2_0 = (Keyword)cALTITUDEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCITYEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCITYCityKeyword_3_0 = (Keyword)cCITYEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSTREETEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSTREETStreetKeyword_4_0 = (Keyword)cSTREETEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNUMBEREnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNUMBERNumberKeyword_5_0 = (Keyword)cNUMBEREnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cPOSTAL_CODEEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cPOSTAL_CODEPostalCodeKeyword_6_0 = (Keyword)cPOSTAL_CODEEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cCOUNTRYEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cCOUNTRYCountryKeyword_7_0 = (Keyword)cCOUNTRYEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cPROVINCEEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cPROVINCEProvinceKeyword_8_0 = (Keyword)cPROVINCEEnumLiteralDeclaration_8.eContents().get(0);
		
		/// *
		// * The LocationField lists all possible parts of a map/GPS position that are supported.
		// * / enum LocationField:
		//	LATITUDE="latitude" | LONGITUDE="longitude" | ALTITUDE="altitude" | CITY="city" | STREET="street" | NUMBER="number" |
		//	POSTAL_CODE="postalCode" | COUNTRY="country" | PROVINCE="province";
		public EnumRule getRule() { return rule; }

		//LATITUDE="latitude" | LONGITUDE="longitude" | ALTITUDE="altitude" | CITY="city" | STREET="street" | NUMBER="number" |
		//POSTAL_CODE="postalCode" | COUNTRY="country" | PROVINCE="province"
		public Alternatives getAlternatives() { return cAlternatives; }

		//LATITUDE="latitude"
		public EnumLiteralDeclaration getLATITUDEEnumLiteralDeclaration_0() { return cLATITUDEEnumLiteralDeclaration_0; }

		//"latitude"
		public Keyword getLATITUDELatitudeKeyword_0_0() { return cLATITUDELatitudeKeyword_0_0; }

		//LONGITUDE="longitude"
		public EnumLiteralDeclaration getLONGITUDEEnumLiteralDeclaration_1() { return cLONGITUDEEnumLiteralDeclaration_1; }

		//"longitude"
		public Keyword getLONGITUDELongitudeKeyword_1_0() { return cLONGITUDELongitudeKeyword_1_0; }

		//ALTITUDE="altitude"
		public EnumLiteralDeclaration getALTITUDEEnumLiteralDeclaration_2() { return cALTITUDEEnumLiteralDeclaration_2; }

		//"altitude"
		public Keyword getALTITUDEAltitudeKeyword_2_0() { return cALTITUDEAltitudeKeyword_2_0; }

		//CITY="city"
		public EnumLiteralDeclaration getCITYEnumLiteralDeclaration_3() { return cCITYEnumLiteralDeclaration_3; }

		//"city"
		public Keyword getCITYCityKeyword_3_0() { return cCITYCityKeyword_3_0; }

		//STREET="street"
		public EnumLiteralDeclaration getSTREETEnumLiteralDeclaration_4() { return cSTREETEnumLiteralDeclaration_4; }

		//"street"
		public Keyword getSTREETStreetKeyword_4_0() { return cSTREETStreetKeyword_4_0; }

		//NUMBER="number"
		public EnumLiteralDeclaration getNUMBEREnumLiteralDeclaration_5() { return cNUMBEREnumLiteralDeclaration_5; }

		//"number"
		public Keyword getNUMBERNumberKeyword_5_0() { return cNUMBERNumberKeyword_5_0; }

		//POSTAL_CODE="postalCode"
		public EnumLiteralDeclaration getPOSTAL_CODEEnumLiteralDeclaration_6() { return cPOSTAL_CODEEnumLiteralDeclaration_6; }

		//"postalCode"
		public Keyword getPOSTAL_CODEPostalCodeKeyword_6_0() { return cPOSTAL_CODEPostalCodeKeyword_6_0; }

		//COUNTRY="country"
		public EnumLiteralDeclaration getCOUNTRYEnumLiteralDeclaration_7() { return cCOUNTRYEnumLiteralDeclaration_7; }

		//"country"
		public Keyword getCOUNTRYCountryKeyword_7_0() { return cCOUNTRYCountryKeyword_7_0; }

		//PROVINCE="province"
		public EnumLiteralDeclaration getPROVINCEEnumLiteralDeclaration_8() { return cPROVINCEEnumLiteralDeclaration_8; }

		//"province"
		public Keyword getPROVINCEProvinceKeyword_8_0() { return cPROVINCEProvinceKeyword_8_0; }
	}

	public class ViewElementStateElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ViewElementState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVALIDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVALIDValidKeyword_0_0 = (Keyword)cVALIDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEMPTYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEMPTYEmptyKeyword_1_0 = (Keyword)cEMPTYEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSETEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSETSetKeyword_2_0 = (Keyword)cSETEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDEFAULT_VALUEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDEFAULT_VALUEDefaultValueKeyword_3_0 = (Keyword)cDEFAULT_VALUEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDISABLEDEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDISABLEDDisabledKeyword_4_0 = (Keyword)cDISABLEDEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cENABLEDEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cENABLEDEnabledKeyword_5_0 = (Keyword)cENABLEDEnumLiteralDeclaration_5.eContents().get(0);
		
		/// *
		// * ViewElementState lists all possible ViewElementStates.
		// * / enum ViewElementState:
		//	VALID="valid" | EMPTY="empty" | SET="set" | DEFAULT_VALUE="defaultValue" | DISABLED="disabled" | ENABLED="enabled";
		public EnumRule getRule() { return rule; }

		//VALID="valid" | EMPTY="empty" | SET="set" | DEFAULT_VALUE="defaultValue" | DISABLED="disabled" | ENABLED="enabled"
		public Alternatives getAlternatives() { return cAlternatives; }

		//VALID="valid"
		public EnumLiteralDeclaration getVALIDEnumLiteralDeclaration_0() { return cVALIDEnumLiteralDeclaration_0; }

		//"valid"
		public Keyword getVALIDValidKeyword_0_0() { return cVALIDValidKeyword_0_0; }

		//EMPTY="empty"
		public EnumLiteralDeclaration getEMPTYEnumLiteralDeclaration_1() { return cEMPTYEnumLiteralDeclaration_1; }

		//"empty"
		public Keyword getEMPTYEmptyKeyword_1_0() { return cEMPTYEmptyKeyword_1_0; }

		//SET="set"
		public EnumLiteralDeclaration getSETEnumLiteralDeclaration_2() { return cSETEnumLiteralDeclaration_2; }

		//"set"
		public Keyword getSETSetKeyword_2_0() { return cSETSetKeyword_2_0; }

		//DEFAULT_VALUE="defaultValue"
		public EnumLiteralDeclaration getDEFAULT_VALUEEnumLiteralDeclaration_3() { return cDEFAULT_VALUEEnumLiteralDeclaration_3; }

		//"defaultValue"
		public Keyword getDEFAULT_VALUEDefaultValueKeyword_3_0() { return cDEFAULT_VALUEDefaultValueKeyword_3_0; }

		//DISABLED="disabled"
		public EnumLiteralDeclaration getDISABLEDEnumLiteralDeclaration_4() { return cDISABLEDEnumLiteralDeclaration_4; }

		//"disabled"
		public Keyword getDISABLEDDisabledKeyword_4_0() { return cDISABLEDDisabledKeyword_4_0; }

		//ENABLED="enabled"
		public EnumLiteralDeclaration getENABLEDEnumLiteralDeclaration_5() { return cENABLEDEnumLiteralDeclaration_5; }

		//"enabled"
		public Keyword getENABLEDEnabledKeyword_5_0() { return cENABLEDEnabledKeyword_5_0; }
	}

	public class RESTMethodElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RESTMethod");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPOSTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPOSTPOSTKeyword_0_0 = (Keyword)cPOSTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGETEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGETGETKeyword_1_0 = (Keyword)cGETEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPUTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPUTPUTKeyword_2_0 = (Keyword)cPUTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDELETEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDELETEDELETEKeyword_3_0 = (Keyword)cDELETEEnumLiteralDeclaration_3.eContents().get(0);
		
		//// POST as default for InvokeDefinition
		//enum RESTMethod:
		//	POST | GET | PUT | DELETE;
		public EnumRule getRule() { return rule; }

		//POST | GET | PUT | DELETE
		public Alternatives getAlternatives() { return cAlternatives; }

		//POST
		public EnumLiteralDeclaration getPOSTEnumLiteralDeclaration_0() { return cPOSTEnumLiteralDeclaration_0; }

		//"POST"
		public Keyword getPOSTPOSTKeyword_0_0() { return cPOSTPOSTKeyword_0_0; }

		//GET
		public EnumLiteralDeclaration getGETEnumLiteralDeclaration_1() { return cGETEnumLiteralDeclaration_1; }

		//"GET"
		public Keyword getGETGETKeyword_1_0() { return cGETGETKeyword_1_0; }

		//PUT
		public EnumLiteralDeclaration getPUTEnumLiteralDeclaration_2() { return cPUTEnumLiteralDeclaration_2; }

		//"PUT"
		public Keyword getPUTPUTKeyword_2_0() { return cPUTPUTKeyword_2_0; }

		//DELETE
		public EnumLiteralDeclaration getDELETEEnumLiteralDeclaration_3() { return cDELETEEnumLiteralDeclaration_3; }

		//"DELETE"
		public Keyword getDELETEDELETEKeyword_3_0() { return cDELETEDELETEKeyword_3_0; }
	}

	public class OperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALSEqualsKeyword_0_0 = (Keyword)cEQUALSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGREATERGreaterThanSignKeyword_1_0 = (Keyword)cGREATEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSMALLEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSMALLERLessThanSignKeyword_2_0 = (Keyword)cSMALLEREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_OR_EQUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGREATER_OR_EQUALGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGREATER_OR_EQUALEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSMALLER_OR_EQUALEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSMALLER_OR_EQUALLessThanSignEqualsSignKeyword_4_0 = (Keyword)cSMALLER_OR_EQUALEnumLiteralDeclaration_4.eContents().get(0);
		
		/// *
		// * Define all operators that can be used to compare values in conditional expressions.
		// * / enum Operator:
		//	EQUALS="equals" | GREATER=">" | SMALLER="<" | GREATER_OR_EQUAL=">=" | SMALLER_OR_EQUAL="<=";
		public EnumRule getRule() { return rule; }

		//EQUALS="equals" | GREATER=">" | SMALLER="<" | GREATER_OR_EQUAL=">=" | SMALLER_OR_EQUAL="<="
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQUALS="equals"
		public EnumLiteralDeclaration getEQUALSEnumLiteralDeclaration_0() { return cEQUALSEnumLiteralDeclaration_0; }

		//"equals"
		public Keyword getEQUALSEqualsKeyword_0_0() { return cEQUALSEqualsKeyword_0_0; }

		//GREATER=">"
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_1() { return cGREATEREnumLiteralDeclaration_1; }

		//">"
		public Keyword getGREATERGreaterThanSignKeyword_1_0() { return cGREATERGreaterThanSignKeyword_1_0; }

		//SMALLER="<"
		public EnumLiteralDeclaration getSMALLEREnumLiteralDeclaration_2() { return cSMALLEREnumLiteralDeclaration_2; }

		//"<"
		public Keyword getSMALLERLessThanSignKeyword_2_0() { return cSMALLERLessThanSignKeyword_2_0; }

		//GREATER_OR_EQUAL=">="
		public EnumLiteralDeclaration getGREATER_OR_EQUALEnumLiteralDeclaration_3() { return cGREATER_OR_EQUALEnumLiteralDeclaration_3; }

		//">="
		public Keyword getGREATER_OR_EQUALGreaterThanSignEqualsSignKeyword_3_0() { return cGREATER_OR_EQUALGreaterThanSignEqualsSignKeyword_3_0; }

		//SMALLER_OR_EQUAL="<="
		public EnumLiteralDeclaration getSMALLER_OR_EQUALEnumLiteralDeclaration_4() { return cSMALLER_OR_EQUALEnumLiteralDeclaration_4; }

		//"<="
		public Keyword getSMALLER_OR_EQUALLessThanSignEqualsSignKeyword_4_0() { return cSMALLER_OR_EQUALLessThanSignEqualsSignKeyword_4_0; }
	}

	public class BooleanElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTRUETrueKeyword_0_0 = (Keyword)cTRUEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFALSEFalseKeyword_1_0 = (Keyword)cFALSEEnumLiteralDeclaration_1.eContents().get(0);
		
		/// *
		// * Boolean lists all possible Boolean values.
		// * / enum Boolean:
		//	TRUE="true" | FALSE="false";
		public EnumRule getRule() { return rule; }

		//TRUE="true" | FALSE="false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//TRUE="true"
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration_0() { return cTRUEEnumLiteralDeclaration_0; }

		//"true"
		public Keyword getTRUETrueKeyword_0_0() { return cTRUETrueKeyword_0_0; }

		//FALSE="false"
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_1() { return cFALSEEnumLiteralDeclaration_1; }

		//"false"
		public Keyword getFALSEFalseKeyword_1_0() { return cFALSEFalseKeyword_1_0; }
	}
	
	private final MD2ModelElements pMD2Model;
	private final MD2ModelLayerElements pMD2ModelLayer;
	private final PackageDefinitionElements pPackageDefinition;
	private final ViewElements pView;
	private final ViewElementElements pViewElement;
	private final ViewElementTypeElements pViewElementType;
	private final ViewGUIElementElements pViewGUIElement;
	private final ContentElementElements pContentElement;
	private final InputElementElements pInputElement;
	private final MappableContentElementElements pMappableContentElement;
	private final TextInputElements pTextInput;
	private final TextInputTypeElements unknownRuleTextInputType;
	private final BooleanInputElements pBooleanInput;
	private final BooleanInputTypeElements unknownRuleBooleanInputType;
	private final IntegerInputElements pIntegerInput;
	private final IntegerInputTypeElements unknownRuleIntegerInputType;
	private final NumberInputElements pNumberInput;
	private final NumberInputTypeElements unknownRuleNumberInputType;
	private final DateInputElements pDateInput;
	private final DateInputTypeElements unknownRuleDateInputType;
	private final TimeInputElements pTimeInput;
	private final TimeInputTypeElements unknownRuleTimeInputType;
	private final DateTimeInputElements pDateTimeInput;
	private final DateTimeInputTypeElements unknownRuleDateTimeInputType;
	private final OptionInputElements pOptionInput;
	private final OptionInputTypeElements unknownRuleOptionInputType;
	private final FileUploadElements pFileUpload;
	private final EntitySelectorElements pEntitySelector;
	private final AutoGeneratedContentElementElements pAutoGeneratedContentElement;
	private final ButtonElements pButton;
	private final ButtonShorthandDefinitionElements pButtonShorthandDefinition;
	private final ButtonExtendedDefinitionElements pButtonExtendedDefinition;
	private final TooltipElements pTooltip;
	private final TooltipShorthandDefinitionElements pTooltipShorthandDefinition;
	private final TooltipExtendedDefinitionElements pTooltipExtendedDefinition;
	private final ImageElements pImage;
	private final ImageShorthandDefinitionElements pImageShorthandDefinition;
	private final ImageExtendedDefinitionElements pImageExtendedDefinition;
	private final UploadedImageOutputElements pUploadedImageOutput;
	private final LabelElements pLabel;
	private final LabelShorthandDefinitionElements pLabelShorthandDefinition;
	private final LabelExtendedDefinitionElements pLabelExtendedDefinition;
	private final SpacerElements pSpacer;
	private final ContainerElementElements pContainerElement;
	private final ContentContainerElements pContentContainer;
	private final SubViewContainerElements pSubViewContainer;
	private final GridLayoutPaneElements pGridLayoutPane;
	private final GridLayoutPaneParamElements pGridLayoutPaneParam;
	private final FlowLayoutPaneElements pFlowLayoutPane;
	private final FlowLayoutPaneParamElements pFlowLayoutPaneParam;
	private final FlowDirectionElements unknownRuleFlowDirection;
	private final AlternativesPaneElements pAlternativesPane;
	private final TabbedAlternativesPaneElements pTabbedAlternativesPane;
	private final CommonContainerParamElements pCommonContainerParam;
	private final TabSpecificParamElements pTabSpecificParam;
	private final ViewGUIElementReferenceElements pViewGUIElementReference;
	private final ContainerElementReferenceElements pContainerElementReference;
	private final ContainerElementTypeElements pContainerElementType;
	private final StyleAssignmentElements pStyleAssignment;
	private final StyleElements pStyle;
	private final StyleBodyElements pStyleBody;
	private final ColorElements pColor;
	private final NamedColorElements unknownRuleNamedColor;
	private final ControllerElements pController;
	private final ControllerElementElements pControllerElement;
	private final WorkflowElementElements pWorkflowElement;
	private final ActionElements pAction;
	private final CustomActionElements pCustomAction;
	private final CombinedActionElements pCombinedAction;
	private final SimpleActionElements pSimpleAction;
	private final CustomCodeFragmentElements pCustomCodeFragment;
	private final IfCodeBlockElements pIfCodeBlock;
	private final ElseCodeBlockElements pElseCodeBlock;
	private final ContainsCodeFragmentsElements pContainsCodeFragments;
	private final AbstractViewGUIElementRefElements pAbstractViewGUIElementRef;
	private final NestedAbstractViewGUIElementRefElements pNestedAbstractViewGUIElementRef;
	private final ActionDefElements pActionDef;
	private final EventDefElements pEventDef;
	private final ElementEventTypeElements unknownRuleElementEventType;
	private final ContentProviderEventTypeElements unknownRuleContentProviderEventType;
	private final GlobalEventTypeElements unknownRuleGlobalEventType;
	private final ValidatorTypeElements pValidatorType;
	private final ValidatorElements pValidator;
	private final StandardValidatorElements pStandardValidator;
	private final RemoteValidatorElements pRemoteValidator;
	private final ValidatorParamElements pValidatorParam;
	private final ValidatorMessageParamElements pValidatorMessageParam;
	private final RegExValidatorParamElements pRegExValidatorParam;
	private final NumberRangeValidatorParamElements pNumberRangeValidatorParam;
	private final StringRangeValidatorParamElements pStringRangeValidatorParam;
	private final DateRangeValidatorParamElements pDateRangeValidatorParam;
	private final TimeRangeValidatorParamElements pTimeRangeValidatorParam;
	private final DateTimeRangeValidatorParamElements pDateTimeRangeValidatorParam;
	private final MainElements pMain;
	private final ContentProviderElements pContentProvider;
	private final RemoteConnectionElements pRemoteConnection;
	private final DataTypeElements pDataType;
	private final SimpleDataTypeWrapperElements pSimpleDataTypeWrapper;
	private final SimpleDataTypeElements unknownRuleSimpleDataType;
	private final AllowedOperationElements unknownRuleAllowedOperation;
	private final FilterTypeElements unknownRuleFilterType;
	private final WhereClauseConditionElements pWhereClauseCondition;
	private final WhereClauseOrElements pWhereClauseOr;
	private final WhereClauseAndElements pWhereClauseAnd;
	private final WhereClauseConditionalExpressionElements pWhereClauseConditionalExpression;
	private final AbstractProviderReferenceElements pAbstractProviderReference;
	private final ContentProviderReferenceElements pContentProviderReference;
	private final LocationProviderReferenceElements pLocationProviderReference;
	private final PathDefinitionElements pPathDefinition;
	private final EntityPathElements pEntityPath;
	private final AbstractContentProviderPathElements pAbstractContentProviderPath;
	private final ContentProviderPathElements pContentProviderPath;
	private final PathTailElements pPathTail;
	private final LocationProviderPathElements pLocationProviderPath;
	private final LocationFieldElements unknownRuleLocationField;
	private final ProcessChainElements pProcessChain;
	private final ProcessChainStepElements pProcessChainStep;
	private final ProcessChainGoToDefinitionElements pProcessChainGoToDefinition;
	private final ProcessChainGoToElements pProcessChainGoTo;
	private final ProcessChainGoToSpecElements pProcessChainGoToSpec;
	private final InvokeDefinitionElements pInvokeDefinition;
	private final InvokeParamElements pInvokeParam;
	private final InvokeValueElements pInvokeValue;
	private final OnConditionEventElements pOnConditionEvent;
	private final ConditionElements pCondition;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final ConditionalExpressionElements pConditionalExpression;
	private final ComplexConditionalExpressionElements pComplexConditionalExpression;
	private final ViewElementStateElements unknownRuleViewElementState;
	private final SimpleExpressionElements pSimpleExpression;
	private final WebServiceCallElements pWebServiceCall;
	private final RESTParamElements pRESTParam;
	private final RESTValueElements pRESTValue;
	private final RESTMethodElements unknownRuleRESTMethod;
	private final ConcatenatedStringElements pConcatenatedString;
	private final StringPartialElements pStringPartial;
	private final MathLiteralElements pMathLiteral;
	private final AdditionSubtractionElements pAdditionSubtraction;
	private final MultiplicationDivisionElements pMultiplicationDivision;
	private final MathSubExpressionElements pMathSubExpression;
	private final MathExpressionElements pMathExpression;
	private final ModelElements pModel;
	private final ModelElementElements pModelElement;
	private final EnumElements pEnum;
	private final EnumBodyElements pEnumBody;
	private final EntityElements pEntity;
	private final AttributeElements pAttribute;
	private final AttributeTypeElements pAttributeType;
	private final BRACKETSElements pBRACKETS;
	private final AttributeTypeParamElements pAttributeTypeParam;
	private final ReferencedTypeParamElements pReferencedTypeParam;
	private final IntegerTypeParamElements pIntegerTypeParam;
	private final FloatTypeParamElements pFloatTypeParam;
	private final StringTypeParamElements pStringTypeParam;
	private final BooleanTypeParamElements pBooleanTypeParam;
	private final FileTypeParamElements pFileTypeParam;
	private final DateTypeParamElements pDateTypeParam;
	private final TimeTypeParamElements pTimeTypeParam;
	private final DateTimeTypeParamElements pDateTimeTypeParam;
	private final EnumTypeParamElements pEnumTypeParam;
	private final WorkflowElements pWorkflow;
	private final WorkflowElementEntryElements pWorkflowElementEntry;
	private final FireEventEntryElements pFireEventEntry;
	private final WorkflowEventElements pWorkflowEvent;
	private final AppElements pApp;
	private final WorkflowElementReferenceElements pWorkflowElementReference;
	private final DATEElements pDATE;
	private final TIMEElements pTIME;
	private final DATE_TIMEElements pDATE_TIME;
	private final FLOATElements pFLOAT;
	private final PERCENTElements pPERCENT;
	private final EIDElements pEID;
	private final QUALIFIED_NAMEElements pQUALIFIED_NAME;
	private final TerminalRule tID;
	private final TerminalRule tHEX_COLOR;
	private final TerminalRule tDATE_FORMAT;
	private final TerminalRule tTIME_FORMAT;
	private final TerminalRule tDATE_TIME_FORMAT;
	private final OP_MATH_PLUSElements pOP_MATH_PLUS;
	private final OP_MATH_MINUSElements pOP_MATH_MINUS;
	private final OP_MATH_MULTElements pOP_MATH_MULT;
	private final OP_MATH_DIVElements pOP_MATH_DIV;
	private final OP_STRING_CONCATElements pOP_STRING_CONCAT;
	private final OP_CONDITION_ANDElements pOP_CONDITION_AND;
	private final OP_CONDITION_ORElements pOP_CONDITION_OR;
	private final OP_CONDITION_NOTElements pOP_CONDITION_NOT;
	private final OperatorElements unknownRuleOperator;
	private final BooleanElements unknownRuleBoolean;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MD2GrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMD2Model = new MD2ModelElements();
		this.pMD2ModelLayer = new MD2ModelLayerElements();
		this.pPackageDefinition = new PackageDefinitionElements();
		this.pView = new ViewElements();
		this.pViewElement = new ViewElementElements();
		this.pViewElementType = new ViewElementTypeElements();
		this.pViewGUIElement = new ViewGUIElementElements();
		this.pContentElement = new ContentElementElements();
		this.pInputElement = new InputElementElements();
		this.pMappableContentElement = new MappableContentElementElements();
		this.pTextInput = new TextInputElements();
		this.unknownRuleTextInputType = new TextInputTypeElements();
		this.pBooleanInput = new BooleanInputElements();
		this.unknownRuleBooleanInputType = new BooleanInputTypeElements();
		this.pIntegerInput = new IntegerInputElements();
		this.unknownRuleIntegerInputType = new IntegerInputTypeElements();
		this.pNumberInput = new NumberInputElements();
		this.unknownRuleNumberInputType = new NumberInputTypeElements();
		this.pDateInput = new DateInputElements();
		this.unknownRuleDateInputType = new DateInputTypeElements();
		this.pTimeInput = new TimeInputElements();
		this.unknownRuleTimeInputType = new TimeInputTypeElements();
		this.pDateTimeInput = new DateTimeInputElements();
		this.unknownRuleDateTimeInputType = new DateTimeInputTypeElements();
		this.pOptionInput = new OptionInputElements();
		this.unknownRuleOptionInputType = new OptionInputTypeElements();
		this.pFileUpload = new FileUploadElements();
		this.pEntitySelector = new EntitySelectorElements();
		this.pAutoGeneratedContentElement = new AutoGeneratedContentElementElements();
		this.pButton = new ButtonElements();
		this.pButtonShorthandDefinition = new ButtonShorthandDefinitionElements();
		this.pButtonExtendedDefinition = new ButtonExtendedDefinitionElements();
		this.pTooltip = new TooltipElements();
		this.pTooltipShorthandDefinition = new TooltipShorthandDefinitionElements();
		this.pTooltipExtendedDefinition = new TooltipExtendedDefinitionElements();
		this.pImage = new ImageElements();
		this.pImageShorthandDefinition = new ImageShorthandDefinitionElements();
		this.pImageExtendedDefinition = new ImageExtendedDefinitionElements();
		this.pUploadedImageOutput = new UploadedImageOutputElements();
		this.pLabel = new LabelElements();
		this.pLabelShorthandDefinition = new LabelShorthandDefinitionElements();
		this.pLabelExtendedDefinition = new LabelExtendedDefinitionElements();
		this.pSpacer = new SpacerElements();
		this.pContainerElement = new ContainerElementElements();
		this.pContentContainer = new ContentContainerElements();
		this.pSubViewContainer = new SubViewContainerElements();
		this.pGridLayoutPane = new GridLayoutPaneElements();
		this.pGridLayoutPaneParam = new GridLayoutPaneParamElements();
		this.pFlowLayoutPane = new FlowLayoutPaneElements();
		this.pFlowLayoutPaneParam = new FlowLayoutPaneParamElements();
		this.unknownRuleFlowDirection = new FlowDirectionElements();
		this.pAlternativesPane = new AlternativesPaneElements();
		this.pTabbedAlternativesPane = new TabbedAlternativesPaneElements();
		this.pCommonContainerParam = new CommonContainerParamElements();
		this.pTabSpecificParam = new TabSpecificParamElements();
		this.pViewGUIElementReference = new ViewGUIElementReferenceElements();
		this.pContainerElementReference = new ContainerElementReferenceElements();
		this.pContainerElementType = new ContainerElementTypeElements();
		this.pStyleAssignment = new StyleAssignmentElements();
		this.pStyle = new StyleElements();
		this.pStyleBody = new StyleBodyElements();
		this.pColor = new ColorElements();
		this.unknownRuleNamedColor = new NamedColorElements();
		this.pController = new ControllerElements();
		this.pControllerElement = new ControllerElementElements();
		this.pWorkflowElement = new WorkflowElementElements();
		this.pAction = new ActionElements();
		this.pCustomAction = new CustomActionElements();
		this.pCombinedAction = new CombinedActionElements();
		this.pSimpleAction = new SimpleActionElements();
		this.pCustomCodeFragment = new CustomCodeFragmentElements();
		this.pIfCodeBlock = new IfCodeBlockElements();
		this.pElseCodeBlock = new ElseCodeBlockElements();
		this.pContainsCodeFragments = new ContainsCodeFragmentsElements();
		this.pAbstractViewGUIElementRef = new AbstractViewGUIElementRefElements();
		this.pNestedAbstractViewGUIElementRef = new NestedAbstractViewGUIElementRefElements();
		this.pActionDef = new ActionDefElements();
		this.pEventDef = new EventDefElements();
		this.unknownRuleElementEventType = new ElementEventTypeElements();
		this.unknownRuleContentProviderEventType = new ContentProviderEventTypeElements();
		this.unknownRuleGlobalEventType = new GlobalEventTypeElements();
		this.pValidatorType = new ValidatorTypeElements();
		this.pValidator = new ValidatorElements();
		this.pStandardValidator = new StandardValidatorElements();
		this.pRemoteValidator = new RemoteValidatorElements();
		this.pValidatorParam = new ValidatorParamElements();
		this.pValidatorMessageParam = new ValidatorMessageParamElements();
		this.pRegExValidatorParam = new RegExValidatorParamElements();
		this.pNumberRangeValidatorParam = new NumberRangeValidatorParamElements();
		this.pStringRangeValidatorParam = new StringRangeValidatorParamElements();
		this.pDateRangeValidatorParam = new DateRangeValidatorParamElements();
		this.pTimeRangeValidatorParam = new TimeRangeValidatorParamElements();
		this.pDateTimeRangeValidatorParam = new DateTimeRangeValidatorParamElements();
		this.pMain = new MainElements();
		this.pContentProvider = new ContentProviderElements();
		this.pRemoteConnection = new RemoteConnectionElements();
		this.pDataType = new DataTypeElements();
		this.pSimpleDataTypeWrapper = new SimpleDataTypeWrapperElements();
		this.unknownRuleSimpleDataType = new SimpleDataTypeElements();
		this.unknownRuleAllowedOperation = new AllowedOperationElements();
		this.unknownRuleFilterType = new FilterTypeElements();
		this.pWhereClauseCondition = new WhereClauseConditionElements();
		this.pWhereClauseOr = new WhereClauseOrElements();
		this.pWhereClauseAnd = new WhereClauseAndElements();
		this.pWhereClauseConditionalExpression = new WhereClauseConditionalExpressionElements();
		this.pAbstractProviderReference = new AbstractProviderReferenceElements();
		this.pContentProviderReference = new ContentProviderReferenceElements();
		this.pLocationProviderReference = new LocationProviderReferenceElements();
		this.pPathDefinition = new PathDefinitionElements();
		this.pEntityPath = new EntityPathElements();
		this.pAbstractContentProviderPath = new AbstractContentProviderPathElements();
		this.pContentProviderPath = new ContentProviderPathElements();
		this.pPathTail = new PathTailElements();
		this.pLocationProviderPath = new LocationProviderPathElements();
		this.unknownRuleLocationField = new LocationFieldElements();
		this.pProcessChain = new ProcessChainElements();
		this.pProcessChainStep = new ProcessChainStepElements();
		this.pProcessChainGoToDefinition = new ProcessChainGoToDefinitionElements();
		this.pProcessChainGoTo = new ProcessChainGoToElements();
		this.pProcessChainGoToSpec = new ProcessChainGoToSpecElements();
		this.pInvokeDefinition = new InvokeDefinitionElements();
		this.pInvokeParam = new InvokeParamElements();
		this.pInvokeValue = new InvokeValueElements();
		this.pOnConditionEvent = new OnConditionEventElements();
		this.pCondition = new ConditionElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pConditionalExpression = new ConditionalExpressionElements();
		this.pComplexConditionalExpression = new ComplexConditionalExpressionElements();
		this.unknownRuleViewElementState = new ViewElementStateElements();
		this.pSimpleExpression = new SimpleExpressionElements();
		this.pWebServiceCall = new WebServiceCallElements();
		this.pRESTParam = new RESTParamElements();
		this.pRESTValue = new RESTValueElements();
		this.unknownRuleRESTMethod = new RESTMethodElements();
		this.pConcatenatedString = new ConcatenatedStringElements();
		this.pStringPartial = new StringPartialElements();
		this.pMathLiteral = new MathLiteralElements();
		this.pAdditionSubtraction = new AdditionSubtractionElements();
		this.pMultiplicationDivision = new MultiplicationDivisionElements();
		this.pMathSubExpression = new MathSubExpressionElements();
		this.pMathExpression = new MathExpressionElements();
		this.pModel = new ModelElements();
		this.pModelElement = new ModelElementElements();
		this.pEnum = new EnumElements();
		this.pEnumBody = new EnumBodyElements();
		this.pEntity = new EntityElements();
		this.pAttribute = new AttributeElements();
		this.pAttributeType = new AttributeTypeElements();
		this.pBRACKETS = new BRACKETSElements();
		this.pAttributeTypeParam = new AttributeTypeParamElements();
		this.pReferencedTypeParam = new ReferencedTypeParamElements();
		this.pIntegerTypeParam = new IntegerTypeParamElements();
		this.pFloatTypeParam = new FloatTypeParamElements();
		this.pStringTypeParam = new StringTypeParamElements();
		this.pBooleanTypeParam = new BooleanTypeParamElements();
		this.pFileTypeParam = new FileTypeParamElements();
		this.pDateTypeParam = new DateTypeParamElements();
		this.pTimeTypeParam = new TimeTypeParamElements();
		this.pDateTimeTypeParam = new DateTimeTypeParamElements();
		this.pEnumTypeParam = new EnumTypeParamElements();
		this.pWorkflow = new WorkflowElements();
		this.pWorkflowElementEntry = new WorkflowElementEntryElements();
		this.pFireEventEntry = new FireEventEntryElements();
		this.pWorkflowEvent = new WorkflowEventElements();
		this.pApp = new AppElements();
		this.pWorkflowElementReference = new WorkflowElementReferenceElements();
		this.pDATE = new DATEElements();
		this.pTIME = new TIMEElements();
		this.pDATE_TIME = new DATE_TIMEElements();
		this.pFLOAT = new FLOATElements();
		this.pPERCENT = new PERCENTElements();
		this.pEID = new EIDElements();
		this.pQUALIFIED_NAME = new QUALIFIED_NAMEElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.tHEX_COLOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_COLOR");
		this.tDATE_FORMAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DATE_FORMAT");
		this.tTIME_FORMAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TIME_FORMAT");
		this.tDATE_TIME_FORMAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DATE_TIME_FORMAT");
		this.pOP_MATH_PLUS = new OP_MATH_PLUSElements();
		this.pOP_MATH_MINUS = new OP_MATH_MINUSElements();
		this.pOP_MATH_MULT = new OP_MATH_MULTElements();
		this.pOP_MATH_DIV = new OP_MATH_DIVElements();
		this.pOP_STRING_CONCAT = new OP_STRING_CONCATElements();
		this.pOP_CONDITION_AND = new OP_CONDITION_ANDElements();
		this.pOP_CONDITION_OR = new OP_CONDITION_ORElements();
		this.pOP_CONDITION_NOT = new OP_CONDITION_NOTElements();
		this.unknownRuleOperator = new OperatorElements();
		this.unknownRuleBoolean = new BooleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.wwu.md2.framework.MD2".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///////////////////////////////////////
	///////////////////////////////////////
	//// Initial
	///////////////////////////////////////
	///////////////////////////////////////
	/// *
	// * The MD2Model is the root element of each model.
	// * It contains the package definition and model
	// * layer in the layer specific type.
	// * / MD2Model: // Each model layer has to be stored in a
	//// corresponding package (see constraints)
	//	package=PackageDefinition modelLayer=MD2ModelLayer?;
	public MD2ModelElements getMD2ModelAccess() {
		return pMD2Model;
	}
	
	public ParserRule getMD2ModelRule() {
		return getMD2ModelAccess().getRule();
	}

	/// *
	// * The MD2ModelLayer can be either a View,
	// * a Controller or a Model
	// * / MD2ModelLayer:
	//	View | Controller | Model | Workflow;
	public MD2ModelLayerElements getMD2ModelLayerAccess() {
		return pMD2ModelLayer;
	}
	
	public ParserRule getMD2ModelLayerRule() {
		return getMD2ModelLayerAccess().getRule();
	}

	/// *
	// * The PackageDefinition contains the
	// * package name as fully qualified name.
	// * / PackageDefinition:
	//	"package" pkgName=QUALIFIED_NAME;
	public PackageDefinitionElements getPackageDefinitionAccess() {
		return pPackageDefinition;
	}
	
	public ParserRule getPackageDefinitionRule() {
		return getPackageDefinitionAccess().getRule();
	}

	///////////////////////////////////////
	///////////////////////////////////////
	//// View layer
	///////////////////////////////////////
	///////////////////////////////////////
	/// *
	// * The root View element contains all
	// * ViewElements of this view model.
	// * / View:
	//	viewElements+=ViewElement+;
	public ViewElements getViewAccess() {
		return pView;
	}
	
	public ParserRule getViewRule() {
		return getViewAccess().getRule();
	}

	/// *
	// * A ViewElement can be either a ViewElementType or a style.
	// * Styles can only be specified on view level or directly on ViewGUIElement elements,
	// * but not within containers. This is why ViewElement and ViewElementType are distinguished.
	// * / ViewElement:
	//	ViewElementType | Style;
	public ViewElementElements getViewElementAccess() {
		return pViewElement;
	}
	
	public ParserRule getViewElementRule() {
		return getViewElementAccess().getRule();
	}

	/// *
	// * The ViewElementType allows to either specify a new ViewGUIElement or to refer to an existing one.
	// * All elements of this type are allowed to be used in containers.
	// * / ViewElementType:
	//	ViewGUIElement | ViewGUIElementReference;
	public ViewElementTypeElements getViewElementTypeAccess() {
		return pViewElementType;
	}
	
	public ParserRule getViewElementTypeRule() {
		return getViewElementTypeAccess().getRule();
	}

	/// *
	// * A ViewGUIElement is a concrete definition (i.e., no cross-reference to another ViewGUIElement) of arbitrary view elements.
	// * It is the super type for ContainerElement and ContentElement. After the pre-processing all elements of type ViewElementType can
	// * be assumed to be ViewGUIElements.
	// * / ViewGUIElement:
	//	ContainerElement | ContentElement;
	public ViewGUIElementElements getViewGUIElementAccess() {
		return pViewGUIElement;
	}
	
	public ParserRule getViewGUIElementRule() {
		return getViewGUIElementAccess().getRule();
	}

	///////////////////////////////////////
	//// View layer => Content elements
	///////////////////////////////////////
	/// *
	// * ContentElements are all those elements of a view that don´t contain any
	// * nested view elements. They are basically used to present data and
	// * information to the user or collect data from the user.
	// * / ContentElement:
	//	InputElement | Image | AutoGeneratedContentElement | Spacer | Button | Label | Tooltip | UploadedImageOutput;
	public ContentElementElements getContentElementAccess() {
		return pContentElement;
	}
	
	public ParserRule getContentElementRule() {
		return getContentElementAccess().getRule();
	}

	//InputElement:
	//	BooleanInput | TextInput | IntegerInput | NumberInput | DateInput | TimeInput | DateTimeInput | OptionInput |
	//	EntitySelector | FileUpload;
	public InputElementElements getInputElementAccess() {
		return pInputElement;
	}
	
	public ParserRule getInputElementRule() {
		return getInputElementAccess().getRule();
	}

	/// * 
	// * MappableContentElement is a common super type of all GUI elements that
	// * can be mapped to contentProviders (multi-inheritance).
	// * E.g. useful for validation and auto-completion suggestions.
	// * / MappableContentElement:
	//	InputElement | Label | Tooltip;
	public MappableContentElementElements getMappableContentElementAccess() {
		return pMappableContentElement;
	}
	
	public ParserRule getMappableContentElementRule() {
		return getMappableContentElementAccess().getRule();
	}

	/// *
	// * TextInputs are basically used to provide the user the possibility to insert data.
	// * 
	// * Using the 'type' attribute the type of the input field can be be specified
	// * currently supported => input, textarea and password; if no type is set, DEFAULT is used implicitly.
	// * The default is assumed to be 'input' on all platforms.
	// * 
	// * TODO add further options to support different input keyboards for e.g. telephone numbers, emails etc.
	// * / TextInput:
	//	"TextInput" name=EID ("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type"
	//	type=TextInputType)? & ("disabled" (isDisabled?="true" | "false"))? & ("default" defaultValue=STRING)? & ("width"
	//	width=PERCENT)?) "}")?;
	public TextInputElements getTextInputAccess() {
		return pTextInput;
	}
	
	public ParserRule getTextInputRule() {
		return getTextInputAccess().getRule();
	}

	/// *
	// * This enumeration contains all possible input types of TextInputs.
	// * / enum TextInputType:
	//	DEFAULT="default" | INPUT="input" | TEXTAREA="textarea" | PASSWORD="password";
	public TextInputTypeElements getTextInputTypeAccess() {
		return unknownRuleTextInputType;
	}
	
	public EnumRule getTextInputTypeRule() {
		return getTextInputTypeAccess().getRule();
	}

	/// *
	// * BooleanInputs allow the user to set boolean values.
	// * Depending on the platform a boolean input can be a checkbox,
	// * a switch etc.
	// * / BooleanInput:
	//	"BooleanInput" name=EID ("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type"
	//	type=BooleanInputType)? & ("disabled" (isDisabled?="true" | "false"))? & ("default" defaultValue=("true" | "false"))?
	//	& ("width" width=PERCENT)?) "}")?;
	public BooleanInputElements getBooleanInputAccess() {
		return pBooleanInput;
	}
	
	public ParserRule getBooleanInputRule() {
		return getBooleanInputAccess().getRule();
	}

	/// *
	// * This enumeration contains all possible input types of BooleanInputs.
	// * By now only default is supported as the representation of actual boolean
	// * inputs is highly platform dependent and MD2 seeks not to violate the design
	// * guidelines of the different platforms.
	// * / enum BooleanInputType:
	//	DEFAULT="default";
	public BooleanInputTypeElements getBooleanInputTypeAccess() {
		return unknownRuleBooleanInputType;
	}
	
	public EnumRule getBooleanInputTypeRule() {
		return getBooleanInputTypeAccess().getRule();
	}

	/// *
	// * Integer input field. Depending on the platform this might be a simple validated
	// * text input, a number spinner etc.
	// * / IntegerInput:
	//	"IntegerInput" name=EID ("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type"
	//	type=IntegerInputType)? & ("disabled" (isDisabled?="true" | "false"))? & ("default" defaultValue=INT)? & ("width"
	//	width=PERCENT)?) "}")?;
	public IntegerInputElements getIntegerInputAccess() {
		return pIntegerInput;
	}
	
	public ParserRule getIntegerInputRule() {
		return getIntegerInputAccess().getRule();
	}

	/// *
	// * This enumeration contains all possible input types of IntegerInputs.
	// * If default is set, the input is dependent on the platform. It might be
	// * a simple text input that validates that only numbers are entered; a number
	// * spinner etc. A text input can be enforced as it is assumed to be supported
	// * on all platforms.
	// * / enum IntegerInputType:
	//	DEFAULT="default" | INPUT="input";
	public IntegerInputTypeElements getIntegerInputTypeAccess() {
		return unknownRuleIntegerInputType;
	}
	
	public EnumRule getIntegerInputTypeRule() {
		return getIntegerInputTypeAccess().getRule();
	}

	/// *
	// * Float input field. Depending on the platform this might be a simple validated
	// * text input or any other specially formatted field.
	// * / NumberInput:
	//	"NumberInput" name=EID ("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type"
	//	type=NumberInputType)? & ("disabled" (isDisabled?="true" | "false"))? & (placesSet?="places" places=INT)? &
	//	("default" defaultValue=FLOAT)? & ("width" width=PERCENT)?) "}")?;
	public NumberInputElements getNumberInputAccess() {
		return pNumberInput;
	}
	
	public ParserRule getNumberInputRule() {
		return getNumberInputAccess().getRule();
	}

	/// *
	// * This enumeration contains all possible input types of NumberInputs.
	// * If default is set, the input is dependent on the platform. It might be
	// * a simple text input that validates that only numbers are entered. A
	// * text input can be enforced as it is assumed to be supported
	// * on all platforms.
	// * / enum NumberInputType:
	//	DEFAULT="default" | INPUT="input";
	public NumberInputTypeElements getNumberInputTypeAccess() {
		return unknownRuleNumberInputType;
	}
	
	public EnumRule getNumberInputTypeRule() {
		return getNumberInputTypeAccess().getRule();
	}

	/// *
	// * DateInputs allow the user to enter dates.
	// * The representation of the actual widget depends on the target platform.
	// * / DateInput:
	//	"DateInput" name=EID ("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type"
	//	type=DateInputType)? & ("disabled" (isDisabled?="true" | "false"))? & ("default" defaultValue=DATE)? & ("width"
	//	width=PERCENT)?) "}")?;
	public DateInputElements getDateInputAccess() {
		return pDateInput;
	}
	
	public ParserRule getDateInputRule() {
		return getDateInputAccess().getRule();
	}

	/// *
	// * This enumeration contains all possible input types of DateInputs.
	// * By now only default is supported as the representation of actual date
	// * inputs is highly platform dependent and MD2 seeks not to violate the design
	// * guidelines of the different platforms.
	// * / enum DateInputType:
	//	DEFAULT="default";
	public DateInputTypeElements getDateInputTypeAccess() {
		return unknownRuleDateInputType;
	}
	
	public EnumRule getDateInputTypeRule() {
		return getDateInputTypeAccess().getRule();
	}

	/// *
	// * TimeInputs allow the user to enter times.
	// * The representation of the actual widget depends on the target platform.
	// * / TimeInput:
	//	"TimeInput" name=EID ("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type"
	//	type=TimeInputType)? & ("disabled" (isDisabled?="true" | "false"))? & ("default" defaultValue=TIME)? & ("width"
	//	width=PERCENT)?) "}")?;
	public TimeInputElements getTimeInputAccess() {
		return pTimeInput;
	}
	
	public ParserRule getTimeInputRule() {
		return getTimeInputAccess().getRule();
	}

	/// *
	// * This enumeration contains all possible input types of TimeInputs.
	// * By now only default is supported as the representation of actual time
	// * inputs is highly platform dependent and MD2 seeks not to violate the design
	// * guidelines of the different platforms.
	// * / enum TimeInputType:
	//	DEFAULT="default";
	public TimeInputTypeElements getTimeInputTypeAccess() {
		return unknownRuleTimeInputType;
	}
	
	public EnumRule getTimeInputTypeRule() {
		return getTimeInputTypeAccess().getRule();
	}

	/// *
	// * DateTimeInputs allow the user to enter an exact point of time.
	// * The representation of the actual widget depends on the target platform.
	// * / DateTimeInput:
	//	"DateTimeInput" name=EID ("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("type"
	//	type=DateTimeInputType)? & ("disabled" (isDisabled?="true" | "false"))? & ("default" defaultValue=DATE_TIME)? &
	//	("width" width=PERCENT)?) "}")?;
	public DateTimeInputElements getDateTimeInputAccess() {
		return pDateTimeInput;
	}
	
	public ParserRule getDateTimeInputRule() {
		return getDateTimeInputAccess().getRule();
	}

	/// *
	// * This enumeration contains all possible input types of DateTimeInputs.
	// * By now only default is supported as the representation of actual
	// * input is highly platform dependent and MD2 seeks to not violate the design
	// * guidelines of the different platforms.
	// * / enum DateTimeInputType:
	//	DEFAULT="default";
	public DateTimeInputTypeElements getDateTimeInputTypeAccess() {
		return unknownRuleDateTimeInputType;
	}
	
	public EnumRule getDateTimeInputTypeRule() {
		return getDateTimeInputTypeAccess().getRule();
	}

	/// *
	// * OptionInputs provide the user the possibility to choose one entry of a list of strings.
	// * / OptionInput:
	//	"OptionInput" name=EID ("{" (("label" labelText=STRING)? // Optional: Options may be inferred from the mapped model if its data type is an enum
	//	& ("tooltip" tooltipText=STRING)? & ("type" type=OptionInputType)? & ("disabled" (isDisabled?="true" | "false"))? &
	//	("default" defaultValue=STRING)? & ("width" width=PERCENT)? & ("options" (enumReference=[Enum] | "{"
	//	enumBody=EnumBody? "}"))?) "}")?;
	public OptionInputElements getOptionInputAccess() {
		return pOptionInput;
	}
	
	public ParserRule getOptionInputRule() {
		return getOptionInputAccess().getRule();
	}

	/// *
	// * Possible option input types.
	// * / enum OptionInputType:
	//	DEFAULT="default";
	public OptionInputTypeElements getOptionInputTypeAccess() {
		return unknownRuleOptionInputType;
	}
	
	public EnumRule getOptionInputTypeRule() {
		return getOptionInputTypeAccess().getRule();
	}

	/// *
	// * FileInputs enable uploading a file to the application
	// * / FileUpload:
	//	"FileUpload" name=EID ("{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("disabled"
	//	(isDisabled?="true" | "false"))? & ("style" style=StyleAssignment)? & ("width" width=PERCENT)? & ("text"
	//	buttonValueText=STRING)?) "}")?;
	public FileUploadElements getFileUploadAccess() {
		return pFileUpload;
	}
	
	public ParserRule getFileUploadRule() {
		return getFileUploadAccess().getRule();
	}

	/// *
	// * The EntitySelector allows the user to select an element from a list of
	// * elements. The textProposition defines which ContentProvider stores the
	// * list and which attribute of the elements shall be displayed to the user
	// * to allow him to find the desired element.
	// * / EntitySelector:
	//	"EntitySelector" name=EID "{" (("label" labelText=STRING)? & ("tooltip" tooltipText=STRING)? & ("disabled"
	//	(isDisabled?="true" | "false"))? & ("width" width=PERCENT)? & "textProposition" textProposition=ContentProviderPath)
	//	"}";
	public EntitySelectorElements getEntitySelectorAccess() {
		return pEntitySelector;
	}
	
	public ParserRule getEntitySelectorRule() {
		return getEntitySelectorAccess().getRule();
	}

	/// *
	// * The AutoGeneratedContentElement is bound to a ContentProvider and will automatically create
	// * view elements to display all attributes of the related entity. It is possible to either
	// * exclude attributes specified with exclude or to provide a positive list of attributes with only.
	// * In each case a list of the specified attributes will be stored in filteredAttributes. Which of
	// * the two options has been chosen can be determined via exclude.
	// * / AutoGeneratedContentElement:
	//	"AutoGenerator" name=EID "{" (("width" width=PERCENT)? & ("disabled" (isDisabled?="true" | "false"))? &
	//	"contentProvider" contentProvider+=ContentProviderReference+ ("(" (exclude?="exclude" | "only")
	//	filteredAttributes+=EntityPath+ ")")?) "}";
	public AutoGeneratedContentElementElements getAutoGeneratedContentElementAccess() {
		return pAutoGeneratedContentElement;
	}
	
	public ParserRule getAutoGeneratedContentElementRule() {
		return getAutoGeneratedContentElementAccess().getRule();
	}

	/// *
	// * Buttons provide the user the possibility to call actions,
	// * that have been bound on the onTouch event of the Button.
	// * This Button specification allows different ways to set the
	// * button text (directly or via text attribute).
	// * / Button:
	//	ButtonShorthandDefinition | ButtonExtendedDefinition;
	public ButtonElements getButtonAccess() {
		return pButton;
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}

	/// *
	// * This is the shorthand definition of a Button, where
	// * the text will be set in brackets behind the ID
	// * / ButtonShorthandDefinition returns Button:
	//	"Button" name=EID "(" text=STRING ")" ("{" (("style" style=StyleAssignment)? & ("disabled" (isDisabled?="true" |
	//	"false"))? & ("width" width=PERCENT)?) "}")?;
	public ButtonShorthandDefinitionElements getButtonShorthandDefinitionAccess() {
		return pButtonShorthandDefinition;
	}
	
	public ParserRule getButtonShorthandDefinitionRule() {
		return getButtonShorthandDefinitionAccess().getRule();
	}

	/// *
	// * This is the extended definition of a Button, where
	// * the text will be set as property
	// * / ButtonExtendedDefinition returns Button:
	//	"Button" name=EID "{" ("text" text=STRING & ("style" style=StyleAssignment)? & ("disabled" (isDisabled?="true" |
	//	"false"))? & ("width" width=PERCENT)?) "}";
	public ButtonExtendedDefinitionElements getButtonExtendedDefinitionAccess() {
		return pButtonExtendedDefinition;
	}
	
	public ParserRule getButtonExtendedDefinitionRule() {
		return getButtonExtendedDefinitionAccess().getRule();
	}

	/// *
	// * Tooltips allow the modeler to provide the user with additional
	// * information. This Tooltip specification allows different ways
	// * to set the help text (directly or via text attribute)
	// * / Tooltip:
	//	TooltipShorthandDefinition | TooltipExtendedDefinition;
	public TooltipElements getTooltipAccess() {
		return pTooltip;
	}
	
	public ParserRule getTooltipRule() {
		return getTooltipAccess().getRule();
	}

	/// *
	// * This is the shorthand definition of a Tooltip, where
	// * the image source will be set in brackets behind the ID
	// * / TooltipShorthandDefinition returns Tooltip:
	//	"Tooltip" name=EID "(" text=STRING ")" ("{" ("width" width=PERCENT)? "}")?;
	public TooltipShorthandDefinitionElements getTooltipShorthandDefinitionAccess() {
		return pTooltipShorthandDefinition;
	}
	
	public ParserRule getTooltipShorthandDefinitionRule() {
		return getTooltipShorthandDefinitionAccess().getRule();
	}

	/// *
	// * This is the extended definition of a Tooltip, where
	// * the image source will be set as property
	// * / TooltipExtendedDefinition returns Tooltip:
	//	"Tooltip" name=EID "{" ("text" text=STRING & ("width" width=PERCENT)?) "}";
	public TooltipExtendedDefinitionElements getTooltipExtendedDefinitionAccess() {
		return pTooltipExtendedDefinition;
	}
	
	public ParserRule getTooltipExtendedDefinitionRule() {
		return getTooltipExtendedDefinitionAccess().getRule();
	}

	/// *
	// * Images allow the modeler to specify and display images to the user.
	// * This Image specification allows different ways to set the
	// * image source (directly or via src attribute)
	// * / Image:
	//	ImageShorthandDefinition | ImageExtendedDefinition;
	public ImageElements getImageAccess() {
		return pImage;
	}
	
	public ParserRule getImageRule() {
		return getImageAccess().getRule();
	}

	/// *
	// * This is the shorthand definition of a Image, where
	// * the image source will be set in brackets behind the ID
	// * / ImageShorthandDefinition returns Image:
	//	"Image" name=EID "(" src=STRING ")" ("{" (("imgHeight" imgHeight=INT)? & ("imgWidth" imgWidth=INT)? & ("width"
	//	width=PERCENT)?) "}")?;
	public ImageShorthandDefinitionElements getImageShorthandDefinitionAccess() {
		return pImageShorthandDefinition;
	}
	
	public ParserRule getImageShorthandDefinitionRule() {
		return getImageShorthandDefinitionAccess().getRule();
	}

	/// *
	// * This is the extended definition of a Image, where
	// * the image source will be set as property
	// * / ImageExtendedDefinition returns Image:
	//	"Image" name=EID "{" ("src" src=STRING & ("height" height=INT)? & ("width" width=INT)?) "}";
	public ImageExtendedDefinitionElements getImageExtendedDefinitionAccess() {
		return pImageExtendedDefinition;
	}
	
	public ParserRule getImageExtendedDefinitionRule() {
		return getImageExtendedDefinitionAccess().getRule();
	}

	/// *
	// * ImageUploadOutput allow the modeler to specify and display images to the user 
	// * which were previously uploaded to the backend (using a FileUpload element).
	// * / UploadedImageOutput:
	//	"UploadedImageOutput" name=EID ("{" (("imgHeight" imgHeight=INT)? & ("imgWidth" imgWidth=INT)? & ("width"
	//	width=INT)?) "}")?;
	public UploadedImageOutputElements getUploadedImageOutputAccess() {
		return pUploadedImageOutput;
	}
	
	public ParserRule getUploadedImageOutputRule() {
		return getUploadedImageOutputAccess().getRule();
	}

	/// *
	// * Labels allow the modeler to present text to the user.
	// * Normally they are used to denote input elements. This
	// * Label specification allows different ways to set the
	// * label text (directly or via text attribute)
	// * / Label:
	//	LabelShorthandDefinition | LabelExtendedDefinition;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	/// *
	// * This is the shorthand definition of a Label, where
	// * the text will be set in brackets behind the ID
	// * / LabelShorthandDefinition returns Label:
	//	"Label" name=EID "(" text=STRING ")" ("{" (("style" style=StyleAssignment)? & ("width" width=PERCENT)?) "}")?;
	public LabelShorthandDefinitionElements getLabelShorthandDefinitionAccess() {
		return pLabelShorthandDefinition;
	}
	
	public ParserRule getLabelShorthandDefinitionRule() {
		return getLabelShorthandDefinitionAccess().getRule();
	}

	/// *
	// * This is the extended definition of a Label, where
	// * the text will be set as property
	// * / LabelExtendedDefinition returns Label:
	//	"Label" name=EID "{" ("text" text=STRING & ("style" style=StyleAssignment)? & ("width" width=PERCENT)?) "}";
	public LabelExtendedDefinitionElements getLabelExtendedDefinitionAccess() {
		return pLabelExtendedDefinition;
	}
	
	public ParserRule getLabelExtendedDefinitionRule() {
		return getLabelExtendedDefinitionAccess().getRule();
	}

	/// *
	// * A Spacer is used in a GridLayoutPane to mark an empty
	// * cell or in a FlowLayoutPane to occupy some space.
	// * / Spacer: // Hack to force the spacer to have a name attribute in the inferred model
	//// the __Dummy keyword will be suppressed in auto completion and via validator
	//	"Spacer" ({Spacer} ("(" "number"? number=INT? ")")? | "__Dummy" name=ID) ("{" ("width" width=PERCENT)? "}")?;
	public SpacerElements getSpacerAccess() {
		return pSpacer;
	}
	
	public ParserRule getSpacerRule() {
		return getSpacerAccess().getRule();
	}

	///////////////////////////////////////
	//// View layer => Container elements
	///////////////////////////////////////
	/// *
	// * ContainerElements are used to composite ViewGUIElements.
	// * / ContainerElement:
	//	ContentContainer | SubViewContainer;
	public ContainerElementElements getContainerElementAccess() {
		return pContainerElement;
	}
	
	public ParserRule getContainerElementRule() {
		return getContainerElementAccess().getRule();
	}

	/// *
	// * ContentContainers can contain other Containers or ContentElements.
	// * / ContentContainer:
	//	GridLayoutPane | FlowLayoutPane;
	public ContentContainerElements getContentContainerAccess() {
		return pContentContainer;
	}
	
	public ParserRule getContentContainerRule() {
		return getContentContainerAccess().getRule();
	}

	/// *
	// * SubViewContainers can only contain other Containers. The containers in SubViewContainers have the role of
	// * sub views, i.e. only one container is shown at any time and by changing the view only the containing elements
	// * are replaced.
	// * / SubViewContainer:
	//	AlternativesPane | TabbedAlternativesPane;
	public SubViewContainerElements getSubViewContainerAccess() {
		return pSubViewContainer;
	}
	
	public ParserRule getSubViewContainerRule() {
		return getSubViewContainerAccess().getRule();
	}

	/// *
	// * A GridLayoutPane allows the arrangement of ViewGUIElements in a grid structure. The user can specify the
	// * number of columns or the number of rows. If one of those is specified the other one will be calculated by
	// * MD2. If both are specified and the resulting number of cells is smaller than the number of contained
	// * elements, the exceeding elements will be ignored.
	// * / GridLayoutPane:
	//	"GridLayoutPane" name=EID "(" params+=GridLayoutPaneParam ("," params+=GridLayoutPaneParam)* ")" "{"
	//	elements+=ViewElementType* "}";
	public GridLayoutPaneElements getGridLayoutPaneAccess() {
		return pGridLayoutPane;
	}
	
	public ParserRule getGridLayoutPaneRule() {
		return getGridLayoutPaneAccess().getRule();
	}

	/// *
	// * The GridLayoutPaneParam specifies all possible parameters for a GridLayoutPane.
	// * These are besides the number of columns and rows all TabSpecificParams.
	// * / GridLayoutPaneParam:
	//	{GridLayoutPaneColumnsParam} "columns" value=INT | {GridLayoutPaneRowsParam} "rows" value=INT | CommonContainerParam;
	public GridLayoutPaneParamElements getGridLayoutPaneParamAccess() {
		return pGridLayoutPaneParam;
	}
	
	public ParserRule getGridLayoutPaneParamRule() {
		return getGridLayoutPaneParamAccess().getRule();
	}

	/// *
	// * A FlowLayoutPane allows the arrangement of ViewGUIElements one after another either horizontally or vertically.
	// * / FlowLayoutPane:
	//	"FlowLayoutPane" name=EID ("(" (params+=FlowLayoutPaneParam ("," params+=FlowLayoutPaneParam)*)? ")")? "{"
	//	elements+=ViewElementType* "}";
	public FlowLayoutPaneElements getFlowLayoutPaneAccess() {
		return pFlowLayoutPane;
	}
	
	public ParserRule getFlowLayoutPaneRule() {
		return getFlowLayoutPaneAccess().getRule();
	}

	/// *
	// * The FlowLayoutPaneParam specifies all possible parameters for a FlowLayoutPane.
	// * These are besides the flowDirection all TabSpecificParams.
	// * / FlowLayoutPaneParam:
	//	{FlowLayoutPaneFlowDirectionParam} flowDirection=FlowDirection | CommonContainerParam;
	public FlowLayoutPaneParamElements getFlowLayoutPaneParamAccess() {
		return pFlowLayoutPaneParam;
	}
	
	public ParserRule getFlowLayoutPaneParamRule() {
		return getFlowLayoutPaneParamAccess().getRule();
	}

	/// *
	// * The FlowDirection lists all possible orientations that can be used
	// * to define the flow of elements contained in a FlowLayoutPane
	// * / enum FlowDirection:
	//	HORIZONTAL="horizontal" | VERTICAL="vertical";
	public FlowDirectionElements getFlowDirectionAccess() {
		return unknownRuleFlowDirection;
	}
	
	public EnumRule getFlowDirectionRule() {
		return getFlowDirectionAccess().getRule();
	}

	/// *
	// * The AlternativesPane allows the definition of several ContainerElements of which one will be
	// * shown to the user. The user will be able to choose which ContainerElement shall be displayed. 
	// * / AlternativesPane:
	//	"AlternativesPane" name=EID ("(" (params+=CommonContainerParam ("," params+=CommonContainerParam)*)? ")")? "{"
	//	elements+=ContainerElementType* "}";
	public AlternativesPaneElements getAlternativesPaneAccess() {
		return pAlternativesPane;
	}
	
	public ParserRule getAlternativesPaneRule() {
		return getAlternativesPaneAccess().getRule();
	}

	/// *
	// * The TabbedAlternativesPane is a special AlternativesPane that
	// * allows the user to switch between tabs by offering him a tab bar.
	// * / TabbedAlternativesPane:
	//	"TabbedPane" name=EID ("(" ")")? "{" elements+=ContainerElementType* "}";
	public TabbedAlternativesPaneElements getTabbedAlternativesPaneAccess() {
		return pTabbedAlternativesPane;
	}
	
	public ParserRule getTabbedAlternativesPaneRule() {
		return getTabbedAlternativesPaneAccess().getRule();
	}

	/// *
	// * CommonContainerParams are parameters that can be applied to all container elements.
	// * That can either be a TabSpecificParam or a width parameter that defines the width
	// * of a container relative to its parent element.
	// * / CommonContainerParam:
	//	{WidthParam} "width" width=PERCENT | TabSpecificParam;
	public CommonContainerParamElements getCommonContainerParamAccess() {
		return pCommonContainerParam;
	}
	
	public ParserRule getCommonContainerParamRule() {
		return getCommonContainerParamAccess().getRule();
	}

	/// *
	// * TabSpecificParam defines the parameters the user can set to a
	// * ContainerElement that is contained in a TabbedAlternativesPane.
	// * / TabSpecificParam:
	//	{TabTitleParam} "tabTitle" tabTitle=STRING | {TabIconParam} "tabIcon" tabIcon=STRING;
	public TabSpecificParamElements getTabSpecificParamAccess() {
		return pTabSpecificParam;
	}
	
	public ParserRule getTabSpecificParamRule() {
		return getTabSpecificParamAccess().getRule();
	}

	///////////////////////////////////////////
	//// View layer => ViewElementReferences
	///////////////////////////////////////////
	/// *
	// * A reference to another GUI element. All references will be replaced by its concrete instances during
	// * preprocessing. By renaming a reference, the later cloned element can be accessed by the new name, e.g.
	// * for mapping, validator binding etc. So, the reference is treated as if it were the actual GUI element.
	// * / ViewGUIElementReference:
	//	value=[ViewGUIElement|QUALIFIED_NAME] (rename?="->" name=EID)?;
	public ViewGUIElementReferenceElements getViewGUIElementReferenceAccess() {
		return pViewGUIElementReference;
	}
	
	public ParserRule getViewGUIElementReferenceRule() {
		return getViewGUIElementReferenceAccess().getRule();
	}

	/// *
	// * Each ContainerElementReference is a special case of the ViewGUIElementReference that is meant to be used
	// * in SubViewContainers (TabbedPane, AlternativesPane).
	// * / ContainerElementReference returns ViewGUIElementReference:
	//	{ContainerElementReference} value=[ContainerElement|QUALIFIED_NAME] (rename?="->" name=EID)? ("("
	//	(params+=TabSpecificParam ("," params+=TabSpecificParam)*)? ")")?;
	public ContainerElementReferenceElements getContainerElementReferenceAccess() {
		return pContainerElementReference;
	}
	
	public ParserRule getContainerElementReferenceRule() {
		return getContainerElementReferenceAccess().getRule();
	}

	/// *
	// * The ContainerElementType allows to either specify a new ContainerElement or to refer to an existing one.
	// * Used in SubViewContainers (TabbedPane, AlternativesPane).
	// * / ContainerElementType:
	//	ContainerElement | ContainerElementReference;
	public ContainerElementTypeElements getContainerElementTypeAccess() {
		return pContainerElementType;
	}
	
	public ParserRule getContainerElementTypeRule() {
		return getContainerElementTypeAccess().getRule();
	}

	///////////////////////////////////////////
	//// View layer => Style definitions
	///////////////////////////////////////////
	/// *
	// * The StyleAssignment allows the user to
	// * either define a new Style or to refer
	// * to an existing one.
	// * / StyleAssignment:
	//	{StyleDefinition} definition=StyleBody | {StyleReference} reference=[Style];
	public StyleAssignmentElements getStyleAssignmentAccess() {
		return pStyleAssignment;
	}
	
	public ParserRule getStyleAssignmentRule() {
		return getStyleAssignmentAccess().getRule();
	}

	/// *
	// * A Style allows the user to define a
	// * new Style in the StyleBody and allow
	// * the reference to it by defining a name.
	// * / Style:
	//	"style" name=EID body=StyleBody;
	public StyleElements getStyleAccess() {
		return pStyle;
	}
	
	public ParserRule getStyleRule() {
		return getStyleAccess().getRule();
	}

	/// *
	// * The StyleBody contains the actual style and can be used to set the appearance of the text of some 
	// * ViewGUIElements. It is possible to set the fontSize, the color and the textStyle.
	// * The fontSize is relative to the default font size, i.e. similar to the unit <i>em</i> in CSS.
	// * 1em is equal to the current font size. 2em means 2 times the size of the current font. This way,
	// * it can adapt automatically to the font size that the target device uses. If the target platform does not
	// * support <i>em</i> as a unit, the pixel or pt size can easily be calculated.
	// * / StyleBody:
	//	"{" {StyleBody} (("fontSize" fontSize=FLOAT)? & ("color" color=Color)? & ("textStyle" (bold?="bold"? &
	//	italic?="italic"? | "normal"))?) "}";
	public StyleBodyElements getStyleBodyAccess() {
		return pStyleBody;
	}
	
	public ParserRule getStyleBodyRule() {
		return getStyleBodyAccess().getRule();
	}

	/// *
	// * A Color can be either specified
	// * as HEX_COLOR or NamedColor.
	// * 
	// * Notice:
	// * Preprocessing replaces all NamedColors
	// * by their hex color equivalents.
	// * / Color:
	//	{HexColorDef} color=HEX_COLOR | {NamedColorDef} color=NamedColor;
	public ColorElements getColorAccess() {
		return pColor;
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}

	/// **
	// * NamedColor contains the set of the 16 named web colors as specified in HTML 4.01.
	// * / enum NamedColor:
	//	AQUA="aqua" | BLACK="black" | BLUE="blue" | FUCHSIA="fuchsia" | GRAY="gray" | GREEN="green" | LIME="lime" |
	//	MAROON="maroon" | NAVY="navy" | OLIVE="olive" | PURPLE="purple" | RED="red" | SILVER="silver" | TEAL="teal" |
	//	WHITE="white" | YELLOW="yellow";
	public NamedColorElements getNamedColorAccess() {
		return unknownRuleNamedColor;
	}
	
	public EnumRule getNamedColorRule() {
		return getNamedColorAccess().getRule();
	}

	///////////////////////////////////////
	///////////////////////////////////////
	//// Controller layer
	///////////////////////////////////////
	///////////////////////////////////////
	/// *
	// * The root Controller element contains all
	// * ControllerElements containing to this view Controller
	// * / Controller:
	//	controllerElements+=ControllerElement+;
	public ControllerElements getControllerAccess() {
		return pController;
	}
	
	public ParserRule getControllerRule() {
		return getControllerAccess().getRule();
	}

	/// *
	// * The ControllerElement is the super type of all possible ControllerElements.
	// * / ControllerElement:
	//	ContentProvider | Validator | Main | RemoteConnection | WorkflowElement | WebServiceCall;
	public ControllerElementElements getControllerElementAccess() {
		return pControllerElement;
	}
	
	public ParserRule getControllerElementRule() {
		return getControllerElementAccess().getRule();
	}

	///////////////////////////////////////
	//// Controller layer => WorkflowElements
	///////////////////////////////////////
	/// *
	// * WorkflowElements are controllers for encapsulated functionality.
	// * The onInit block is performed on initialization of the workflowelement
	// * / WorkflowElement:
	//	"WorkflowElement" name=EID "{" ("defaultProcessChain" defaultProcessChain=[ProcessChain] "onInit" "{"
	//	initActions+=[Action] ("," initActions+=[Action])* "}") (actions+=Action* & processChain+=ProcessChain+ &
	//	invoke+=InvokeDefinition*) "}";
	public WorkflowElementElements getWorkflowElementAccess() {
		return pWorkflowElement;
	}
	
	public ParserRule getWorkflowElementRule() {
		return getWorkflowElementAccess().getRule();
	}

	///////////////////////////////////////
	//// Controller layer => Events
	///////////////////////////////////////
	/// *
	// * An Action provides the user the possibility to
	// * declare a set of tasks. An Action can be
	// * either a CustomAction or a CombinedAction.
	// * / Action:
	//	"action" (CustomAction | CombinedAction);
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	/// *
	// * A CustomAction contains a list of CustomCodeFragments
	// * where each CustomCodeFragment contains one task.
	// * / CustomAction:
	//	"CustomAction" name=EID "{" codeFragments+=CustomCodeFragment* "}";
	public CustomActionElements getCustomActionAccess() {
		return pCustomAction;
	}
	
	public ParserRule getCustomActionRule() {
		return getCustomActionAccess().getRule();
	}

	/// *
	// * CombinedActions allow the composition of Actions.
	// * / CombinedAction:
	//	"CombinedAction" name=EID "{" actions+=[Action|QUALIFIED_NAME]* "}";
	public CombinedActionElements getCombinedActionAccess() {
		return pCombinedAction;
	}
	
	public ParserRule getCombinedActionRule() {
		return getCombinedActionAccess().getRule();
	}

	/// *
	// * SimpleActions are simple tasks that can be used by the user to declare operations that the app shall perform.
	// * / SimpleAction: // virtual actions that are replaced during preprocessing
	//	{ProcessChainProceedAction} "ProcessChainProceed" | {ProcessChainReverseAction} "ProcessChainReverse" |
	//	{ProcessChainGotoAction} "ProcessChainGoto" "(" pcStep=[ProcessChainStep|QUALIFIED_NAME] ")" |
	//	{SetProcessChainAction} "SetProcessChain" "(" processChain=[ProcessChain] ")" | // core actions that have to be supported by the platform
	//	{GotoViewAction} ("GotoView" "(" view=AbstractViewGUIElementRef ")") | {DisableAction} ("Disable" "("
	//	inputField=AbstractViewGUIElementRef ")") | {EnableAction} ("Enable" "(" inputField=AbstractViewGUIElementRef ")") |
	//	{DisplayMessageAction} ("DisplayMessage" "(" message=SimpleExpression ")") | {ContentProviderOperationAction}
	//	("ContentProviderOperation" "(" operation=AllowedOperation contentProvider=AbstractProviderReference ")") |
	//	{ContentProviderResetAction} ("ContentProviderReset" "(" contentProvider=ContentProviderReference ")") |
	//	{FireEventAction} ("FireEvent" "(" workflowEvent=WorkflowEvent ")") | {WebServiceCallAction} ("WebServiceCall"
	//	webServiceCall=[WebServiceCall]) | {LocationAction} ("Location" "(" "inputs" "(" ("cityInput"
	//	cityInput=AbstractContentProviderPath & "streetInput" streetInput=AbstractContentProviderPath & ("streetNumberInput"
	//	streetNumberInput=AbstractContentProviderPath)? & "postalInput" postalInput=AbstractContentProviderPath &
	//	"countryInput" countryInput=AbstractContentProviderPath) ")" "outputs" "(" ("latitudeOutput"
	//	latitude=AbstractContentProviderPath & "longitudeOutput" longitude=AbstractContentProviderPath) ")" ")") | // TODO -- multi-valued content provider, not supported yet
	//	{ContentProviderAddAction} ("ContentProviderAdd" "(" contentProvider=ContentProviderReference ")") |
	//	{ContentProviderRemoveAction} ("ContentProviderRemove" "(" contentProvider=ContentProviderReference "where"
	//	whereClause=WhereClauseCondition ")") | // TODO -- does not make sense as action; maybe allow getters as follows :contentProviderRef(first where Customer.name equals "John").name
	//	{ContentProviderGetAction} ("ContentProviderGet" "(" contentProvider=AbstractProviderReference ("where"
	//	whereClause=WhereClauseCondition)? ")");
	public SimpleActionElements getSimpleActionAccess() {
		return pSimpleAction;
	}
	
	public ParserRule getSimpleActionRule() {
		return getSimpleActionAccess().getRule();
	}

	///////////////////////////////////////
	//// Controller layer => Custom code
	///////////////////////////////////////
	/// *
	// * A CustomCodeFragment defines the possible commands and tasks that can be declared in a CustomAction.
	// * 
	// * TODO define all keywords that are supported by our language
	// * TODO provide possibility to implement arbitrary code (in theory)
	// * / CustomCodeFragment:
	//	"bind" ({EventBindingTask} ("action" | "actions") actions+=ActionDef+ "on" events+=EventDef+ | {ValidatorBindingTask}
	//	("validator" | "validators") validators+=ValidatorType+ "on" referencedFields+=AbstractViewGUIElementRef+) | "unbind"
	//	({EventUnbindTask} ("action" | "actions") actions+=ActionDef+ "from" events+=EventDef+ | {ValidatorUnbindTask}
	//	("validator" | "validators") (validators+=ValidatorType+ | allTypes?="all") "from"
	//	referencedFields+=AbstractViewGUIElementRef+) | "call" ({CallTask} action=ActionDef) | "map" ({MappingTask}
	//	referencedViewField=AbstractViewGUIElementRef "to" pathDefinition=AbstractContentProviderPath) | "unmap"
	//	({UnmappingTask} referencedViewField=AbstractViewGUIElementRef "from" pathDefinition=AbstractContentProviderPath) |
	//	"set" (ContentProviderPath {AttributeSetTask.pathDefinition=current} "=" source=SimpleExpression |
	//	ContentProviderReference {ContentProviderSetTask.contentProvider=current} "=" source=SimpleExpression |
	//	AbstractViewGUIElementRef {ViewElementSetTask.referencedViewField=current} "=" source=SimpleExpression) | "if"
	//	({ConditionalCodeFragment} if=IfCodeBlock ("elseif" elseifs+=IfCodeBlock)* ("else" else=ElseCodeBlock)?);
	public CustomCodeFragmentElements getCustomCodeFragmentAccess() {
		return pCustomCodeFragment;
	}
	
	public ParserRule getCustomCodeFragmentRule() {
		return getCustomCodeFragmentAccess().getRule();
	}

	//IfCodeBlock:
	//	"(" condition=Condition ")" "{" codeFragments+=CustomCodeFragment* "}";
	public IfCodeBlockElements getIfCodeBlockAccess() {
		return pIfCodeBlock;
	}
	
	public ParserRule getIfCodeBlockRule() {
		return getIfCodeBlockAccess().getRule();
	}

	//ElseCodeBlock:
	//	{ElseCodeBlock} "{" codeFragments+=CustomCodeFragment* "}";
	public ElseCodeBlockElements getElseCodeBlockAccess() {
		return pElseCodeBlock;
	}
	
	public ParserRule getElseCodeBlockRule() {
		return getElseCodeBlockAccess().getRule();
	}

	/// *
	// * Helper Rule. Each element that can contain codeFragments should inherit from ContainsCodeFragments. So, the code of the generators and
	// * the preprocessing does not have to be adapted each time a new element that has a codeFragments attribute is added.
	// * / ContainsCodeFragments:
	//	CustomAction | IfCodeBlock | ElseCodeBlock;
	public ContainsCodeFragmentsElements getContainsCodeFragmentsAccess() {
		return pContainsCodeFragments;
	}
	
	public ParserRule getContainsCodeFragmentsRule() {
		return getContainsCodeFragmentsAccess().getRule();
	}

	/// *
	// * The AbstractViewGUIElementRef allows to reference any defined ViewGUIElement.
	// * First a top level element has to be defined in ref. In tail a recursive navigation
	// * to nested elements can be specified. If the last tail points to an
	// * AutoGeneratedContentElement path or simpleType can be used to navigate inside the
	// * Entity, the ContentProvider is bound on. This will be a reference to the auto
	// * generated ViewGUIElement containing the value of the specified Attribute.
	// * / AbstractViewGUIElementRef:
	//	ref=[ViewElementType|QUALIFIED_NAME] (tail=NestedAbstractViewGUIElementRef | "[" (path=EntityPath |
	//	simpleType=SimpleDataTypeWrapper) "]")?;
	public AbstractViewGUIElementRefElements getAbstractViewGUIElementRefAccess() {
		return pAbstractViewGUIElementRef;
	}
	
	public ParserRule getAbstractViewGUIElementRefRule() {
		return getAbstractViewGUIElementRefAccess().getRule();
	}

	/// *
	// * The NestedAbstractViewGUIElementRef allows to point to an ViewGUIElement
	// * nested in another ViewGUIElement. In tail a recursive navigation
	// * to nested elements can be specified. If the last tail points to an
	// * AutoGeneratedContentElement path or simpleType can be used to navigate inside the
	// * Entity, the ContentProvider is bound on. This will be an reference to the auto
	// * generated ViewGUIElement containing the value of the specified Attribute.
	// * 
	// * A NestedAbstractViewGUIElementRef will result in an AbstractViewGUIElementRef.
	// * The difference and reason, why the NestedAbstractViewGUIElementRef is needed,
	// * is that AbstractViewGUIElementRef can just point to top level ViewGUIElements
	// * while NestedAbstractViewGUIElementRef can point to nested ViewGUIElements.
	// * This is important, if a ViewGUIElement referred in a ContainerElement
	// * shall be referenced.
	// * / NestedAbstractViewGUIElementRef returns AbstractViewGUIElementRef:
	//	"->" ref=[ViewElementType|QUALIFIED_NAME] (tail=NestedAbstractViewGUIElementRef | "[" (path=EntityPath |
	//	simpleType=SimpleDataTypeWrapper) "]")?;
	public NestedAbstractViewGUIElementRefElements getNestedAbstractViewGUIElementRefAccess() {
		return pNestedAbstractViewGUIElementRef;
	}
	
	public ParserRule getNestedAbstractViewGUIElementRefRule() {
		return getNestedAbstractViewGUIElementRefAccess().getRule();
	}

	/// *
	// * The ActionDef allows the user to either define a new Action or
	// * directly a SimpleAction
	// * / ActionDef:
	//	{ActionReference} actionRef=[Action|QUALIFIED_NAME] | {SimpleActionRef} action=SimpleAction;
	public ActionDefElements getActionDefAccess() {
		return pActionDef;
	}
	
	public ParserRule getActionDefRule() {
		return getActionDefAccess().getRule();
	}

	/// *
	// * The EventDef allows the user to refer to one of the four possible event types.
	// * / EventDef:
	//	AbstractContentProviderPath {ContentProviderPathEventRef.pathDefinition=current} "." event=ContentProviderEventType |
	//	AbstractProviderReference {ContentProviderEventRef.contentProvider=current} "." event=ContentProviderEventType |
	//	{ViewElementEventRef} referencedField=AbstractViewGUIElementRef "." event=ElementEventType | {GlobalEventRef}
	//	event=GlobalEventType | {ConditionalEventRef} eventReference=[OnConditionEvent|QUALIFIED_NAME];
	public EventDefElements getEventDefAccess() {
		return pEventDef;
	}
	
	public ParserRule getEventDefRule() {
		return getEventDefAccess().getRule();
	}

	/// *
	// * ElementEventType lists all possible events that are supported by ViewGUIElements.
	// * / enum ElementEventType:
	//	ON_CLICK="onClick" | ON_CHANGE="onChange" | ON_LEFT_SWIPE="onLeftSwipe" | ON_RIGHT_SWIPE="onRightSwipe" |
	//	ON_WRONG_VALIDATION="onWrongValidation";
	public ElementEventTypeElements getElementEventTypeAccess() {
		return unknownRuleElementEventType;
	}
	
	public EnumRule getElementEventTypeRule() {
		return getElementEventTypeAccess().getRule();
	}

	/// *
	// * ContentProviderEventType lists all possible
	// * events supported by ContentProviders
	// * / enum ContentProviderEventType:
	//	ON_CHANGE="onChange";
	public ContentProviderEventTypeElements getContentProviderEventTypeAccess() {
		return unknownRuleContentProviderEventType;
	}
	
	public EnumRule getContentProviderEventTypeRule() {
		return getContentProviderEventTypeAccess().getRule();
	}

	/// *
	// * GlobalEventType lists all possible app wide events.
	// * / enum GlobalEventType:
	//	ON_CONNECTION_LOST="onConnectionLost" | ON_CONNECTION_REGAINED="onConnectionRegained" |
	//	ON_LOCATION_UPDATE="onLocationUpdate";
	public GlobalEventTypeElements getGlobalEventTypeAccess() {
		return unknownRuleGlobalEventType;
	}
	
	public EnumRule getGlobalEventTypeRule() {
		return getGlobalEventTypeAccess().getRule();
	}

	///////////////////////////////////////
	//// Controller layer => Validators
	///////////////////////////////////////
	/// *
	// * The ValidatorType allows to either specify
	// * a new Validator or to use a StandardValidator
	// * / ValidatorType:
	//	{CustomizedValidatorType} validator=[Validator|QUALIFIED_NAME] | {StandardValidatorType} validator=StandardValidator;
	public ValidatorTypeElements getValidatorTypeAccess() {
		return pValidatorType;
	}
	
	public ParserRule getValidatorTypeRule() {
		return getValidatorTypeAccess().getRule();
	}

	/// *
	// * Validator allows to declare one of the supported Validators. Apart from the RemoteValidator, all validators are transformed into
	// * StandardValidators during the pre-processing.
	// * / Validator:
	//	"validator" ({RegExValidator} "RegExValidator" name=EID "{" (params+=RegExValidatorParam
	//	params+=RegExValidatorParam*) "}" | {NotNullValidator} "NotNullValidator" name=EID "{" params+=ValidatorMessageParam?
	//	"}" | {NumberRangeValidator} "NumberRangeValidator" name=EID "{" (params+=NumberRangeValidatorParam
	//	params+=NumberRangeValidatorParam*) "}" | {StringRangeValidator} "StringRangeValidator" name=EID "{"
	//	(params+=StringRangeValidatorParam params+=StringRangeValidatorParam*) "}" | {DateRangeValidator}
	//	"DateRangeValidator" name=EID "{" (params+=DateRangeValidatorParam params+=DateRangeValidatorParam*) "}" |
	//	{TimeRangeValidator} "TimeRangeValidator" name=EID "{" (params+=TimeRangeValidatorParam
	//	params+=TimeRangeValidatorParam*) "}" | {DateTimeRangeValidator} "DateTimeRangeValidator" name=EID "{"
	//	(params+=DateTimeRangeValidatorParam params+=DateTimeRangeValidatorParam*) "}" | RemoteValidator);
	public ValidatorElements getValidatorAccess() {
		return pValidator;
	}
	
	public ParserRule getValidatorRule() {
		return getValidatorAccess().getRule();
	}

	/// *
	// * StandardValidator contains all Validators that can be directly assigned to input fields without
	// * being defined explicitly before. Each StandardValidator supports a set of parameters to allow
	// * to define the behavior of the StandardValidator.
	// * / StandardValidator:
	//	{StandardNotNullValidator} "NotNullValidator" ("(" params+=ValidatorMessageParam? ")")? | {StandardRegExValidator}
	//	"RegExValidator" "(" params+=RegExValidatorParam ("," params+=RegExValidatorParam)* ")" |
	//	{StandardNumberRangeValidator} "NumberRangeValidator" "(" params+=NumberRangeValidatorParam (","
	//	params+=NumberRangeValidatorParam)* ")" | {StandardStringRangeValidator} "StringRangeValidator" "("
	//	params+=StringRangeValidatorParam ("," params+=StringRangeValidatorParam)* ")" | {StandardDateRangeValidator}
	//	"DateRangeValidator" "(" params+=DateRangeValidatorParam ("," params+=DateRangeValidatorParam)* ")" |
	//	{StandardTimeRangeValidator} "TimeRangeValidator" "(" params+=TimeRangeValidatorParam (","
	//	params+=TimeRangeValidatorParam)* ")" | {StandardDateTimeRangeValidator} "DateTimeRangeValidator" "("
	//	params+=DateTimeRangeValidatorParam ("," params+=DateTimeRangeValidatorParam)* ")";
	public StandardValidatorElements getStandardValidatorAccess() {
		return pStandardValidator;
	}
	
	public ParserRule getStandardValidatorRule() {
		return getStandardValidatorAccess().getRule();
	}

	/// *
	// * The RemoteValidator allows to use a Validator offered by the backend server.
	// * 
	// * By default only the content and id of the field on which the RemoteValidator has been assigned
	// * are transmitted to the backend server. However, additional information can be provided using the
	// * provideModel or provideAttributes keyword.
	// * / RemoteValidator:
	//	"RemoteValidator" name=EID "{" (params+=ValidatorMessageParam? & ("connection" connection=[RemoteConnection])? &
	//	("model" contentProvider=ContentProviderReference | "attributes" provideAttributes+=ContentProviderPath+)) "}";
	public RemoteValidatorElements getRemoteValidatorAccess() {
		return pRemoteValidator;
	}
	
	public ParserRule getRemoteValidatorRule() {
		return getRemoteValidatorAccess().getRule();
	}

	/// *
	// * ValidatorParam is used to define a common super type of all specific ValidatorParams.
	// * 
	// * The ValidatorParam is not used in the language but will be used by the generators. Therefore
	// * it can be seen as a workaround to manipulate the meta model, that will be built by Xtext.
	// * / ValidatorParam:
	//	ValidatorMessageParam | RegExValidatorParam | NumberRangeValidatorParam | StringRangeValidatorParam |
	//	DateRangeValidatorParam | TimeRangeValidatorParam | DateTimeRangeValidatorParam;
	public ValidatorParamElements getValidatorParamAccess() {
		return pValidatorParam;
	}
	
	public ParserRule getValidatorParamRule() {
		return getValidatorParamAccess().getRule();
	}

	/// *
	// * ValidatorMessageParam provides the possibility to define a message, that will be shown to the
	// * user if the validation fails.
	// * / ValidatorMessageParam:
	//	"message" message=SimpleExpression;
	public ValidatorMessageParamElements getValidatorMessageParamAccess() {
		return pValidatorMessageParam;
	}
	
	public ParserRule getValidatorMessageParamRule() {
		return getValidatorMessageParamAccess().getRule();
	}

	/// *
	// * The RegExValidatorParam allows the definition of a regular
	// * expression, that the validator uses to validate the user input.
	// * Additionally it contains the ValidatorMessageParam
	// * / RegExValidatorParam:
	//	ValidatorMessageParam | {ValidatorRegExParam} "regEx" regEx=STRING;
	public RegExValidatorParamElements getRegExValidatorParamAccess() {
		return pRegExValidatorParam;
	}
	
	public ParserRule getRegExValidatorParamRule() {
		return getRegExValidatorParamAccess().getRule();
	}

	/// *
	// * The NumberRangeValidatorParam allows the definition of
	// * a numeric range that shall contain the user input.
	// * Additionally it contains the ValidatorMessageParam
	// * / NumberRangeValidatorParam:
	//	ValidatorMessageParam | {ValidatorMaxParam} "max" max=FLOAT | {ValidatorMinParam} "min" min=FLOAT;
	public NumberRangeValidatorParamElements getNumberRangeValidatorParamAccess() {
		return pNumberRangeValidatorParam;
	}
	
	public ParserRule getNumberRangeValidatorParamRule() {
		return getNumberRangeValidatorParamAccess().getRule();
	}

	/// *
	// * The StringRangeValidatorParam allows the definition
	// * of a string length range. The length of the STRING
	// * input by the user will be checked against this range.
	// * Additionally it contains the ValidatorMessageParam
	// * / StringRangeValidatorParam:
	//	ValidatorMessageParam | {ValidatorMaxLengthParam} "maxLength" maxLength=INT | {ValidatorMinLengthParam} "minLength"
	//	minLength=INT;
	public StringRangeValidatorParamElements getStringRangeValidatorParamAccess() {
		return pStringRangeValidatorParam;
	}
	
	public ParserRule getStringRangeValidatorParamRule() {
		return getStringRangeValidatorParamAccess().getRule();
	}

	/// *
	// * Allows the definition of the earliest / latest valid date.
	// * E.g. min "1900-01-01"
	// * / DateRangeValidatorParam:
	//	ValidatorMessageParam | {ValidatorMaxDateParam} "max" max=DATE | {ValidatorMinDateParam} "min" min=DATE;
	public DateRangeValidatorParamElements getDateRangeValidatorParamAccess() {
		return pDateRangeValidatorParam;
	}
	
	public ParserRule getDateRangeValidatorParamRule() {
		return getDateRangeValidatorParamAccess().getRule();
	}

	/// *
	// * Allows the definition of the earliest / latest valid point in time.
	// * E.g. min "03:00:00+02:00"
	// * / TimeRangeValidatorParam:
	//	ValidatorMessageParam | {ValidatorMaxTimeParam} "max" max=TIME | {ValidatorMinTimeParam} "min" min=TIME;
	public TimeRangeValidatorParamElements getTimeRangeValidatorParamAccess() {
		return pTimeRangeValidatorParam;
	}
	
	public ParserRule getTimeRangeValidatorParamRule() {
		return getTimeRangeValidatorParamAccess().getRule();
	}

	/// *
	// * Allows the definition of the earliest / latest valid point in time.
	// * E.g. min "1900-01-01T03:00:00+02:00"
	// * / DateTimeRangeValidatorParam:
	//	ValidatorMessageParam | {ValidatorMaxDateTimeParam} "max" max=DATE_TIME | {ValidatorMinDateTimeParam} "min"
	//	min=DATE_TIME;
	public DateTimeRangeValidatorParamElements getDateTimeRangeValidatorParamAccess() {
		return pDateTimeRangeValidatorParam;
	}
	
	public ParserRule getDateTimeRangeValidatorParamRule() {
		return getDateTimeRangeValidatorParamAccess().getRule();
	}

	///////////////////////////////////////
	//// Controller layer => Main
	///////////////////////////////////////
	/// *
	// * The Main object contains all basic information about the collection of apps.
	// * Each set of models must contain exactly one Main object.
	// * / Main:
	//	"main" "{" ("appVersion" appVersion=STRING & "modelVersion" modelVersion=STRING & "workflowManager"
	//	workflowManager=[RemoteConnection] & ("defaultConnection" defaultConnection=[RemoteConnection])? &
	//	("fileUploadConnection" fileUploadConnection=[RemoteConnection])?) "}";
	public MainElements getMainAccess() {
		return pMain;
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}

	///////////////////////////////////////////
	//// Controller layer => ContentProvider
	///////////////////////////////////////////
	/// *
	// * A ContentProvider stores an instance of a ModelElement or a SimpleDataType. It allows to
	// * CREATE_OR_UPDATE (save), READ (load) and DELETE (remove) the stored instance. By default all operation
	// * are allowed. A filter enables to query a subset of all saved instances. The providerType
	// * defines whether the instances shall be stored locally or remotely. The read-only attribute specifies
	// * to which fields this content provider can be mapped (if read-only it can only be mapped to none-input fields
	// * such as label or tooltip).
	// * / ContentProvider:
	//	"contentProvider" type=DataType name=EID "{" ("providerType" (default?="default" | local?="local" |
	//	connection=[RemoteConnection]) & (filter?="filter" filterType=FilterType ("where"
	//	whereClause=WhereClauseCondition)?)? & ("readonly" (readonly?="true" | "false"))?) "}";
	public ContentProviderElements getContentProviderAccess() {
		return pContentProvider;
	}
	
	public ParserRule getContentProviderRule() {
		return getContentProviderAccess().getRule();
	}

	/// *
	// * The RemoteConnection allows to specify the connection to a backend server.
	// * / RemoteConnection:
	//	"remoteConnection" name=EID "{" ("uri" uri=STRING & ("password" password=STRING)? & ("user" user=STRING)? & ("key"
	//	key=STRING)? & ("storagePath" storagePath=STRING)?) "}";
	public RemoteConnectionElements getRemoteConnectionAccess() {
		return pRemoteConnection;
	}
	
	public ParserRule getRemoteConnectionRule() {
		return getRemoteConnectionAccess().getRule();
	}

	/// *
	// * DataType allows to refer to an already defined
	// * ModelElement or to use a SimpleDataType.
	// * / DataType:
	//	({ReferencedModelType} entity=[ModelElement|QUALIFIED_NAME] | {SimpleType} type=SimpleDataType) many?=BRACKETS?;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	/// *
	// * A SimpleDataTypeWrapper wraps a SimpleDataType.
	// * This is used to store the chosen SimpleDataType
	// * of the list of possible SimpleDataTypes.
	// * / SimpleDataTypeWrapper:
	//	type=SimpleDataType;
	public SimpleDataTypeWrapperElements getSimpleDataTypeWrapperAccess() {
		return pSimpleDataTypeWrapper;
	}
	
	public ParserRule getSimpleDataTypeWrapperRule() {
		return getSimpleDataTypeWrapperAccess().getRule();
	}

	/// *
	// * SimpleDataType lists all possible SimpleDataTypes.
	// * / enum SimpleDataType:
	//	INTEGER="integer" | FLOAT="float" | STRING="string" | BOOLEAN="boolean" | DATE="date" | TIME="time" |
	//	DATE_TIME="datetime";
	public SimpleDataTypeElements getSimpleDataTypeAccess() {
		return unknownRuleSimpleDataType;
	}
	
	public EnumRule getSimpleDataTypeRule() {
		return getSimpleDataTypeAccess().getRule();
	}

	/// *
	// * AllowedOperation lists all possible AllowedOperations.
	// * / enum AllowedOperation:
	//	CREATE_OR_UPDATE="save" | READ="load" | DELETE="remove";
	public AllowedOperationElements getAllowedOperationAccess() {
		return unknownRuleAllowedOperation;
	}
	
	public EnumRule getAllowedOperationRule() {
		return getAllowedOperationAccess().getRule();
	}

	/// *
	// * The FilterType lists all possible types of filters.
	// * / enum FilterType:
	//	ALL="all" | FIRST="first";
	public FilterTypeElements getFilterTypeAccess() {
		return unknownRuleFilterType;
	}
	
	public EnumRule getFilterTypeRule() {
		return getFilterTypeAccess().getRule();
	}

	////////////////////////////////////////////////////////////////
	//// Controller layer => ContentProvider => Filter Conditions
	////////////////////////////////////////////////////////////////
	/// *
	// * The WhereClauseCondition allows to composite criteria that
	// * have to be fulfilled by instances to be loaded.
	// * / WhereClauseCondition:
	//	WhereClauseOr;
	public WhereClauseConditionElements getWhereClauseConditionAccess() {
		return pWhereClauseCondition;
	}
	
	public ParserRule getWhereClauseConditionRule() {
		return getWhereClauseConditionAccess().getRule();
	}

	/// **
	// * Representation of an arbitrary number of conditional expressions connected by OR.
	// * Explicitly model precedence of AND over OR.
	// * / WhereClauseOr returns WhereClauseConditionalExpression:
	//	WhereClauseAnd ({WhereClauseOr.leftExpression=current} OP_CONDITION_OR rightExpression=WhereClauseAnd)*;
	public WhereClauseOrElements getWhereClauseOrAccess() {
		return pWhereClauseOr;
	}
	
	public ParserRule getWhereClauseOrRule() {
		return getWhereClauseOrAccess().getRule();
	}

	/// **
	// * Representation of an arbitrary number of conditional expressions connected by AND.
	// * Explicitly model precedence of AND over OR.
	// * / WhereClauseAnd returns WhereClauseConditionalExpression:
	//	WhereClauseConditionalExpression ({WhereClauseAnd.leftExpression=current} OP_CONDITION_AND
	//	rightExpression=WhereClauseConditionalExpression)*;
	public WhereClauseAndElements getWhereClauseAndAccess() {
		return pWhereClauseAnd;
	}
	
	public ParserRule getWhereClauseAndRule() {
		return getWhereClauseAndAccess().getRule();
	}

	/// *
	// * The WhereClauseCondition summarizes all possible criteria that
	// * have to be fulfilled by instances to be loaded. It resolves to
	// * a WhereClauseCondition and is required to allow recursive definition.
	// * / WhereClauseConditionalExpression:
	//	"(" WhereClauseOr ")" | {WhereClauseNot} OP_CONDITION_NOT expression=WhereClauseConditionalExpression |
	//	{WhereClauseCompareExpression} eqLeft=EntityPath op=Operator eqRight=SimpleExpression;
	public WhereClauseConditionalExpressionElements getWhereClauseConditionalExpressionAccess() {
		return pWhereClauseConditionalExpression;
	}
	
	public ParserRule getWhereClauseConditionalExpressionRule() {
		return getWhereClauseConditionalExpressionAccess().getRule();
	}

	////////////////////////////////////////////////////////////////
	//// Controller layer => ContentProvider => References
	////////////////////////////////////////////////////////////////
	/// *
	// * Super class for all kind of content providers. Up to now just normal content providers
	// * and location content providers are supported.
	// * / AbstractProviderReference:
	//	ContentProviderReference | LocationProviderReference;
	public AbstractProviderReferenceElements getAbstractProviderReferenceAccess() {
		return pAbstractProviderReference;
	}
	
	public ParserRule getAbstractProviderReferenceRule() {
		return getAbstractProviderReferenceAccess().getRule();
	}

	/// *
	// * A reference to a normal content provider. Never, create direct cross-links to a content provider, as this
	// * rule provides the right formatting (colon in front of all content provider references)
	// * / ContentProviderReference:
	//	":" contentProvider=[ContentProvider|QUALIFIED_NAME];
	public ContentProviderReferenceElements getContentProviderReferenceAccess() {
		return pContentProviderReference;
	}
	
	public ParserRule getContentProviderReferenceRule() {
		return getContentProviderReferenceAccess().getRule();
	}

	/// *
	// * A 'virtual' content provider that can be used as it were a normal read-only content provider with the name 'location'
	// * that provides fields such as street, country etc. The formatting highlights the location keyword as it were a cross-reference.
	// * / LocationProviderReference:
	//	{LocationProviderReference} ":" "location";
	public LocationProviderReferenceElements getLocationProviderReferenceAccess() {
		return pLocationProviderReference;
	}
	
	public ParserRule getLocationProviderReferenceRule() {
		return getLocationProviderReferenceAccess().getRule();
	}

	////////////////////////////////////////////////////////////////
	//// Controller layer => ContentProvider => Pathes
	////////////////////////////////////////////////////////////////
	/// *
	// * PathDefinition is used to define a common super type of all specific PathDefinitions.
	// * 
	// * The PathDefinition is not used in the language but will be used by the generators. Therefore
	// * it can be seen as a workaround to manipulate the meta model, that will be built by Xtext.
	// * / PathDefinition:
	//	ContentProviderPath | EntityPath;
	public PathDefinitionElements getPathDefinitionAccess() {
		return pPathDefinition;
	}
	
	public ParserRule getPathDefinitionRule() {
		return getPathDefinitionAccess().getRule();
	}

	/// *
	// * The EntityPathDefinition defines
	// * a path to an attribute of an entity.
	// * / EntityPath:
	//	entityRef=[Entity] tail=PathTail;
	public EntityPathElements getEntityPathAccess() {
		return pEntityPath;
	}
	
	public ParserRule getEntityPathRule() {
		return getEntityPathAccess().getRule();
	}

	/// *
	// * Super class for normal content providers and fake content providers such as the location content provider.
	// * / AbstractContentProviderPath:
	//	ContentProviderPath | LocationProviderPath;
	public AbstractContentProviderPathElements getAbstractContentProviderPathAccess() {
		return pAbstractContentProviderPath;
	}
	
	public ParserRule getAbstractContentProviderPathRule() {
		return getAbstractContentProviderPathAccess().getRule();
	}

	/// *
	// * The ContentProviderPathDefinition defines a path to an attribute of
	// * an entity stored in a ContentProvider.
	// * / ContentProviderPath:
	//	":" contentProviderRef=[ContentProvider] tail=PathTail;
	public ContentProviderPathElements getContentProviderPathAccess() {
		return pContentProviderPath;
	}
	
	public ParserRule getContentProviderPathRule() {
		return getContentProviderPathAccess().getRule();
	}

	/// *
	// * The PathTail defines a recursive list of nested Attribute references.
	// * / PathTail:
	//	"." attributeRef=[Attribute] tail=PathTail?;
	public PathTailElements getPathTailAccess() {
		return pPathTail;
	}
	
	public ParserRule getPathTailRule() {
		return getPathTailAccess().getRule();
	}

	/// *
	// * The location provider is a fake content provider for location information that is read-only.
	// * Thus, it can only be mapped to read-only fields such as labels and tooltips.
	// * / LocationProviderPath:
	//	":" "location" "." locationField=LocationField;
	public LocationProviderPathElements getLocationProviderPathAccess() {
		return pLocationProviderPath;
	}
	
	public ParserRule getLocationProviderPathRule() {
		return getLocationProviderPathAccess().getRule();
	}

	/// *
	// * The LocationField lists all possible parts of a map/GPS position that are supported.
	// * / enum LocationField:
	//	LATITUDE="latitude" | LONGITUDE="longitude" | ALTITUDE="altitude" | CITY="city" | STREET="street" | NUMBER="number" |
	//	POSTAL_CODE="postalCode" | COUNTRY="country" | PROVINCE="province";
	public LocationFieldElements getLocationFieldAccess() {
		return unknownRuleLocationField;
	}
	
	public EnumRule getLocationFieldRule() {
		return getLocationFieldAccess().getRule();
	}

	///////////////////////////////////////////
	//// Controller layer => ProcessChains
	///////////////////////////////////////////
	/// *
	// * A ProcessChain is used to define several steps in which the
	// * application can currently be. It is possible to define
	// * several ProcessChains, ProcessChains can be nested and there
	// * is at most one ProcessChain active.
	// * / ProcessChain:
	//	"processChain" name=EID "{" processChainSteps+=ProcessChainStep* "}";
	public ProcessChainElements getProcessChainAccess() {
		return pProcessChain;
	}
	
	public ParserRule getProcessChainRule() {
		return getProcessChainAccess().getRule();
	}

	/// *
	// * Each ProcessChainStep defines one view that is related to it
	// * and will be displayed if the ProcessChainStep becomes the
	// * current ProcessChainStep of the active ProcessChain. Additionally
	// * conditions can be defined, that restrict switching to the
	// * next or previous ProcessChainStep. Also events can be
	// * specified that trigger the change to the next or previous
	// * ProcessChainStep. Instead of the former mentioned settings,
	// * a ProcessChain can be referred to that will become active
	// * while this ProcessChainStep is the current one.
	// * / ProcessChainStep:
	//	"step" name=EID ":" ("view" view=AbstractViewGUIElementRef & gotos+=ProcessChainGoToDefinition* & ("message"
	//	message=SimpleExpression)?);
	public ProcessChainStepElements getProcessChainStepAccess() {
		return pProcessChainStep;
	}
	
	public ParserRule getProcessChainStepRule() {
		return getProcessChainStepAccess().getRule();
	}

	//ProcessChainGoToDefinition:
	//	goto=ProcessChainGoTo spec=ProcessChainGoToSpec;
	public ProcessChainGoToDefinitionElements getProcessChainGoToDefinitionAccess() {
		return pProcessChainGoToDefinition;
	}
	
	public ParserRule getProcessChainGoToDefinitionRule() {
		return getProcessChainGoToDefinitionAccess().getRule();
	}

	//ProcessChainGoTo:
	//	{ProcessChainGoToNext} "proceed" | {ProcessChainGoToPrevious} "reverse" | {ProcessChainReturn} "return"
	//	(changeStep?="and" changeDirection=("proceed" | "reverse"))? | {ProcessChainGoToStep} "goto"
	//	processChainStep=[ProcessChainStep|QUALIFIED_NAME] ("(" "returnTo" returnTo=[ProcessChainStep|QUALIFIED_NAME] ")")?;
	public ProcessChainGoToElements getProcessChainGoToAccess() {
		return pProcessChainGoTo;
	}
	
	public ParserRule getProcessChainGoToRule() {
		return getProcessChainGoToAccess().getRule();
	}

	//ProcessChainGoToSpec:
	//	{ProcessChainGoToSpecShorthand} ("on" events+=EventDef+)? | {ProcessChainGoToSpecExtended} "{" (("on"
	//	events+=EventDef+)? & ("given" (condition=Condition | "{" condition=Condition "}"))? & ("then" action=ActionDef)?)
	//	"}";
	public ProcessChainGoToSpecElements getProcessChainGoToSpecAccess() {
		return pProcessChainGoToSpec;
	}
	
	public ParserRule getProcessChainGoToSpecRule() {
		return getProcessChainGoToSpecAccess().getRule();
	}

	///////////////////////////////////////////
	//// Controller layer => InvokeDefinitions
	///////////////////////////////////////////
	//InvokeDefinition:
	//	{InvokeDefinition} "invokable" ("at" path=STRING)? ("using" method=RESTMethod)? ("{" params+=InvokeParam+ "}")?;
	public InvokeDefinitionElements getInvokeDefinitionAccess() {
		return pInvokeDefinition;
	}
	
	public ParserRule getInvokeDefinitionRule() {
		return getInvokeDefinitionAccess().getRule();
	}

	//// Only contentProviderPaths are allowed since LocationProviders are readonly
	//InvokeParam:
	//	{InvokeWSParam} field=ContentProviderPath ("as" alias=EID)? | {InvokeDefaultValue} "default"
	//	field=ContentProviderPath "=" invokeValue=InvokeValue | {InvokeSetContentProvider} "set" field=ContentProviderPath
	//	"to" contentProvider=ContentProviderReference;
	public InvokeParamElements getInvokeParamAccess() {
		return pInvokeParam;
	}
	
	public ParserRule getInvokeParamRule() {
		return getInvokeParamAccess().getRule();
	}

	//InvokeValue:
	//	{InvokeStringValue} value=STRING | {InvokeIntValue} value=INT | {InvokeBooleanValue} value=Boolean |
	//	{InvokeDateValue} value=DATE | {InvokeTimeValue} value=TIME | {InvokeDateTimeValue} value=DATE_TIME |
	//	{InvokeFloatValue} value=FLOAT;
	public InvokeValueElements getInvokeValueAccess() {
		return pInvokeValue;
	}
	
	public ParserRule getInvokeValueRule() {
		return getInvokeValueAccess().getRule();
	}

	///////////////////////////////////////////////
	//// Controller layer => OnConditionEvent
	///////////////////////////////////////////////
	/// *
	// * The OnConditionEvent provides the user the possibility
	// * to define own events. The OnConditionEvent specifies a
	// * Condition. If this Condition is fulfilled, the
	// * OnConditionEvent is fired.
	// * / OnConditionEvent:
	//	"event" "OnConditionEvent" name=EID "{" condition=Condition "}";
	public OnConditionEventElements getOnConditionEventAccess() {
		return pOnConditionEvent;
	}
	
	public ParserRule getOnConditionEventRule() {
		return getOnConditionEventAccess().getRule();
	}

	///////////////////////////////////////////////
	//// Controller layer => Condition
	///////////////////////////////////////////////
	/// *
	// * A Condition allows to compose ConditionalExpressions with the operators 'not', 'and' and 'or'.
	// * / Condition returns ConditionalExpression:
	//	Or;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	/// **
	// * Representation of an arbitrary number of conditional expressions connected by OR.
	// * Explicitly model precedence of AND over OR.
	// * / Or returns ConditionalExpression:
	//	And ({Or.leftExpression=current} OP_CONDITION_OR rightExpression=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	/// **
	// * Representation of an arbitrary number of conditional expressions connected by AND.
	// * Explicitly model precedence of AND over OR.
	// * / And returns ConditionalExpression:
	//	ConditionalExpression ({And.leftExpression=current} OP_CONDITION_AND rightExpression=ConditionalExpression)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	/// *
	// * A ConditionalExpression defines an expression that evaluates to either true or false.
	// * It is possible to set a BooleanExpression, an EqualsExpression that compares to values,
	// * or a GuiElementStateExpression that proofs the state of a ViewGUIElement.
	// * / ConditionalExpression:
	//	"(" Or ")" | {Not} OP_CONDITION_NOT expression=ConditionalExpression | {BooleanExpression} value=Boolean | =>
	//	ComplexConditionalExpression;
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return pConditionalExpression;
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}

	//ComplexConditionalExpression returns ConditionalExpression:
	//	=> (AbstractViewGUIElementRef "is") {GuiElementStateExpression.reference=current} isState=ViewElementState |
	//	SimpleExpression {CompareExpression.eqLeft=current} op=Operator eqRight=SimpleExpression;
	public ComplexConditionalExpressionElements getComplexConditionalExpressionAccess() {
		return pComplexConditionalExpression;
	}
	
	public ParserRule getComplexConditionalExpressionRule() {
		return getComplexConditionalExpressionAccess().getRule();
	}

	/// *
	// * ViewElementState lists all possible ViewElementStates.
	// * / enum ViewElementState:
	//	VALID="valid" | EMPTY="empty" | SET="set" | DEFAULT_VALUE="defaultValue" | DISABLED="disabled" | ENABLED="enabled";
	public ViewElementStateElements getViewElementStateAccess() {
		return unknownRuleViewElementState;
	}
	
	public EnumRule getViewElementStateRule() {
		return getViewElementStateAccess().getRule();
	}

	/// *
	// * A SimpleExpression contains either a simple data type value of STRING, INT,
	// * FLOAT, DATE, TIME, DATE_TIME or a reference to the value of a ViewGUIElement
	// * or a reference to an attribute of an entity that is managed by a content provider.
	// * Furthermore, it can be a mathematical expression or a string concatenation. Validators
	// * have to be implemented to ensure that all assignments match the data type of the
	// * target (input field / content provider).
	// * / SimpleExpression:
	//	ConcatenatedString;
	public SimpleExpressionElements getSimpleExpressionAccess() {
		return pSimpleExpression;
	}
	
	public ParserRule getSimpleExpressionRule() {
		return getSimpleExpressionAccess().getRule();
	}

	///////////////////////////////////////////////
	//// Controller Layer =>  Web Services
	///////////////////////////////////////////////
	//WebServiceCall:
	//	"externalWebService" name=EID "{" ("url" url=STRING & "method" method=RESTMethod & ("queryparams" "("
	//	queryparams+=RESTParam* ")")? & ("bodyparams" "(" bodyparams+=RESTParam* ")")?) "}";
	public WebServiceCallElements getWebServiceCallAccess() {
		return pWebServiceCall;
	}
	
	public ParserRule getWebServiceCallRule() {
		return getWebServiceCallAccess().getRule();
	}

	//RESTParam:
	//	key=STRING ":" value=RESTValue;
	public RESTParamElements getRESTParamAccess() {
		return pRESTParam;
	}
	
	public ParserRule getRESTParamRule() {
		return getRESTParamAccess().getRule();
	}

	//RESTValue:
	//	{StringRestParam} value=STRING | {IntegerRestParam} value=INT | {BooleanRestParam} value=Boolean | {FloatRestParam}
	//	value=FLOAT | {ContentProviderRestParam} value=ContentProviderPath;
	public RESTValueElements getRESTValueAccess() {
		return pRESTValue;
	}
	
	public ParserRule getRESTValueRule() {
		return getRESTValueAccess().getRule();
	}

	//// POST as default for InvokeDefinition
	//enum RESTMethod:
	//	POST | GET | PUT | DELETE;
	public RESTMethodElements getRESTMethodAccess() {
		return unknownRuleRESTMethod;
	}
	
	public EnumRule getRESTMethodRule() {
		return getRESTMethodAccess().getRule();
	}

	///////////////////////////////////////////////
	//// Controller Layer => Concatenated String
	///////////////////////////////////////////////
	/// **
	// * Each Value has a string representation:
	// * <ul>
	// *   <li>INT: 1 => "1"</li>
	// *   <li>FLOAT: 1.0 => "1.0"</li>
	// *   <li>STRING: "str" => "str"</li>
	// *   <li>BOOLEAN: true => "true"</li>
	// *   <li>DATE: 2000-01-01 => "2000-01-01"</li>
	// *   <li>TIME: 00:00:00Z => "00:00:00Z"</li>
	// *   <li>DATE_TIME: 2000-01-01T00:00:00Z => "2000-01-01T00:00:00Z"</li>
	// *   <li>Entity => "Entity"</li>
	// * </ul>
	// * 
	// * TODO - consider to use a human readable format for the string representation of DATE, TIME and DATE_TIME
	// * / ConcatenatedString returns SimpleExpression:
	//	StringPartial ({ConcatenatedString.leftString=current} OP_STRING_CONCAT rightString=StringPartial)*;
	public ConcatenatedStringElements getConcatenatedStringAccess() {
		return pConcatenatedString;
	}
	
	public ParserRule getConcatenatedStringRule() {
		return getConcatenatedStringAccess().getRule();
	}

	//StringPartial returns SimpleExpression:
	//	MathExpression | "(" ConcatenatedString ")" | {StringVal} value=STRING | {BooleanVal} value=Boolean | {DateVal}
	//	value=DATE | {TimeVal} value=TIME | {DateTimeVal} value=DATE_TIME;
	public StringPartialElements getStringPartialAccess() {
		return pStringPartial;
	}
	
	public ParserRule getStringPartialRule() {
		return getStringPartialAccess().getRule();
	}

	///////////////////////////////////////////////
	//// Controller Layer => Math Expressions
	///////////////////////////////////////////////
	//MathLiteral returns SimpleExpression:
	//	AbstractContentProviderPath | AbstractProviderReference | AbstractViewGUIElementRef | {IntVal} value=INT | {FloatVal}
	//	value=FLOAT;
	public MathLiteralElements getMathLiteralAccess() {
		return pMathLiteral;
	}
	
	public ParserRule getMathLiteralRule() {
		return getMathLiteralAccess().getRule();
	}

	//AdditionSubtraction returns SimpleExpression:
	//	MultiplicationDivision (({Plus.leftOperand=current} OP_MATH_PLUS | {Minus.leftOperand=current} OP_MATH_MINUS)
	//	rightOperand=MultiplicationDivision)*;
	public AdditionSubtractionElements getAdditionSubtractionAccess() {
		return pAdditionSubtraction;
	}
	
	public ParserRule getAdditionSubtractionRule() {
		return getAdditionSubtractionAccess().getRule();
	}

	//MultiplicationDivision returns SimpleExpression:
	//	MathSubExpression (({Mult.leftOperand=current} OP_MATH_MULT | {Div.leftOperand=current} OP_MATH_DIV)
	//	rightOperand=MathSubExpression)*;
	public MultiplicationDivisionElements getMultiplicationDivisionAccess() {
		return pMultiplicationDivision;
	}
	
	public ParserRule getMultiplicationDivisionRule() {
		return getMultiplicationDivisionAccess().getRule();
	}

	//MathSubExpression returns SimpleExpression:
	//	MathLiteral | "(" AdditionSubtraction ")";
	public MathSubExpressionElements getMathSubExpressionAccess() {
		return pMathSubExpression;
	}
	
	public ParserRule getMathSubExpressionRule() {
		return getMathSubExpressionAccess().getRule();
	}

	//MathExpression returns SimpleExpression:
	//	AdditionSubtraction;
	public MathExpressionElements getMathExpressionAccess() {
		return pMathExpression;
	}
	
	public ParserRule getMathExpressionRule() {
		return getMathExpressionAccess().getRule();
	}

	///////////////////////////////////////
	///////////////////////////////////////
	//// Model layer
	///////////////////////////////////////
	///////////////////////////////////////
	/// *
	// * The root Model element that contains all ModelElements.
	// * / Model:
	//	modelElements+=ModelElement+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	/// *
	// * The ModelElement is the super type of all possible ModelElements.
	// * / ModelElement:
	//	Entity | Enum;
	public ModelElementElements getModelElementAccess() {
		return pModelElement;
	}
	
	public ParserRule getModelElementRule() {
		return getModelElementAccess().getRule();
	}

	/// *
	// * An Enum allows the user to define a list of STRING values, stored
	// * in the enumBody.
	// * / Enum:
	//	"enum" name=EID "{" enumBody=EnumBody? "}";
	public EnumElements getEnumAccess() {
		return pEnum;
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}

	/// *
	// * An EnumBody allows the user to define a list of STRING values.
	// * / EnumBody:
	//	elements+=STRING ("," elements+=STRING)*;
	public EnumBodyElements getEnumBodyAccess() {
		return pEnumBody;
	}
	
	public ParserRule getEnumBodyRule() {
		return getEnumBodyAccess().getRule();
	}

	/// *
	// * An Entity allows the user to define a type,
	// * that will be used as data transfer object.
	// * The user can provide a list of Attributes.
	// * / Entity:
	//	"entity" name=EID "{" attributes+=Attribute* "}";
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	/// *
	// * Each Attribute has a name and an AttributeType.
	// * Additionally the user can provide further
	// * information to an Attribute, namely an
	// * extendedName and a description. These further
	// * information will be used by the
	// * AutoGeneratedContentElement to generate a
	// * label and a tooltip.
	// * / Attribute:
	//	name=EID ":" type=AttributeType ("{" ("name" extendedName=STRING)? ("description" description=STRING)? "}")?;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	/// *
	// * AttributeType is the super type of all possible AttributeTypes.
	// * These can be besides SimpleDataTypes a references to an already
	// * defined ModelElement or an implicit Enum declaration.
	// * / AttributeType:
	//	{ReferencedType} element=[ModelElement|QUALIFIED_NAME] many?=BRACKETS? ("(" (params+=ReferencedTypeParam (","
	//	params+=ReferencedTypeParam)*)? ")")? | {IntegerType} "integer" many?=BRACKETS? ("(" (params+=IntegerTypeParam (","
	//	params+=IntegerTypeParam)*)? ")")? | {FloatType} "float" many?=BRACKETS? ("(" (params+=FloatTypeParam (","
	//	params+=FloatTypeParam)*)? ")")? | {StringType} "string" many?=BRACKETS? ("(" (params+=StringTypeParam (","
	//	params+=StringTypeParam)*)? ")")? | {BooleanType} "boolean" many?=BRACKETS? ("(" (params+=BooleanTypeParam (","
	//	params+=BooleanTypeParam)*)? ")")? | {DateType} "date" many?=BRACKETS? ("(" (params+=DateTypeParam (","
	//	params+=DateTypeParam)*)? ")")? | {TimeType} "time" many?=BRACKETS? ("(" (params+=TimeTypeParam (","
	//	params+=TimeTypeParam)*)? ")")? | {DateTimeType} "datetime" many?=BRACKETS? ("(" (params+=DateTimeTypeParam (","
	//	params+=DateTimeTypeParam)*)? ")")? | {FileType} "file" many?=BRACKETS? ("(" (params+=FileTypeParam (","
	//	params+=FileTypeParam)*)? ")")? | // EnumType => Transformed to explicit Enum (=> ReferencedType) after preprocessing
	//	{EnumType} "{" enumBody=EnumBody? "}" many?=BRACKETS? ("(" (params+=EnumTypeParam ("," params+=EnumTypeParam)*)? ")")?;
	public AttributeTypeElements getAttributeTypeAccess() {
		return pAttributeType;
	}
	
	public ParserRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}

	/// *
	// * The parser rule BRACKETS defines how square brackets look like.
	// * BRACKETS can be annotated to an AttributeType to declare the
	// * Attribute to have a one to many relation.
	// * / BRACKETS:
	//	"[" "]";
	public BRACKETSElements getBRACKETSAccess() {
		return pBRACKETS;
	}
	
	public ParserRule getBRACKETSRule() {
		return getBRACKETSAccess().getRule();
	}

	///////////////////////////////////////
	//// Attribute parameter definitions
	///////////////////////////////////////
	/// *
	// * AttributeTypeParam is used to define a common super type of all specific AttributeTypeParams.
	// * 
	// * The AttributeTypeParam is not used in the language but will be used by the generators. Therefore
	// * it can be seen as a workaround to manipulate the meta model, that will be built by Xtext.
	// * / AttributeTypeParam:
	//	ReferencedTypeParam | IntegerTypeParam | FloatTypeParam | StringTypeParam | BooleanTypeParam | DateTypeParam |
	//	TimeTypeParam | DateTimeTypeParam | EnumTypeParam | FileTypeParam;
	public AttributeTypeParamElements getAttributeTypeParamAccess() {
		return pAttributeTypeParam;
	}
	
	public ParserRule getAttributeTypeParamRule() {
		return getAttributeTypeParamAccess().getRule();
	}

	/// *
	// * ReferencedTypeParam is a super type of all possible parameters of referenced Attributes.
	// * The value being optional is the only parameter. This parameter will be used to generate a validator.
	// * 
	// * The parser cannot distinguish cross-references to different parsing rules.
	// * Thus, it is necessary to link the common super type ModelElement. Validators have to assure that
	// * enum specific parameters cannot be assigned to referenced entities and vice versa.
	// * / ReferencedTypeParam:
	//	{AttrIsOptional} optional?="optional" | {AttrEnumDefault} "default" value= // enum specific
	//	STRING;
	public ReferencedTypeParamElements getReferencedTypeParamAccess() {
		return pReferencedTypeParam;
	}
	
	public ParserRule getReferencedTypeParamRule() {
		return getReferencedTypeParamAccess().getRule();
	}

	/// *
	// * IntegerTypeParam is a super type of all
	// * possible parameters of integer Attributes.
	// * Besides the value being optional, it is
	// * possible to mark it as the identifier of
	// * the entity and to provide a minimum and
	// * a maximum value. These parameters will
	// * be used to generate validators.
	// * / IntegerTypeParam:
	//	{AttrIsOptional} optional?="optional" | {AttrIdentifier} identifier?="identifier" | {AttrIntDefault} "default"
	//	value=INT | {AttrIntMax} "max" max=INT | {AttrIntMin} "min" min=INT;
	public IntegerTypeParamElements getIntegerTypeParamAccess() {
		return pIntegerTypeParam;
	}
	
	public ParserRule getIntegerTypeParamRule() {
		return getIntegerTypeParamAccess().getRule();
	}

	/// *
	// * FloatTypeParam is a super type of all possible
	// * parameters of float Attributes. Besides
	// * the value being optional, it is possible
	// * to provide a minimum and a maximum value.
	// * These parameters will be used to generate validators.
	// * / FloatTypeParam:
	//	{AttrIsOptional} optional?="optional" | {AttrFloatDefault} "default" value=FLOAT | {AttrFloatMax} "max" max=FLOAT |
	//	{AttrFloatMin} "min" min=FLOAT;
	public FloatTypeParamElements getFloatTypeParamAccess() {
		return pFloatTypeParam;
	}
	
	public ParserRule getFloatTypeParamRule() {
		return getFloatTypeParamAccess().getRule();
	}

	/// *
	// * StringTypeParam is a super type of all possible
	// * parameters of string Attributes. Besides the
	// * value being optional, it is possible to mark
	// * it as the identifier of the entity and to
	// * provide a minimum and a maximum string length.
	// * These parameters will be used to generate validators.
	// * / StringTypeParam:
	//	{AttrIsOptional} optional?="optional" | {AttrIdentifier} identifier?="identifier" | {AttrStringDefault} "default"
	//	value=STRING | {AttrStringMax} "maxLength" max=INT | {AttrStringMin} "minLength" min=INT;
	public StringTypeParamElements getStringTypeParamAccess() {
		return pStringTypeParam;
	}
	
	public ParserRule getStringTypeParamRule() {
		return getStringTypeParamAccess().getRule();
	}

	/// *
	// * BooleanTypeParam is a super type of all
	// * possible parameters of boolean Attributes.
	// * The value being optional is the only
	// * parameter. This parameter will be used
	// * to generate a validator.
	// * / BooleanTypeParam:
	//	{AttrIsOptional} optional?="optional" | {AttrBooleanDefault} "default" value=Boolean;
	public BooleanTypeParamElements getBooleanTypeParamAccess() {
		return pBooleanTypeParam;
	}
	
	public ParserRule getBooleanTypeParamRule() {
		return getBooleanTypeParamAccess().getRule();
	}

	/// *
	// * FileTypeParam is a super type of all
	// * possible parameters of file Attributes.
	// * The value being optional is the only
	// * parameter.
	// * / FileTypeParam:
	//	{AttrIsOptional} optional?="optional";
	public FileTypeParamElements getFileTypeParamAccess() {
		return pFileTypeParam;
	}
	
	public ParserRule getFileTypeParamRule() {
		return getFileTypeParamAccess().getRule();
	}

	/// *
	// * DateTypeParam is a super type of all
	// * possible parameters of date Attributes.
	// * Besides the value being optional, it
	// * is possible to provide a minimum and a
	// * maximum value. These parameters will
	// * be used to generate validators.
	// * / DateTypeParam:
	//	{AttrIsOptional} optional?="optional" | {AttrDateDefault} "default" value=DATE | {AttrDateMax} "max" max=DATE |
	//	{AttrDateMin} "min" min=DATE;
	public DateTypeParamElements getDateTypeParamAccess() {
		return pDateTypeParam;
	}
	
	public ParserRule getDateTypeParamRule() {
		return getDateTypeParamAccess().getRule();
	}

	/// *
	// * TimeTypeParam is a super type of all
	// * possible parameters of time Attributes.
	// * Besides the value being optional, it
	// * is possible to provide a minimum and a
	// * maximum value. These parameters will
	// * be used to generate validators.
	// * / TimeTypeParam:
	//	{AttrIsOptional} optional?="optional" | {AttrTimeDefault} "default" value=TIME | {AttrTimeMax} "max" max=TIME |
	//	{AttrTimeMin} "min" min=TIME;
	public TimeTypeParamElements getTimeTypeParamAccess() {
		return pTimeTypeParam;
	}
	
	public ParserRule getTimeTypeParamRule() {
		return getTimeTypeParamAccess().getRule();
	}

	/// *
	// * DateTimeTypeParam is a super type of
	// * all possible parameters of datetime
	// * Attributes. Besides the value being
	// * optional, it is possible to provide
	// * a minimum and a maximum value. These
	// * parameters will be used to generate
	// * validators.
	// * / DateTimeTypeParam:
	//	{AttrIsOptional} optional?="optional" | {AttrDateTimeDefault} "default" value=DATE_TIME | {AttrDateTimeMax} "max"
	//	max=DATE_TIME | {AttrDateTimeMin} "min" min=DATE_TIME;
	public DateTimeTypeParamElements getDateTimeTypeParamAccess() {
		return pDateTimeTypeParam;
	}
	
	public ParserRule getDateTimeTypeParamRule() {
		return getDateTimeTypeParamAccess().getRule();
	}

	/// *
	// * ReferencedTypeParam is a super type of all possible parameters of referenced
	// * Attributes. The value being optional is the only parameter. This parameter
	// * will be used to generate a validator.
	// * / EnumTypeParam:
	//	{AttrIsOptional} optional?="optional" | {AttrEnumDefault} "default" value=STRING;
	public EnumTypeParamElements getEnumTypeParamAccess() {
		return pEnumTypeParam;
	}
	
	public ParserRule getEnumTypeParamRule() {
		return getEnumTypeParamAccess().getRule();
	}

	///////////////////////////////////////
	///////////////////////////////////////
	//// New Workflow Concept
	///////////////////////////////////////
	///////////////////////////////////////
	/// *
	// * A workflow allows to construct multiple applications based on WorkflowElements and to specify apps that
	// * consist of these workflowelements.
	// * / Workflow:
	//	workflowElementEntries+=WorkflowElementEntry+ & apps+=App+;
	public WorkflowElements getWorkflowAccess() {
		return pWorkflow;
	}
	
	public ParserRule getWorkflowRule() {
		return getWorkflowAccess().getRule();
	}

	/// *
	// * WorkflowElements provide reusable functionality across applications.
	// * They allow the construction of a directed graph via events. For every event,
	// * 0 to n Workflowelements can be started
	// * / WorkflowElementEntry:
	//	"WorkflowElement" workflowElement=[WorkflowElement] ("(" invokable?="invokable" eventDesc=STRING? ")")?
	//	firedEvents+=FireEventEntry+;
	public WorkflowElementEntryElements getWorkflowElementEntryAccess() {
		return pWorkflowElementEntry;
	}
	
	public ParserRule getWorkflowElementEntryRule() {
		return getWorkflowElementEntryAccess().getRule();
	}

	//FireEventEntry:
	//	"fires" event=[WorkflowEvent] "{" ("start" startedWorkflowElement=[WorkflowElement] | "end" endWorkflow?="workflow")
	//	"}";
	public FireEventEntryElements getFireEventEntryAccess() {
		return pFireEventEntry;
	}
	
	public ParserRule getFireEventEntryRule() {
		return getFireEventEntryAccess().getRule();
	}

	/// *
	// *  Workflowevents are used for the navigation in the graph of workflowelements
	// * / WorkflowEvent:
	//	name=EID;
	public WorkflowEventElements getWorkflowEventAccess() {
		return pWorkflowEvent;
	}
	
	public ParserRule getWorkflowEventRule() {
		return getWorkflowEventAccess().getRule();
	}

	/// *
	// * The application bundles multiple workflow elements and describes general app information.
	// * / App:
	//	"App" name=EID "{" ("WorkflowElements" "{" workflowElements+=WorkflowElementReference (","
	//	workflowElements+=WorkflowElementReference)* "}") & "appName" appName=STRING & ("defaultConnection"
	//	defaultConnection=[RemoteConnection])? "}";
	public AppElements getAppAccess() {
		return pApp;
	}
	
	public ParserRule getAppRule() {
		return getAppAccess().getRule();
	}

	/// *
	// * When referenced in an App, WorkflowElements can be specified as startable from the application's start screen.
	// * The alias determines the corresponding button label.
	// * / WorkflowElementReference:
	//	workflowElementReference=[WorkflowElement] ("(" startable?="startable:" alias=STRING ")")?;
	public WorkflowElementReferenceElements getWorkflowElementReferenceAccess() {
		return pWorkflowElementReference;
	}
	
	public ParserRule getWorkflowElementReferenceRule() {
		return getWorkflowElementReferenceAccess().getRule();
	}

	///////////////////////////////////////
	///////////////////////////////////////
	//// Terminal and data type rules
	///////////////////////////////////////
	///////////////////////////////////////
	/// **
	// * Definition of a date. A string that conforms of the following format is expected:
	// * YYYY-MM-DD
	// * / DATE returns ecore::EDate:
	//	DATE_FORMAT;
	public DATEElements getDATEAccess() {
		return pDATE;
	}
	
	public ParserRule getDATERule() {
		return getDATEAccess().getRule();
	}

	/// **
	// * Definition of the time. A string that conforms of the following format is expected:
	// * hh:mm:ss[(+|-)hh[:mm]] or hh:mm:ss[Z]
	// * / TIME returns ecore::EDate:
	//	TIME_FORMAT;
	public TIMEElements getTIMEAccess() {
		return pTIME;
	}
	
	public ParserRule getTIMERule() {
		return getTIMEAccess().getRule();
	}

	/// **
	// * Definition of date and time. A string that conforms ISO 8601 is expected.
	// * YYYY-MM-DDThh:mm:ss[(+|-)hh[:mm]] or
	// * YYYY-MM-DDThh:mm:ss[Z]
	// * / DATE_TIME returns ecore::EDate:
	//	DATE_TIME_FORMAT;
	public DATE_TIMEElements getDATE_TIMEAccess() {
		return pDATE_TIME;
	}
	
	public ParserRule getDATE_TIMERule() {
		return getDATE_TIMEAccess().getRule();
	}

	/// **
	// * Float #.#
	// * / FLOAT returns ecore::EDouble:
	//	INT "." INT;
	public FLOATElements getFLOATAccess() {
		return pFLOAT;
	}
	
	public ParserRule getFLOATRule() {
		return getFLOATAccess().getRule();
	}

	/// **
	// * Percent #%
	// * / PERCENT returns ecore::EInt:
	//	INT "%";
	public PERCENTElements getPERCENTAccess() {
		return pPERCENT;
	}
	
	public ParserRule getPERCENTRule() {
		return getPERCENTAccess().getRule();
	}

	/// *
	// * Extended, keyword insensitive ID. Using the EID allows to use a known keyword as an ID.
	// * 
	// * TODO Find all keywords that do not break the grammar
	// * / //'action' | 'actions' |
	////'silent' | 'event' | 'valid' | 'empty' | 'filled' | 'enum' | 'entity' | 'name' |
	////'description' | 'optional' | 'tabTitle' | 'tabIcon' | 
	////'displayAll' | 'fontSize' | 'color' | 'textStyle' | 
	////	'only' | 'style' | 'text' | 'height' | 'width' |
	////	'src' | 'columns' | 'rows' | 'horizontal' | 'vertical' |
	////	'onRightSwipe' | 'onWrongValidation' | 'onConnectionLost' | 'validator' |
	////	'connection' | 'model' | 'attributes' | 'message' | 'format' | 'regEx' | 'max' | 'min' |
	////	'maxLength' | 'minLength' | 'main' | 'appName' | 'appVersion' | 'defaultConnection' | 'startView' | 'modelVersion' |
	////	'uri' | 'password' | 'user' | 'key' |
	////	'cache' | 'providerType' | 'local' | 'filter' | 'where' | 'allowedOperations' | 'first' | 
	////	'save' | 'load' | 'remove' | 'processChain' | 'step' |
	////	'forwardMessage' | 'backwardMessage' | 'validator' | 'validators' | 
	////	'unbind' | 'map' | 'unmap' | 'all' | 'call' | 'onTouch' | 'onLeftSwipe' | 'use' | 'for' | 'to' | 'bind' | 'on' | 'from'
	////	'forwardCondition' | 'forwardOnEvent' | 'backwardCondition' | 'backwardOnEvent' |'view' | 'onInitialized' | 'defaultProcessChain' | 
	////	'integer' | 'float' | 'string' | 'boolean' | 'date' | 'time' | 'timestamp' | 'remoteConnection' |  'contentProvider' |
	//EID: //location content provider fields
	//	"latitude" | "longitude" | "altitude" | "city" | "street" | "number" | "postalCode" | "country" | "province" | // font styles
	//	"bold" | "italic" | "normal" | // colors
	//	"aqua" | "black" | "blue" | "gray" | "green" | "lime" | "maroon" | "navy" | "olive" | "purple" | "red" | "silver" |
	//	"white" | "yellow" | // other keywords
	//	"Location" | // arbitrary ID
	//	ID;
	public EIDElements getEIDAccess() {
		return pEID;
	}
	
	public ParserRule getEIDRule() {
		return getEIDAccess().getRule();
	}

	/// **
	// * Qualified names of the form
	// * <code>ID (.ID)*</code>
	// * / QUALIFIED_NAME:
	//	EID ("." EID)*;
	public QUALIFIED_NAMEElements getQUALIFIED_NAMEAccess() {
		return pQUALIFIED_NAME;
	}
	
	public ParserRule getQUALIFIED_NAMERule() {
		return getQUALIFIED_NAMEAccess().getRule();
	}

	/// **
	// * Override default terminal rule ID to not allow two underscores (__) at the beginning of the ID
	// * as such IDs are used internally by the pre-processor.
	// * / terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") (("a".."z" | "A".."Z" | "0".."9") ("a".."z" | "A".."Z" | "_" | "0".."9")*)?;
	public TerminalRule getIDRule() {
		return tID;
	} 

	/// **
	// * Hexadecimal color definitions of the form #ffffff or #ffffffff.
	// * In the 8-digit definition the leading two digits specify the (optional) alpha channel.
	// * / terminal HEX_COLOR:
	//	"#" (("0".."9" | "A".."F" | "a".."f") ("0".."9" | "A".."F" | "a".."f"))? ("0".."9" | "A".."F" | "a".."f") ("0".."9" |
	//	"A".."F" | "a".."f") ("0".."9" | "A".."F" | "a".."f") ("0".."9" | "A".."F" | "a".."f") ("0".."9" | "A".."F" |
	//	"a".."f") ("0".."9" | "A".."F" | "a".."f");
	public TerminalRule getHEX_COLORRule() {
		return tHEX_COLOR;
	} 

	/// **
	// * Definition of a date that conforms the format YYYY-MM-dd
	// * / terminal DATE_FORMAT:
	//	"0".."9" "0".."9" "0".."9" "0".."9" "-" "0".."9" "0".."9" "-" "0".."9" "0".."9";
	public TerminalRule getDATE_FORMATRule() {
		return tDATE_FORMAT;
	} 

	/// **
	// * Definition of a time that conforms the format
	// * hh:mm:ss[(+|-)hh[:mm]] or hh:mm:ss[Z]
	// * / terminal TIME_FORMAT:
	//	"0".."9" "0".."9" ":" "0".."9" "0".."9" ":" "0".."9" "0".."9" ("Z" | ("+" | "-") "0".."9" "0".."9" (":" "0".."9"
	//	"0".."9")?)?;
	public TerminalRule getTIME_FORMATRule() {
		return tTIME_FORMAT;
	} 

	/// **
	// * Definition of a time that conforms the format
	// * YYYY-MM-ddThh:mm:ss[(+|-)hh[:mm]] or YYYY-MM-ddThh:mm:ss[Z]
	// * / terminal DATE_TIME_FORMAT:
	//	DATE_FORMAT "T" TIME_FORMAT;
	public TerminalRule getDATE_TIME_FORMATRule() {
		return tDATE_TIME_FORMAT;
	} 

	////////////////////////////////////////////////////////////
	//// Operators
	////////////////////////////////////////////////////////////
	//OP_MATH_PLUS:
	//	"+";
	public OP_MATH_PLUSElements getOP_MATH_PLUSAccess() {
		return pOP_MATH_PLUS;
	}
	
	public ParserRule getOP_MATH_PLUSRule() {
		return getOP_MATH_PLUSAccess().getRule();
	}

	//OP_MATH_MINUS:
	//	"-";
	public OP_MATH_MINUSElements getOP_MATH_MINUSAccess() {
		return pOP_MATH_MINUS;
	}
	
	public ParserRule getOP_MATH_MINUSRule() {
		return getOP_MATH_MINUSAccess().getRule();
	}

	//OP_MATH_MULT:
	//	"*";
	public OP_MATH_MULTElements getOP_MATH_MULTAccess() {
		return pOP_MATH_MULT;
	}
	
	public ParserRule getOP_MATH_MULTRule() {
		return getOP_MATH_MULTAccess().getRule();
	}

	//OP_MATH_DIV:
	//	"/";
	public OP_MATH_DIVElements getOP_MATH_DIVAccess() {
		return pOP_MATH_DIV;
	}
	
	public ParserRule getOP_MATH_DIVRule() {
		return getOP_MATH_DIVAccess().getRule();
	}

	//OP_STRING_CONCAT:
	//	"&";
	public OP_STRING_CONCATElements getOP_STRING_CONCATAccess() {
		return pOP_STRING_CONCAT;
	}
	
	public ParserRule getOP_STRING_CONCATRule() {
		return getOP_STRING_CONCATAccess().getRule();
	}

	//OP_CONDITION_AND:
	//	"and";
	public OP_CONDITION_ANDElements getOP_CONDITION_ANDAccess() {
		return pOP_CONDITION_AND;
	}
	
	public ParserRule getOP_CONDITION_ANDRule() {
		return getOP_CONDITION_ANDAccess().getRule();
	}

	//OP_CONDITION_OR:
	//	"or";
	public OP_CONDITION_ORElements getOP_CONDITION_ORAccess() {
		return pOP_CONDITION_OR;
	}
	
	public ParserRule getOP_CONDITION_ORRule() {
		return getOP_CONDITION_ORAccess().getRule();
	}

	//OP_CONDITION_NOT:
	//	"not";
	public OP_CONDITION_NOTElements getOP_CONDITION_NOTAccess() {
		return pOP_CONDITION_NOT;
	}
	
	public ParserRule getOP_CONDITION_NOTRule() {
		return getOP_CONDITION_NOTAccess().getRule();
	}

	/// *
	// * Define all operators that can be used to compare values in conditional expressions.
	// * / enum Operator:
	//	EQUALS="equals" | GREATER=">" | SMALLER="<" | GREATER_OR_EQUAL=">=" | SMALLER_OR_EQUAL="<=";
	public OperatorElements getOperatorAccess() {
		return unknownRuleOperator;
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	/// *
	// * Boolean lists all possible Boolean values.
	// * / enum Boolean:
	//	TRUE="true" | FALSE="false";
	public BooleanElements getBooleanAccess() {
		return unknownRuleBoolean;
	}
	
	public EnumRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
