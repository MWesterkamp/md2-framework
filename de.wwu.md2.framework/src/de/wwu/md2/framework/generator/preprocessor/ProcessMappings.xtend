package de.wwu.md2.framework.generator.preprocessor

import de.wwu.md2.framework.mD2.CustomAction
import de.wwu.md2.framework.mD2.MD2Factory
import de.wwu.md2.framework.mD2.MappingTask
import de.wwu.md2.framework.mD2.UnmappingTask
import java.util.Collection
import java.util.HashMap
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.resource.ResourceSet

import static de.wwu.md2.framework.generator.preprocessor.ProcessAutoGenerator.*
import static de.wwu.md2.framework.generator.preprocessor.util.Util.*

import static extension de.wwu.md2.framework.generator.util.MD2GeneratorUtil.*
import static extension org.eclipse.emf.ecore.util.EcoreUtil.*

class ProcessMappings {
	
	/**
	 * Copy user-specified and auto-generated mappings from original to cloned GUI elements.
	 * Restricted to StartupActions and AutoGeneratedAction.
	 */
	def static void remapToClonedGUIElements(
		MD2Factory factory, ResourceSet workingInput, HashMap<EObject, EObject> clonedElements,
		Collection<MappingTask> mappingTasks, Collection<MappingTask> autoMappingTasks, Collection<MappingTask> userMappingTasks
	) {
		mappingTasks.forEach [ mappingTask |
			val mappingAction = mappingTask.eContainer as CustomAction
			var mappingTasksCollection = if (mappingAction == getAutoGenAction(workingInput)) autoMappingTasks else userMappingTasks
			for (entry : clonedElements.entrySet) {
				if (entry.value == mappingTask.referencedViewField.resolveViewGUIElement) {		
					val newTask = copyElement(mappingTask) as MappingTask
					val newAbstractRef = factory.createAbstractViewGUIElementRef()
					newAbstractRef.ref = entry.key
					newTask.referencedViewField = newAbstractRef
					mappingAction.codeFragments.add(newTask)
					mappingTasksCollection.add(newTask)
				}
			}
			mappingTasksCollection.add(mappingTask)
		]
	}
	
	/**
	 * In a previous step automatic mappings to auto-generated view elements were created. Some of them might be useless as they are
	 * remapped during program startup.
	 * 
	 * Remove auto-generated mapping if unmapped or user-specified mapping is found (restricted to StartupActions).
	 */
	def static void cleanUpUnnecessaryMappings(MD2Factory factory, ResourceSet workingInput, Collection<MappingTask> autoMappingTasks, Collection<MappingTask> userMappingTasks) {
		val Collection<UnmappingTask> unmappingTasks = workingInput.resources.map(r|r.allContents.toIterable.filter(typeof(UnmappingTask)).filter([isCalledAtStartup(it)])).flatten.toList	
		val iterator = autoMappingTasks.iterator
		while (iterator.hasNext) {
			val autoMappingTask = iterator.next
			val guiElem = autoMappingTask.referencedViewField.resolveViewGUIElement
			val overwrite = userMappingTasks.exists(userMappingTask | userMappingTask.referencedViewField.resolveViewGUIElement == guiElem)
			val unmap = unmappingTasks.exists(unMappingTask | unMappingTask.referencedViewField.resolveViewGUIElement == guiElem)
			if (overwrite || unmap) {
				autoMappingTask.remove()
				iterator.remove()
			}
		}
	}
	
	
}